

/**********************************************************************************************************
FileName				:OrganisationAdmin.sah
Description				:This file contains all the keywords used to interact with GUI Objects across the framework 
AuthorName	 	 	  :Divya Raju.R
DateOfCreation		  :1/27/2016
DateOfModification   :1/27/2016
***********************************************************************************************************/
//var $$e_email;
//function unique_EmailGenration(){
//	var $now = new Date();
//	var $y = $now.getFullYear();
//	var $m = $now.getMonth()+1;
//	var $d = $now.getDate();
//	var $h = $now.getHours();
//	var $min = $now.getMinutes();
//	var $s = $now.getSeconds();
//	
//    $e_email = "testtfw+"+$d+$m+$y+$h+$min+$s+"^"+"@gmail.com";
//	_log($e_email);
//	return $e_email;
//}

var $now = new Date();
var $y = $now.getFullYear();
var $m = $now.getMonth()+1;
var $d = $now.getDate();
var $h = $now.getHours();
var $min = $now.getMinutes();
var $s = $now.getSeconds();
var $email_qa_ =$Mem1+$d+$m+$y+"."+$h+$min+$s+"@gmail.com";
var $nw_policy = $sPolicy_oa+$d+$m+$y+$h+$min+$s;


/*
Function Name 		:   loginToSite
Author 	 	    		:	Anantha N
Created Date 	 	 :   4/29/2016
Description		   	   :   This method is used to login to site with valid credentials
*/

function loginToSite($sStage_URL,$sUserName,$sPassword){
  
         	 //Sets readyStates of an XMLHttpRequest (XHR) Sahi should wait for
			_setXHRReadyStatesToWaitFor("2,3");
  
			//Navigate to url of the application
			_navigateTo($sStage_URL);
	  
	  		//Enter user name
	  		_setValue(_textbox($txt_Email), $sUserName);
	  
	  	    //Enter password
	 	    _setValue(_password($txt_Password), $sPassword);
	  
	  		//Click on signin button
			_click(_submit($btn_SignIn));
   
}

/*
Function Name 		:   logOut
Author 	 	    		:	Anantha N
Created Date 	 	 :   4/29/2016
Description		   	   :   This method is used to log out of the application
*/
function logOut()
{
         	 //Click on user
			_click(_button($btn_Usericon));

			//Click on Log out button
			_click(_link($lnk_LogOut));
}

/*
Function Name 		:   verifythatOrganizationAdminCanIncludePolicyMembersbySelectingaPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting a Policy Groups while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/
function verifythatOrganizationAdminCanIncludePolicyMembersbySelectingaPolicyGroups($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  	// If Check is visible against the user name check it
      if(_isVisible(_strong($strng_GroupName)))
      {
         _click(_checkbox($chkbox_ON, _near(_strong($strng_GroupName))));
        // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
      }
      else
      {
         _log("Group are unavailable in the list to select")
      }

        // Select the desired policy group name
    //	_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
       
  		// Click on add policy
        _click(_button($btn_AddPolicy));
        
  		// Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

  		// Click on Delete
        _click(_link($lnk_Delete, _near(_link($lnk_Edit))));
  
  		// Click on Yes to delete the policy
        _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
       
  		// Logout from the application
          logOut();
}

/*
Function Name 		:   verifyOrganizationadminCanIncludePolicyeMembersBySelectingMembersIndividuallyFromMemberList
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting members individually from the member list while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifyOrganizationadminCanIncludePolicyeMembersBySelectingMembersIndividuallyFromMemberList($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
		//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  		 // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  		// Select the desired policy group name
    	_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
       
  		// Click on add policy
        _click(_button($btn_AddPolicy));
  
  		// Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

  		// Click on Delete
        _click(_link($lnk_Delete, _near(_link($lnk_Edit))));
  
  		// Click on Yes to delete the policy
        _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));

	   // Logout from the application
		logOut();
}

/*
Function Name 		:   VerifyThatOrganizationAdminCanDeleteContacts
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Organization admin can delete  'Contacts'.
Input					:    
*/

function VerifyThatOrganizationAdminCanDeleteContacts()
{
	 			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
				// Click on 'Contacts'
				 _click(_link(2, $lnk_Contacts, _under(_link($lnk_Shortcuts))));
	
  				// Ckecking for the Contact
				_assertVisible(_cell($frst_ContactName));		
				
  				// Click on the Contact
  				_click(_cell($frst_ContactName));
	
  				// Storing the Contact name which going to be deleted
				var $del_ContactName = _getText(_heading2($contactName))
	
                // Click on Delete     
				_click(_link($lnk_DeleteIcon));
  
  			   // Click on Yes 
				_click(_button($btn_Yes, _in(_div($msg_RemoveContact))));
			
				// Checking for the Deleted Contact in the Contact list
  				if(_isVisible($contactName))
	            {
	               _log($msg_ContactPresent);
	            }
				else
	            {
					_log($msg_ContactNOTPresent);              
	            }
  
  			  // Log out from the application	
  				logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanAddaContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a ContactGroups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanAddaContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	// click on the Group name
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
				 // Select the check box
	       		 _click(_checkbox($chkbox_SelectedUser_1st));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
		  
		  		_wait(3000);
  				
  				// Click on Created contact group
  				_click(_link($sGroups_ContactGrpTitle));
		
		        // Click on Delete Icon
		        _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddaUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a UserGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAddaUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
     //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
          	_click(_link($sGroups_UserGrpTitle));
         
           // Click on Delete Icon
            _click(_italic($btn_icon_Trash));

           // Click on Yes
           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
         
        }
  
        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_1st));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));
  
  		_wait(3000);

        // Click on Delete Icon
        //_click(_link($lnk_Delete));
  		 _click(_italic($btn_icon_Trash));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddaPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a PolicyGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAddaPolicyGroups($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on Policy group
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
 			// Enter the name
  			 _setValue(_textbox($txt_Name), $strng_Name);
		
  	   		// CLick Apply
  		      _click(_button($btn_Apply));
			
  
  			// Select the check box
			_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
	  
	  		_wait(3000);
	
	        // Click on Delete Icon
	       _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with VoiceOnly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanAddMBNwithVoiceOnly($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
  			    _click(_div($sMBNnumber_VO_OrgAdmin, _near(_link($lnk_mnb_LocationHeading))));
//	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithMessagingOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with MessagingOnly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_MO_OrgAdmin, $sMBNType_MO_OrgAdmin,$sMBNProvider_OrgAdmin,$sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanAddMBNwithMessagingOnly($sMBNCountry_OrgAdmin, $sMBNnumber_MO_OrgAdmin, $sMBNType_MO_OrgAdmin,$sMBNProvider_OrgAdmin,$sMBNnotes_OrgAdmin)
{
	        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on MBN Mgmt
	        _click(_link($lnk_MBNmgmt));
	
	        // Click on ALL MBNs
	     
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
			
	        //** Searching for the MBN Number **//
	        // Click on Search Icon
	        _click(_italic($icon_Search));
	        
  			// Enter the MBN number
	        _setValue(_textbox($txtbox_MBN), $sMBNnumber_MO_OrgAdmin);
	        
  			// Click on Search 
	        _click(_submit($submit_Search));
	
  			// Check for the MBN number with Messag
	        if(_isVisible(_div($sMBNnumber_MO_OrgAdmin)))
	        {
	          // click on Delete icon
	          _click(_link($lnk_DeleteMBN));
	
	          // click on Yes button
	          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	        }
	
	        // Click on Add icon 
	        _click(_link($splusicon_MBN_OrgAdmin));
	
	        // Select the country
	        _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	        // Enter the MBN Number
	        _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_MO_OrgAdmin);
	
	        // Select the MBN Type
	        _setSelected(_select($drpdwn_MBNtype), $sMBNType_MO_OrgAdmin);
	
	        // Select MBN provider
	        _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	        // Enter the MBN notes
	        _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
	        // Selecting a Assign and Storing the Assign name
	        _click(_radio($radiobtn_SelectMembr_M));
	        var $assignMBN_name = _getText(_div($sAssignName_MBN));
	        // Print the Assign Name	
	        _log($assignMBN_name);
	
	        // Click on Create
	        _click(_submit($submit_Create));
	
	        // Click on created MBN
	        _click(_div($sMBNnumber_MO_OrgAdmin));
	
	        // Click on AssignTo
	        _click(_link($lnk_assignTO));
	
	        // Verify the Assign Name
	        _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	        // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceAndMessaging
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with Voice And Messaging
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VandM_OrgAdmin, $sMBNType_VM_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/
function verifyThatOrgAdminCanAddMBNwithVoiceAndMessaging($sMBNCountry_OrgAdmin, $sMBNnumber_VandM_OrgAdmin, $sMBNType_VM_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	       //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on MBN Mgmt
	        _click(_link($lnk_MBNmgmt));
	
	        // Click on ALL MBNs
	   //     _click(_link($lnk_AllMBNs));
  			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	        //** Searching for the MBN Number **//
	        // Click on Search Icon
	        _click(_italic($icon_Search));
	        // Enter the MBN number
	        _setValue(_textbox($txtbox_MBN), $sMBNnumber_VandM_OrgAdmin);
	        // Click on Search 
	        _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice and Message
	        if(_isVisible(_div($sMBNnumber_VandM_OrgAdmin)))
	        {
	          // click on Delete icon
	          _click(_link($lnk_DeleteMBN));
	
	          // click on Yes button
	          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	        }
	
	        // Click on Add icon 
	        _click(_link($splusicon_MBN_OrgAdmin));
	
	        // Select the country
	        _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	        // Enter the MBN Number
	        _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VandM_OrgAdmin);
	
	        // Select the MBN Type
	        _setSelected(_select($drpdwn_MBNtype), $sMBNType_VM_OrgAdmin);
	
	        // Select MBN provider
	        _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	        // Enter the MBN notes
	        _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
	        // Selecting a Assign and Storing the Assign name
	        _click(_radio($radiobtn_SelectMembr));
	        var $assignMBN_name = _getText(_div($sAssignName_MBN));
	        // Print the Assign Name	
	        _log($assignMBN_name);
	
	        // Click on Create
	        _click(_submit($submit_Create));
	
	        // Click on created MBN
	        _click(_div($sMBNnumber_VandM_OrgAdmin));
	
	        // Click on AssignTo
	        _click(_link($lnk_assignTO));
	
	        // Verify the Assign Name
	        _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	        // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add CustomReports
Input			          :  $sCustomReport_Title, $sCustomReport_Description, $sFromDate_CustmReport, $sTODate_CustmReport
*/

function verifyThatOrgAdminCanAddCustomReports($sCustomReport_Title, $sCustomReport_Description, $sFromDate_CustmReport, $sTODate_CustmReport)
{
          //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));

          //var $time=new Date().getTime();//gives the current time in milliseconds.
          //_log($time);

          // Click on '+' icon 
          _click(_link($plusicon_Report_OrgAdmin));

          // Enter the Title of Custom report
          _setValue(_textbox($txtbox_Title), $sCustomReport_Title);

          // Enter the Description
          _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

          // Click Next
          _click(_submit($submit_Next));

          // choosing the desired report columns.
          _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
          // _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));
  		//_click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));
          _click(_checkbox($chk_MessageStatus_3, _in(_div($chk_MessageStatus))));

          // Click on Next
          _click(_button($btn_Nxt));

          // Enter the from Date
          _setValue(_textbox($txtbox_TO), $sFromDate_CustmReport);
          // Enter the To Date
          _setValue(_textbox($txtbox_TO_1), $sTODate_CustmReport);
          // Click on Add Report
          _click(_submit($lnk_AddReport));

          // Verifying the created report
          _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));
  
  /*
  			// refresh the current page
  			_call(window.location.reload());
  	
  			// Click on User icon
           _click(_button($btn_Usericon));

          // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		  _click(_link($sCustomReport_Title));
		

          _click(_link("Delete"));
          _click(_button("Yes", _near(_heading4("Confirm Delete"))));
   */
           // Log out from app
               logOut();
}

/*
Function Name 		:  verifyThatOrganizationAdminCanEditAUserGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Organization Admin Can Edit A UserGroups
Input			          :  $sGroups_UserGroupEditTitle
*/

function verifyThatOrganizationAdminCanEditAUserGroups($sGroups_UserGroupEditTitle)
 {
            //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		  
            // Click on Groups
            _click(_link($lnk_Groups));

            // Click on User Groups
            _click(_link($lnk_UserGroups));

            // Click on Edit
            _click(_italic($btn_pencil_EditIcon));

            // Storing the current title and printing
            var $currTitle_UserGroup = 	_getText(_textbox($txtbox_Title));
            _log($currTitle_UserGroup);

			// Editing the current Title 
            var $t_Title = $currTitle_UserGroup+$sGroups_UserGroupEditTitle;
            // Editing the Title    
            _setValue(_textbox($txtbox_Title), $t_Title);

            // Click on Save
            _click(_submit($submit_Save));

            //_assertEqual($expected, $actual[, $message])
            _assertEqual($t_Title, _getText(_link($t_Title)));

            // Log out from app
            logOut();
}

/*
Function Name 		:  verifyThatOrganizationAdminCanBlockOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Organization Admin Can Block Other OrgAdmin
Input			          :  $sDomainName3
*/

function verifyThatOrganizationAdminCanBlockOtherOrgAdmin($sDomainName3)
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));
		
				   // Click on Organization Admin
					_click(_link($lnk_MOrganizationAdmin));
  
  					_wait(4000);
	
					// Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
				//	_click(_italic("glyphicon glyphicon-search"));
  
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName3);
	                
					// Click Search
	                _click(_submit($submit_Search));
				
					// **** Searching and Verifying the Email ****// 
  					// Checking for User name
	                if(_exists(_div($sDomainName3)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_BlockMember, _near(_div($sDomainName3)))))
	                        {
	                              // Click on Lock icon
	                              _click(_link($lnk_BlockMember, _near(_div($sDomainName3))));
	                              // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                        // Print the Msg
	                        _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
				_wait(3000);
	
	   //**** Verifying  that Organization  member can login but can  not access sub domain(organization) since  the  link has been disabled. ****//
	            
  				//Call method to login to site with valid credentials
  			       loginToSite($sURL,$sDomainName3,$sDomainName2_Password); 
	                _wait(5000);
	
	                // Click on User icon
	                _click(_button($btn_Usericon));
					
  					// Storing the Organistion Admin name
					var $el = _span($s_ADMIN, _near(_div($lnk_OrgAdmin_NorthwesternMutual1)));
	                var $cursorStyle = _style($el, $_cursorr);
					
  				// Checking for Element is blocked or not 
	                if ($cursorStyle == $c_cursorStyle)
	                {
	                  // Element is disabled
	                  _log($msg_EleDisabled);
	                }
	
	                // Log out from app
	                logOut();
	
}

/*
Function Name 		:  verifyThatOrganizationAdminCanBlockAnOrgAdminMemberWhoIsAssociatedToRespectiveOrg
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrganizationAdmin Can Block An OrgAdmin Member Who Is Associated To Respective Org
Input			          :  $sDomainName2
*/

function verifyThatOrganizationAdminCanBlockAnOrgAdminMemberWhoIsAssociatedToRespectiveOrg($sDomainName2)
{
	              //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));
	
	                // Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
	
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName2);
	                
					// Click Search
	                _click(_submit($submit_Search));
	
	          // **** Searching and Verifying the Email ****// 
	                // Checking for the Email
  					if(_exists(_div($sDomainName2)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_BlockMember, _near(_div($sDomainName2)))))
	                        {
	                              // Click on Lock icon
	                              _click(_link($lnk_BlockMember, _near(_div($sDomainName2))));
	                              
                              	 // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                  // Print the Msg
	                  _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
	
	   //**** Verifying  that Organization  member can login but can  not access sub domain(organization) since  the  link has been disabled. ****//
	             
	              //Call method to login to site with valid credentials
  			        loginToSite($sURL,$sDomainName2,$sDomainName2_Password); // QA
	                
  					_wait(5000);
	
	                // Click on User icon
	                _click(_button($btn_Usericon));
	
  				// Storing the OrgAdmin 
	               // var $el = _link($lnk_OrgAdmin_NorthwesternMutual);		
	             var $el = _span($s_ADMIN, _near(_div($lnk_OrgAdmin_NorthwesternMutual1)));
  				// Storing cursor type    
  				var $cursorStyle = _style($el, $_cursorr);
				
  					// Checking the cursor type hovering on the element 	
	                if ($cursorStyle == $c_cursorStyle)
	                {
	                  // Element is disabled
	                  _log($msg_EleDisabled);
	                }
	
	                // Log out from app
	                logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditAnUserIntoTheDomain
Author 	 	    	     :  Anantha N
Created Date 	      :  13 May 2016
Description		        :  This method is used to Verify that Organization admin can edit an 'User ' into the domain
Input			          :  $sDomainName3, $sEdit_Titl
*/


function verifyThatOrgAdminCanEditAnUserIntoTheDomain($sDomainName3, $sEdit_Titl)
{
	      ///Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	      // Click on Members	
	      _click(_link($lnk_Members));
	
	      // Click on ALL
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click on Seach Icon
	      _click(_italic($smembers_SearchIcon));
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sDomainName3);               
	
	      // Click Search
	      _click(_submit($submit_Search));
	
  		// Checking for Email is present 
	      if(_exists(_div($sDomainName3)))
	      {
	            // IF member is visible 
	            if(_isVisible(_link($lnk_EditUsr, _near(_div($sDomainName3)))))
	            	{
	                    // Click on Edit icon
	                    _click(_link($lnk_EditUsr, _near(_div($sDomainName3))));
	
	                    // Editing the Title
	                    _setValue(_textbox($txtbox_Title ), $sEdit_Titl);
	
	                    // click on Update
	                    _click(_submit($submit_Update));
	
	                    // Click on record
	                    _click(_div($sDomainName3));
	
	                    // Verifying the editing record 
	                    _assertEqual($sEdit_Titl, _getText(_span($sEdit_Titl, _near(_label($slbl_title)))));
	
	                    // Log out from app
	                    logOut();
	      			  }
	      }else
	      {
	            // Print the Msg
	            _log($msg_SearchMemberDontExist);
	          
	        	// Log out from app
	            logOut();
	      }	
}

/*
Function Name 		:  verifyThatOrgaAdminCanEditAPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgaAdmin Can Edit A PolicyGroups
Input					  :    $sGroups_PolicyGrpTitle, $sDescription, $sEdit_
*/

function verifyThatOrgaAdminCanEditAPolicyGroups($sGroups_PolicyGrpTitle, $sDescription, $sEdit_)
{
			  	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Policy Groups
				_click(_link($lnk_PolicyGroups));
		
  				// Checking for the  Policy is present 
				if(_isVisible(_link($sGroups_PolicyGrpTitle)))
		        {
                  
                  // Click on Policy group
		          	_click(_link($sGroups_PolicyGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));		
		
		 		// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
	        	_click(_submit($submit_AddGroup));    
  			
  				_click(_link($sGroups_PolicyGrpTitle));
		
				// Click on Edit
				_click(_italic($btn_pencil_EditIcon));     
	
				// Enter the edit value
				_setValue(_textarea($txtarea_Description),$sEdit_);
	
				// Click Save
				//_click(_submit($submit_Save ));
  				_click(_submit($submit_Save, _near(_button($btn_Close))));
	
				// Verify the edit value
				_assertEqual($sEdit_, _getText(_paragraph($sEdit_)));
		  
		  		_wait(3000);
		
		        // Click on Delete Icon
		       _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditAContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   13 May 2016
Description		   	   :   This method is used to Verify that Organization admin can edit a 'Contact Groups''
Input					  :   $sGroups_ContactGrpTitle, $sDescription, $sEdit_ 
*/

function verifyThatOrgAdminCanEditAContactGroups($sGroups_ContactGrpTitle, $sDescription, $sEdit_)
{
					//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
			        // Click on Groups
			         _click(_link($lnk_Groups));
			
					// Click on Contact Groups
					_click(_link($lnk_ContactGroups));
		
  					// Check for the Contact is present in the list
		     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
			        {
                      	// Click on the Contact Group
			          	_click(_link($sGroups_ContactGrpTitle));
			         
			           // Click on Delete Icon
			            _click(_italic($btn_icon_Trash));
			
			           // Click on Yes
			           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
			       }
			
					// Click on '+' icon
			        _click(_link($plusicon_Groups));
		
					// Enter the Tilte
			        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
			
			        // Enter the Description
			        _setValue(_textarea($txtarea_Description), $sDescription);
			
			        // Click on Next
			        _click(_submit($submit_Next));
		
					 // Select the check box
		       		 _click(_checkbox($chkbox_SelectedUser_1st));
			
					// Click on Add Group
			        _click(_submit($submit_AddGroup));
		
  					// Click on created Contact group
					_click(_link($sGroups_ContactGrpTitle));
	
		 			// Click on Edit
					_click(_italic($btn_pencil_EditIcon));	        
		
					// Enter the edit value
					_setValue(_textarea($txtarea_Description),$sEdit_);
		
					// Click Save
					_click(_submit($submit_Save ));
		
					// Verify the edit value
					_assertEqual($sEdit_, _getText(_paragraph($sEdit_)));
			  
			  		_wait(3000);
			 				
	  				// Click on Created contact group
	  				_click(_link($sGroups_ContactGrpTitle));
			
			        // Click on Delete Icon
			        _click(_italic($btn_icon_Trash));
			
			        // Click on Yes
			        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		
					// Log out from app
			          logOut();
}

/*
Function Name 		:  verifyThatMemberAssignedToTheNewMBNIsDisplayedProperly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Member Assigned To The New MBN Is Displayed Properly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatMemberAssignedToTheNewMBNIsDisplayedProperly($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin,
 $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		  
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	          //_click(_link($lnk_AllMBNs));
  			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number present in the list
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatAppIsNotAllowedToCreateDuplicateMBNWithSameMBNNumberSameCountryAndSameMBNType
Author 	 	    	     :  Anantha N
Created Date 	      :  16 May 2016
Description		        :  This method is used to Verify that app is not allowed to create duplicate MBN with Same MBN number, same country and same MBN type.
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatAppIsNotAllowedToCreateDuplicateMBNWithSameMBNNumberSameCountryAndSameMBNType($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
		//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	         _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt)))); 
	
	          // Click on ALL MBNs
	          _click(_link($lnk_AllMBNs));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for the MBN number present in the list
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
	          //_click(_div($sMBNnumber_VO_OrgAdmin));
  				_click(_div($sMBNnumber_VO_OrgAdmin, _near(_link($lnk_mnb_LocationHeading))));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
  
 			 // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
  
			// Verifying the Error msg
  			_assertVisible(_div($err_MsgMBN));

		 	// click 'X' button
			_click(_button($btn_Close));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatMembersIncludedForTheUsergroupsIsDisplayedUnderUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   19 May 2016
Description		   	   :   This method is used to Verify that members included for the User groups is displayed under User groups
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatMembersIncludedForTheUsergroupsIsDisplayedUnderUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
	        // Click on User Groups
	        _click(_link($lnk_UserGroups));
	  
  			// Check for the User Group present in the list
	  		if(_isVisible(_link($sGroups_UserGrpTitle)))
	        {
              // Click on the User Group
	          	_click(_link($sGroups_UserGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	         
	        }
	  
	        // Click on '+' icon
	        _click(_link($plusicon_Groups));
	
	        // Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sGroups_Description);
	
	        // Click on Next
	        _click(_submit($submit_Next));
		
  			// Check for user name present with check box
  			if(_isVisible(_checkbox($chkbox_SelectedUser_1st)))
            {
                // Select the check box
                _click(_checkbox($chkbox_SelectedUser_1st));
              //_click(_checkbox("on", _near(_strong("Aravinda Chundi"))));
              
              // Store the Contact name checked
               var $name1 = _getText(_link($selected_ContactedName));
              
              // Print the name  
              _log($name1);
              
               // Select the check box
              _click(_checkbox($chkbox_SelectedUser_2nd));
              //_click(_checkbox("on", _near(_strong("Balaji Ramachandran"))));
              
              // Store the Contact name checked
                var $name2 = _getText(_link($selected_ContactedName2));
              
              // Print the name  
               _log($name2);

                // Click on Add Group
                _click(_submit($submit_AddGroup));
              
              // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_UserGrpTitle));
	
			// Click on the Group name created
			_click(_link($sGroups_UserGrpTitle));
	
			// Verifying selected group memebers is present or not in frame
			_assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
			_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));
	
	        // Click on Delete Icon
	       _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            }
  			else
            {
                // Print the message
                _log($msg_NoMembersInGroupToSelect);

                // Click on Add Group
                _click(_submit($submit_AddGroup));

                // Verifying created Group is present or not in frame
                _assertVisible(_link($sGroups_UserGrpTitle)); 
              
              _log($msg_UserGpWithOutMemebers);
           	}
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  19 May 2016
Description		        :  This method is used to Verify that members included for the Policy Groups is displayed under Policy Groups
Input			          :  $sGroups_PolicyGrpTitle, $sDescription
*/

function verifyThatMembersIncludedForThePolicyGroupsIsDisplayedUnderPolicyGroups($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for Policy Groups  in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on the policy groups
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	           _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
  
  			// Checking for user name with the Check box		
              if(_isVisible(_checkbox($chkbox_SelectedUser)))
                  {
                      // Select the check box against the name
                     _click(_checkbox($chkbox_SelectedUser_3rd));
                //    _click(_checkbox("on", _near(_strong("Divya Raju"))));
                    
                    // Storing the Selecte Contact name
                       var $name1 = _getText(_link($selected_ContactedName));
                    
                    // Print the name
                      _log($name1);
                    
                    // Select the check box against the name
                      _click(_checkbox($chkbox_SelectedUser_4th));  
                   // _click(_checkbox("on", _near(_strong("Nagaraj Shivpooje"))));
                    
                    // Storing the Selecte Contact name
                      var $name2 = _getText(_link($selected_ContactedName2));
                    
                    // Print the name
                      _log($name2);

                      // Click on Add Group
                      _click(_submit($submit_AddGroup));
                    
                    // Verifying created Group is present or not in frame
	              _assertVisible(_link($sGroups_PolicyGrpTitle));

    	          // Click on the Group name created
        	      _click(_link($sGroups_PolicyGrpTitle));

            	  // Verifying selected group memebers is present or not in frame
             	 _assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
              	_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));

              	// Click on Delete Icon
              	_click(_italic($btn_icon_Trash));

              	// Click on Yes
              	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
              }
              else
              {
                  // Print the message
                  _log($msg_NoMembersInGroupToSelect);

                  // Click on Add Group
                  _click(_submit($submit_AddGroup));
                
                // Print the message
                _log($msg_PolicyGpsWithOutMemebers);

                  // Verifying created Group is present or not in frame
                  _assertVisible(_link($sGroups_PolicyGrpTitle));
              }

              // Log out from app
                logOut();
}

/*
Function Name 		:  verifyThatMembersIncludedForTheContactGroupsIsDisplayedUnderContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a ContactGroups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatMembersIncludedForTheContactGroupsIsDisplayedUnderContactGroups($sGroups_ContactGrpTitle, $sDescription)
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// If the group name visible in the list delete it
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  // Click on the Group title
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
  			//  Checking for the members in the Group to select
				if(_isVisible(_checkbox($chkbox_SelectedUser)))
            	{
                    // Selecting the check box
                    _click(_checkbox($chkbox_SelectedUser_5th));
                  //_click(_checkbox("on", _near(_strong("Prakash Nagarajan"))));
                  
                   // Storing the selected name
                   var $name1 = _getText(_link($selected_ContactedName));
                 
                  // Print the name
                  _log($name1);
                  
                  // Selecting the check box
                    _click(_checkbox($chkbox_SelectedUser_6th));
                  //_click(_checkbox("on", _near(_strong("Rajath Chandrashekar"))));

                 // Storing the selected user name
                    var $name2 = _getText(_link($selected_ContactedName2));
                  
                 // Print the name
                   _log($name2);

                 // Click on Add Group
                    _click(_submit($submit_AddGroup));
                  
                  // Verifying created Group is present or not in frame
	      		  _assertVisible(_link($sGroups_ContactGrpTitle));
	  
	  			// Click on the Group name created
				_click(_link($sGroups_ContactGrpTitle));
	
			// Verifying selected group memebers is present or not in frame
		//	_assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
			_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));
	
	        // Click on Delete Icon
	        _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            }
  			else
            {
                // Print the message
                _log($msg_NoMembersInGroupToSelect);
              
              // Print the message
              _log($msg_ContactGpsWithOutMemebers);

                // Click on Add Group
                _click(_submit($submit_AddGroup));

                // Verifying created Group is present or not in frame
                _assertVisible(_link($sGroups_ContactGrpTitle));

           	 }
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanUnassignTheMemberWhoHasAssociatedWithMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can unassign the member who has associated with MBN.
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanUnassignTheMemberWhoHasAssociatedWithMBN($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	            _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			// If the MBN number is visible in the search list delete it.
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
  
   			// Click on Unassign link next to the record
 				//_click(_link($lnk_Unassign, _near(_span($assignMBN_name))));
  			_click(_link("Unassign"));

			// Click on Yes button
				_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassig))));

  			// Verfiying that assigne name remove is not present.
			   _assertNotVisible(_span($assignMBN_name));
  
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanEditMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can edit  'MBN'
Input			          :  $sMBNEdit_notes_OrgAdmin 
*/ 

function verifyThatOrgAdminCanEditMBN($sMBNEdit_notes_OrgAdmin)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	          //_click(_link($lnk_AllMBNs));
  			_click(_link("/All/", _near(_link("/MBN Management/"))));
	
  			 var $MBNnum;
  			// Checking for Edit of MBN
	          if(_isVisible(_link($lnk_EditMBN)))
              {
  					// Click on Edit icon
  			 		 _click(_link($lnk_EditMBN));
                
                	$MBNnum = _getText(_textbox($txtbox_MBNnumber));
                
                // Editing the Note of MBN
                 _setValue(_textarea($txtarea_MBNNotes),$sMBNEdit_notes_OrgAdmin);
                // Click on 
                _click(_submit($submit_Update));
              }
  				else
              	{
                  // Print the msg
                	_log($msg_MBN_recordsNotPresent);
                   
                  	// Log out from app
	          		logOut();	
              	}
  
  			//** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $MBNnum);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Click on Edited MBN number
  			 _click(_div($MBNnum));	
  
  			_assertEqual($sMBNEdit_notes_OrgAdmin, _getText(_span($sMBNEdit_notes_OrgAdmin, _near(_label($lbl_Notes)))));
   
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrgAdminCanDeleteMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can delete 'MBN'
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteMBN()
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	       //   _click(_link($lnk_AllMBNs));
  				_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
  			
  			// MBN record storing 
  			 var $MBNnum = _getText(_div($record_MBN));
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_DeleteMBN)))
              {					
                	// Click on Delete icon
  			 		 _click(_link($lnk_DeleteMBN, _near(_div($record_MBN))));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($txt_MBNDeletd));
              }
  				else
              	{
                  // Print the msg
                	_log($msg_MBN_recordsNotPresent);
                   
                  	// Log out from app
	          		logOut();	
              	}
  
  			//** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $MBNnum);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			 // Verifying Search record should not be present
    		 _assertVisible(_heading1($heading_NoIteamsToDisplay, _near(_heading2($heading_MBNs0))));
   
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrgAdminCanDeleteUserGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'User groups'
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteUserGroups()
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on User Groups
			  _click(_link($lnk_UserGroups));
  			
  			// User Group record storing 
  			 var $userGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	$userGroup = _getText(_strong($record_Groups));
                
                	// Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
                	// Verifying Deleted group doesnot exists
  				   _assertNotVisible($userGroup)
              }
  				else
              	{
                  // Print the msg
                	_log($msg_UsersGroup_recordsNotPresent);
              	}
  	
  			
   
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanDeleteAPolicyGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'Policy Groups''
Input			          :  
*/ 

function  verifyThatOrgAdminCanDeleteAPolicyGroups()
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on Policy Groups
			  _click(_link($lnk_PolicyGroups));
  			
  			 var $policyGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	//  Policy group name
                	$policyGroup = _getText(_div($name_Groups));
            
                // Print the policy group
                	_log($policyGroup);
                	
                   // Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
               		 // Verifying Deleted Policy group is not present
					_assertNotVisible($policyGroup);
              }
  				else
              	{
                  // Print the msg
                	_log($msg_PolicyGroup_recordsNotPresent);  
               	}		
   
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanDeleteAContactGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'Contact Groups''
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteAContactGroups()
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on Contact Groups
			  _click(_link($lnk_ContactGroups));
  			
  			 var $contactGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	//  Contact group name
                	$contactGroup = _getText(_div($name_Groups));
            
                // Print the Contact group
                	_log($contactGroup);
                	
                   // Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
            	    // Verifying Deleted Contact group is not present
					_assertNotVisible($contactGroup);
           	   }
  				else
              	{
                  // Print the msg
                	_log($msg_ContactGroup_recordsNotPresent );
              	}
  
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrganizationAdminCanUnBlockOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can unblock other Organization admin
Input			          :  $sDomainName5
*/

function verifyThatOrganizationAdminCanUnBlockOtherOrgAdmin($sDomainName5)
{
	              //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));

					// Click on Organization Admin
	               _click(_link($lnk_MOrganizationAdmin));
	
	                // Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
	
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName5);
	                
					// Click Search
	                _click(_submit($submit_Search));
	
	          // **** Searching and Verifying the Email ****// 
	                // Checking for the Email
  					if(_exists(_div($sDomainName5)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_UnblockMember, _near(_div($sDomainName5)))))
	                        {
	                              // Click on UnLock icon
	                              _click(_link($lnk_UnblockMember, _near(_div($sDomainName5))));
	                              
                              	 // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                  // Print the Msg
	                  _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
 }

/*
Function Name 		:  verifyThatOrgAdminCanUnassignMembersFromThepolicyGroup
Author 	 	    		:	Anantha N
Created Date 	 	 :   27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the policy  group
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanUnassignMembersFromThepolicyGroup($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on Policy group
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_link($lnk_Delete));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Select the check box
			_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
	  
	  		_wait(3000);
  
  			// Click on Group title
		_click(_link($sGroups_UserGrpTitle));

		$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

		// Click Unassign
		_click(_link($lnk_Unassign));

		//	Click Yes
		_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	   // Unassigned Name is not visible in the User group.
		_assertNotVisible($assignName);
	
	        // Click on Delete Icon
	        _click(_link($lnk_Delete));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
			// Log out from app
	          logOut();
}


/*
Function Name 		:  verifyThatOrgAdminCanUnassignMembersFromTheUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :  27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the User groups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanUnassignMembersFromTheUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
          	_click(_link($sGroups_UserGrpTitle));
         
           // Click on Delete Icon
            _click(_italic($btn_icon_Trash));

           // Click on Yes
           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
         
        }
  
        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_1st));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));
  
  		_wait(3000);

		// Click on Group title
		_click(_link($sGroups_UserGrpTitle));

		$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

		// Click Unassign
		_click(_link($lnk_Unassign));

		//	Click Yes
		_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	   // Unassigned Name is not visible in the User group.
		_assertNotVisible($assignName);

        // Click on Delete Icon
        _click(_italic($btn_icon_Trash));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

		// Log out from app
          logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanUnassignMembersFromTheContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the Contact Groups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanUnassignMembersFromTheContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	// click on the Group name
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		            _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
				 // Select the check box
	       		 _click(_checkbox($chkbox_SelectedUser_1st));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
		  
		  		_wait(3000);
  				
  				// Click on Created contact group
  				_click(_link($sGroups_ContactGrpTitle));
		
				$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

				// Click Unassign
				_click(_link($lnk_Unassign));

				//	Click Yes
				_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	  			 // Unassigned Name is not visible in the User group.
				_assertNotVisible($assignName);

		        // Click on Delete Icon
		        _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotAssignAMemberAsANewDomainAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   30 May 2016
Description		   	   :   This method is used to Verify that Organization admin cannot assign a member as a new domain admin
Input					:    
*/

function verifyThatOrgAdminCannotAssignAMemberAsANewDomainAdmin()
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on User Roles
          _click(_link($lnk_UserRoles));

      // Verifying Domain Admin link is not present
          _assertNotVisible( _link($lnk_DomainAdmin))

      // Log out from app
          logOut();
}


/*
Function Name 		: verifyThatOrgAdminCannotAssignAEmployeeOrUserToAnOrganization_subDomain
Author 	 	    		:	Anantha N
Created Date 	 	 :   30 May 2016
Description		   	   :   This method is used to Verify that Organization admin can not assign a Employee/user to an organization(sub domain)
Input					:    
*/

function verifyThatOrgAdminCannotAssignAEmployeeOrUserToAnOrganization_subDomain()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

         // Verifying Organizational Units link is not present
        _assertNotVisible( _link($lnk_OrgUnits));

        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotAssignAnOrgMemberAsAAdminOfTheRespectiveOrganization
Author 	 	    		:	Anantha N
Created Date 	 	 :   31 May 2016
Description		   	   :   This method is used to Verify that Organization admin can  not assign an organization member as a admin of the respective organization
Input					:    
*/

function verifyThatOrgAdminCannotAssignAnOrgMemberAsAAdminOfTheRespectiveOrganization()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Click on Organization Admin
		_click(_link($lnk_OrganizationAdmin));
		
		// Click on the Organization
		_click(_link($lnk_OrgAdmin_NorthwesternMutual1));

		// Click Admins tab
		_click(_link($lnk_Admins));

		// Asgin Memebers
	      _click(_link($lnk_AssignMemebrs));
  
  		// Enter the name
  		_setValue(_textbox($txt_Name), $memberName_OrgAdmin);
		
  	   // CLick Apply
  		_click(_button($btn_Apply));

		// Checking for the Member is present in the list
	    if(_isVisible(_checkbox($chkbox_ON, _near(_strong($memberName_OrgAdmin)))))
			{
              	// Click the check box
				_click(_checkbox($chkbox_ON, _near(_strong($memberName_OrgAdmin))));

              	// Click Add memebres
				//_click(_button($lnk_AddMembers));
              _click(_button($submit_Save));
              //_click(_submit($submit_Save, _near(_button($btn_Close))));	

              	// Verifyinig the appropriate message is displayed 
				_assertVisible(_div($msg_ReqIsAllowedOnlyForDomainAdmin));
            }
				else
           		 {
                   		// Print the message
              			_log($msg_MemberNotFoundToCheck);
            	 }
	
        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditHisProfile
Author 	 	    		:	Anantha N
Created Date 	 	 :   31 May 2016
Description		   	   :   This method is used to Verify that organization admin can edit his profile
Input					 :    $sProfile_ProfileTitle
*/

function verifyThatOrgAdminCanEditHisProfile($sProfile_ProfileTitle)
{
	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	// Click on My Profile
	_click(_link($lnk_MyProfile));
	
	// Click on ProfileloginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	_click(_link($lnk_Profile, _near(_link($lnk_MyProfile))));
	
	// Click on Edit Contact Information
	_click(_italic($btn_pencil_EditIcon));
	
	// Edit the title
	_setValue(_textbox($txtbox_Title), $sProfile_ProfileTitle);
	
	// Click on Update
	_click(_submit($submit_Update));
	
	// Verifying the valid message is displayed on updating
	_assertVisible(_div($msg_MemberUpdated));
	
	// Verifying title field has been updated 
	_assertEqual($sProfile_ProfileTitle, _getText(_span($sProfile_ProfileTitle)));
	
	// Log out from app
	    logOut();
}

/*
Function Name 	   : verifyThatOrgAdminCanDeleteContacts
Author 	 	    		: Anantha N
Created Date 	 	 : 1 June 2016
Description		   	   : This method is used to Verify that Organization admin can delete  'Contacts'
Input					 : 
*/

function verifyThatOrgAdminCanDeleteContacts()
{
	    //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	    // Click on My Profile
	    _click(_link($lnk_MyProfile));
	
	    // Click Contacts 
	    _click(_link($lnk_Contacts, _near(_link($lnk_MyProfile))));
	
	    var $contactName;
	    var $status;
	
	      if(_isVisible(_link($icon_Profile_DeleteIcon)))
	      {
	            // Storing the Contact name
	            $contactName = _getText(_div($name_Contacts, _near(_div($lbl_Tools))));
	            _log($contactName);
	
	            // Click Delete icon
	            _click(_link($icon_Profile_DeleteIcon));
	
	            // Click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmRemove))));
	
	            // Verifying the Contact name is present or not
	            $status = _isVisible(_link($contactName));
	            _log($status);
	
	            // Click on Add button
	            _click(_link($plusIcon_Contacts));
            
            _setValue(_textbox($txt_Name), $contactName);
			_click(_button($btn_Apply));
	
	            // Add the contact
	            _click(_checkbox($chkbox_SelectedUser, _near(_strong($contactName))));
	
	            // Click Add members
	           // _click(_button($lnk_AddMembers));
            _click(_button($submit_Save, _near(_button($btn_Cancel))));
	      }
	      	else
	          {
	            _log($msg_ContactsEmpty);
	          }
	
	   // Log out from app
	      logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanAssignMoreMembersToExistingContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   01 June 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the  existing  Contact Groups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

      // Checking for the Group name in the list 
      if(_isVisible(_link($sGroups_ContactGrpTitle)))
      {
          // click on the Group name
          _click(_link($sGroups_ContactGrpTitle));

          // Click on Delete Icon
          _click(_italic($btn_icon_Trash));

          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
      }

      // Click on '+' icon
      _click(_link($plusicon_Groups));

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sDescription);

      // Click on Next
      _click(_submit($submit_Next));

       // Click on Add Group
      _click(_submit($submit_AddGroup));

      // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_ContactGrpTitle));

      _wait(3000);

      // Click on Created contact group
      _click(_link($sGroups_ContactGrpTitle));

  	// Click Update Members
      _click(_link($lnk_UpdateMembers));

     // Select the check box
      _click(_checkbox($chkbox_SelectedUser_1st));
      _click(_checkbox($chkbox_SelectedUser_2nd));

  	// Click Add memebers
   //   _click(_submit($submit_Save));
  _click(_button($submit_Save ));

  	// Verifying the Update Message
      _assertVisible(_heading3($msg_GrpUpadted));

      // Log out from app
      logOut();
  
}

/*
Function Name 		:  verifyThatOrgAdminCanAssignMoreMembersToExistingPolicygroup
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the existing  policy  group
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingPolicygroup($sGroups_PolicyGrpTitle, $sDescription)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Policy Groups
      _click(_link($lnk_PolicyGroups));

        // Checking for the Policy is visible in the list
        if(_isVisible(_link($sGroups_PolicyGrpTitle)))
        {
          // Click on Policy group
          _click(_link($sGroups_PolicyGrpTitle));

          // Click on Delete Icon
          _click(_link($lnk_Delete));

          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
        }

      // Click on '+' icon
      _click(_link($plusicon_Groups));		

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sDescription);

      // Click on Next
      _click(_submit($submit_Next));

      // Click on Add Group
      _click(_submit($submit_AddGroup));

      // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_PolicyGrpTitle));

      _wait(3000);

      // Click on Policy group
      _click(_link($sGroups_PolicyGrpTitle));

      // Click Update Members
      _click(_link($lnk_UpdateMembers));

      // Select the check box
      _click(_checkbox($chkbox_SelectedUser_3rd));
      _click(_checkbox($chkbox_SelectedUser_4th));

      // Click Add memebers
      _click(_button($submit_Update));

      // Verifying the Update Message
      _assertVisible(_heading3($msg_GrpUpadted));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCanAssignMoreMembersToExistingUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   01 June 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the  existing  User groups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

            // Checking for the members in the Group to select
            if(_isVisible(_link($sGroups_UserGrpTitle)))
            {
              _click(_link($sGroups_UserGrpTitle));

              // Click on Delete Icon
              _click(_italic($btn_icon_Trash));

              // Click on Yes
              _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

            }

        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));

        _wait(3000);

        // click UserGroup
        _click(_link($sGroups_UserGrpTitle));

        // Click Update Members
        _click(_link($lnk_UpdateMembers));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_3rd));
        _click(_checkbox($chkbox_SelectedUser_4th));

        // Click Add memebers
        //_click(_button($lnk_AddMembers));
  	//	_click(_submit($submit_Save, _near(_button($btn_Close))));	
		_click(_button($submit_Save, _near(_button($btn_Cancel))));
        // Log out from app
        logOut();

}

/*
Function Name 		: verifyThatEmployeeORuserCreatedByOrgAdminIsvisibleToDomainAdmins
Author 	 	    		:  Anantha N
Created Date 	 	 :  01 June 2016
Description		   	   :  This method is used to Verify that Employee/user created by Organization admin  is  visible to domain admins
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatEmployeeORuserCreatedByOrgAdminIsvisibleToDomainAdmins($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,
$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
	      // Click on User Mgmt
	      _click(_link($lnk_d_UserManagement));
	
	      // Click on ALL
	      _click(_link($lnk_d_All, _near(_link($lnk_d_UserManagement))));
	
	      // Click on All User
	      _click(_link($lnk_AllUsers));
	
	      // Click on Search icon
	      _click(_italic($icon_Search));
	
	      // Enter the Email
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on Search Button
	      _click(_submit($submit_Search));
	
	      // Verifying the result is visible or not
	      _assertVisible(_div($sMember_Email));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that Employee/User  created by Organization admin  is not  visible  to other organization's admin
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  		
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Verifying the result is visible or not
	      _assertNotVisible(_div($sMember_Email));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that Employee/User created by Organization admin  is not visible other Organization member
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_Members));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatUserCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that user  created by Organization admin  is not  visible  to  other 'employee/user'
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatUserCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sEmployee_account1,$sEmployee_pwd1); 

		    _wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_Members));
	
	      // Log out from app
	        logOut();
}

 /*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a UserGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sGroups_UserGrpTitle));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other organization's  'Organization  admins
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

			// Log out from app
          		logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  
  		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
		// Verifying that User group is not present 
  		_assertNotVisible(_div($sGroups_UserGrpTitle));

		// Log out from app
          	logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other Organization member
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_UserGroups));
	
	      // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other 'employee/user
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present 
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();
  
  		//Call method to login to site with valid credentials
	       loginToSite($sURL,$sEmployee_account,$sEmployee_pwd1); 

		 _wait(5000);
			
		// Click on Contact groups
		    _click(_link($lnk_Groups));
			
		// Verifying the result is visible or not
  		  _assertNotVisible(_link($sGroups_UserGrpTitle));

	      // Log out from app
	        logOut();
}

/*
Function Name 		:  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other organization's  'Organization  admins' 
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
              // Print the message
         	_log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName3,$sDomainName2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  
  		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
       _click(_link($lnk_PolicyGroups));
  
		// Verifying that User group is not present 
  		_assertNotVisible(_div($sGroups_PolicyGrpTitle));

		// Log out from app
          	logOut();
}

/*
Function Name 		:  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other Organization member
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
            	  // Print the message
         		_log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);
		
		// Click on Contact groups
		    _click(_link($lnk_Groups));

		// Verifying the result is visible or not
	      _assertNotVisible(_div($sGroups_PolicyGrpTitle));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other 'employee/user'
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_PolicyGrpTitle, $sDescription)
{
		//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
                // Print the message
              _log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();		

			//Call method to login to site with valid credentials
	       loginToSite($sURL,$sEmployee_account,$sEmployee_pwd1); 

		 _wait(5000);
			
		// Click on Contact groups
		    _click(_link($lnk_Groups));
			
		// Verifying the result is visible or not
  		  _assertNotVisible(_link($sGroups_PolicyGrpTitle));

	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to Domain Admin
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_PolicyGrpTitle, $sDescription)
{
		//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
                // Print the message
              _log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();		

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sGroups_UserGrpTitle));
  
  		// Log out from app
          logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Contact groups created by Organization admin is not visible other domain admins
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
              // Click on User icon
              _click(_button($btn_Usericon));

              // Click on Domain Admin
              _click(_link($lnk_DomainAdmin));

            // Click on Groups
             _click(_link($lnk_Groups));

             // Click on Contact Groups
            _click(_link($lnk_ContactGroups));

            // Verifying that User group is not present 
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
              logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Contact groups created by  Organization admin is not  visible to other 'Organization  admins'
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

                //Call method to login to site with valid credentials
                loginToSite($sURL,$sDN2,$sDN2_Password); 

                _wait(5000);

              // Click on User icon
              _click(_button($btn_Usericon));

              // Click on Organization Admin
              _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

            // Click on Groups
             _click(_link($lnk_Groups));

            // Click on Contact Groups
            _click(_link($lnk_ContactGroups));

            // Verifying that User group is not present 
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
                logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 June 2016
Description		   	   :   This method is used to Verify that contact   groups created by  Organization admin is not  visible to other Organization member
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

             //Call method to login to site with valid credentials
              loginToSite($sURL,$sDN2,$sDN2_Password); 

              _wait(5000);

            // Click on User icon
            _click(_button($btn_Usericon));

            // Click on Organization Member
            _click(_link($lnk_OrgMember_OrgBanIND));

          _wait(5000);

          // Click on Contact groups
              _click(_link($lnk_Groups));

          // Verifying the result is visible or not
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
              logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 June 2016
Description		   	   :   This method is used to Verify that contact  groups created by  Organization admin is not  visible to other 'employee/user'
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();
		
                //Call method to login to site with valid credentials
               loginToSite($sURL,$sEmployee_account,$sEmployee_pwd1); 

             _wait(5000);

            // Click on Contact groups
                _click(_link($lnk_Groups));

            // Verifying the result is visible or not
              _assertNotVisible(_link($sGroups_UserGrpTitle));

              // Log out from app
                logOut();
            
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other domain admins
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
             // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		 // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	    // Click on ALL MBNs
		_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrgAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Org admins
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function   verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
              // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

		 // Click on MBN Mgmt
	       _click(_link($lnk_MBNmgmt));
	
	    // Click on ALL MBNs
		_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  06 June 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Organization member
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrganizationMember($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
                // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDN2,$sDN2_Password); 
		
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
  
  		// Click on Organization Member
	      _click(_link($lnk_OrgMember_OrgBanIND));
	      
		 // Click on MBN Mgmt
	      _click(_link($lnk_OM_MBNs));
	
	    // Click on ALL MBNs
  		_click(_link($lnk_AllMBNs));
			
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Employee Or User
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOtherEmployeeOrUser($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sEmployee_account1,$sEmployee_pwd1);
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	     // _click(_link($lnk_DomainAdmin));

		 // Click on MBN Mgmt
	      _click(_link($lnk_OM_MBNs));
	
	    // Click on ALL MBNs
  		_click(_link($lnk_AllMBNs));
			
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

//****************************June 07 2016****************************

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other domain admins
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
  {
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

        _wait(5000);

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // Verifying that User group is not present 
            _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
  }

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other Organization admins
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgAdmins($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
     //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	    _wait(5000);
  
	    // Click on User icon
	     _click(_button($btn_Usericon));
	
	   // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // Verifying that User group is not present 
            _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
}

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgmember
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other Organization member
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgmember($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDN2,$sDN2_Password); 
	
	    _wait(5000);
  
	    // Click on User icon
	     _click(_button($btn_Usericon));
	
	   // Click on Organization Member
	      _click(_link($lnk_OrgMember_OrgBanIND));

        // click on Policies
        _click(_link($lnk_Policies));

       // Verifying that User group is not present 
         // _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));
		_assertNotVisible(_link($sPolicyName_OrgAdmin));
        // Logout from the application
            logOut();
}

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other employee/user
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sEmployee_account1,$sEmployee_pwd1);
	
	    _wait(5000);
  
	    // click on Policies
        _click(_link($lnk_Policies));

       // Verifying that User group is not present 
         _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other domain admins
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sCustomReport_Title1, $sCustomReport_Description)
{
     //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

      _wait(5000);
  
       // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      // Verifying that Custom Report is not present 
         _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other Organization admin
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

      _wait(5000);
  
      // Click on User icon
        _click(_button($btn_Usericon));

     // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      // Verifying that Custom Report is not present 
         _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other Organization Member
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

      _wait(5000);
  
      // Click on User icon
        _click(_button($btn_Usericon));

     // Click on Organization Member
	   _click(_link($lnk_OrgMember_OrgBanIND));

      // Click 'Reports'
      _click(_link($lnk_Reports));

     // Verifying that Custom Report is not present 
       _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other 'employee/user'
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sEmployee_account,$sDomainName2_Password);  

      _wait(5000);
  
      // Click 'Reports'
  	    _click(_link($lnk_Reports));

     // Verifying that Custom Report is not present 
       _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

//****************************June 08 2016****************************

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other domain admins
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sGroups_ContactGrpTitle, $sDescription )
{//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Checking for the Group name in the list 
        if(_isVisible(_link($sGroups_ContactGrpTitle)))
        {
              // Print the message
              _log($msg_RecordAllreadyCreated);
        }
        else
          {
                // Click on '+' icon
                _click(_link($plusicon_Groups));

                // Enter the Tilte
                _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

                // Enter the Description
                _setValue(_textarea($txtarea_Description), $sDescription);

                // Click on Next
                _click(_submit($submit_Next));

                // Click on Add Group
                _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

        _wait(5000);

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other Organization admin
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sGroups_ContactGrpTitle, $sDescription )
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

          // Checking for the Group name in the list 
          if(_isVisible(_link($sGroups_ContactGrpTitle)))
          	{
                // Print the message
                _log($msg_RecordAllreadyCreated);
          	}
          else
          {
                // Click on '+' icon
                _click(_link($plusicon_Groups));

                // Enter the Tilte
                _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

                // Enter the Description
                _setValue(_textarea($txtarea_Description), $sDescription);

                // Click on Next
                _click(_submit($submit_Next));

                // Click on Add Group
                _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

        _wait(5000);

        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
        _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other Organization member
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_ContactGrpTitle, $sDescription )
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

          // Checking for the Group name in the list 
          if(_isVisible(_link($sGroups_ContactGrpTitle)))
            {
                // Print the message
                _log($msg_RecordAllreadyCreated);
            }
        else
          {
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sDescription);

              // Click on Next
              _click(_submit($submit_Next));

              // Click on Add Group
              _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDN2,$sDN2_Password); 

        _wait(5000);

        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Member
        _click(_link($lnk_OrgMember_OrgBanIND));


        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other 'employee/user'
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_ContactGrpTitle, $sDescription )
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

        // Checking for the Group name in the list 
        if(_isVisible(_link($sGroups_ContactGrpTitle)))
       	 {
        	  // Print the message
          	_log($msg_RecordAllreadyCreated);
        }
           else
        	{
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sDescription);

              // Click on Next
              _click(_submit($submit_Next));

              // Click on Add Group
              _click(_submit($submit_AddGroup));
           }
      
  	  // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_ContactGrpTitle));

      _wait(3000);

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
     loginToSite($sURL,$sEmployee_account1,$sEmployee_pwd1); 

      _wait(5000);

       // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

      // Verifying that Contact group is not present 
      _assertNotVisible(_link($sGroups_ContactGrpTitle));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgaAdminCanChangeOwnerOfTheMemberWhoHasAssociatedWithMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  08 June 2016
Description		        :  This method is used to Verify that Organization admin can change owner of the member who has associated with MBN
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgaAdminCanChangeOwnerOfTheMemberWhoHasAssociatedWithMBN($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on MBN Mgmt
      _click(_link($lnk_MBNmgmt));

      // Click on ALL MBNs
       _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));

      //** Searching for the MBN Number **//
      // Click on Search Icon
      _click(_italic($icon_Search));

      // Enter the MBN number
      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);

      // Click on Search 
      _click(_submit($submit_Search));

      // Check for MBN number present in the list
      if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
      	{
        	// click on Delete icon
        		_click(_link($lnk_DeleteMBN));

          // click on Yes button
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
      }

      // Click on Add icon 
      _click(_link($splusicon_MBN_OrgAdmin));

      // Select the country
      _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);

      // Enter the MBN Number
      _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);

      // Select the MBN Type
      _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);

      // Select MBN provider
      _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);

      // Enter the MBN notes
      _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);

      // Click on Next
      _click(_submit($submit_Next));

     // Click on Create
      _click(_submit($submit_Create));

      // Click on created MBN
      _click(_div($sMBNnumber_VO_OrgAdmin));

      // Click on AssignTo
      _click(_link($lnk_assignTO));

      // Click on Change Owner
      _click(_link($link_ChangeOwner, _near(_heading2($heading_MBNOwner))));

      // Selecting a Assign and Storing the Assign name
      _click(_radio($radiobtn_SelectMembr_V));

      var $assignMBN_name = _getText(_div($sAssignName_MBN));
      // Print the Assign Name	
     _log($assignMBN_name);

      // Click on Create
      _click(_button($btn_Change));

      if(_isVisible(_div($msg_MBN_successOwner)))
      	{
      		// Click on created MBN
      		_click(_div($sMBNnumber_VO_OrgAdmin));

          // Click on AssignTo
          _click(_link($lnk_assignTO));
      }

      // Verify the Assign Name
      _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));

      // Log out from app
      logOut();
}

/*
Function Name 		:  verifyThatOrgaAdminCanIncludePolicyMembersBySelectingMembersIndividuallyFromTheMemberListWhileCreatingAPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting members individually from the member list while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

  function verifyThatOrgaAdminCanIncludePolicyMembersBySelectingMembersIndividuallyFromTheMemberListWhileCreatingAPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
            _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1 - Details
      _click(_submit($lnk_Next));

      // Click on next button for 2 - Cofiguration
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3 - Security setting
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4 - Application setting
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 5 - Assign Groups
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
      // Select the member - Assign Members
  		
  
    //  _click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
  		
	   _setValue(_textbox($txtbox_Policy_AssignMemebers), $strng_Name);
  
  	   // CLick Apply
  		_click(_button($btn_Apply_AssignMembers, _near(_heading4($heading_AssignMembers_Policy))));

  	  _click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
  
     // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Logout from the application
      logOut();
}

/*
Function Name 		: verifyThatOrgaAdminCanIncludePolicyMembersBySelectingAPolicyGroupsWhileCreatingAPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting a Policy Groups while creating a policy
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

  function verifyThatOrgaAdminCanIncludePolicyMembersBySelectingAPolicyGroupsWhileCreatingAPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

  //***** Adding Policy Groups *****//
      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Policy Groups
      _click(_link($lnk_PolicyGroups));

      // Click on '+' icon
      _click(_link($plusicon_Groups));		

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $nw_policy);

      // Click on Next
      _click(_submit($submit_Next));

      // Click on Add Group
      _click(_submit($submit_AddGroup));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
            	_click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon))));
           
          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1 - Details
      _click(_submit($lnk_Next));

      // Click on next button for 2 - Configuration
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3 - Configuration2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4 - Configuration3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	  // Select the Group	
  //    _click(_checkbox($chkbox_ON, _near(_strong($s_grp_Policy))));
		_click(_checkbox("on", _near(_strong($nw_policy))));	
  
      // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Logout from the application
      logOut();
}

//************************* June 09 2016 *********************************

/*
Function Name 		: verifyThatOrgAdminCanEditPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   09 June 2016
Description		   	   :   This method is used to Verify that Organization admin can edit  'Policy'
Input					 :    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin
*/

function verifyThatOrgAdminCanEditPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

	// Checking for the Policy name in the list 	
  	  if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
          _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1
      _click(_submit($lnk_Next));

      // Click on next button for 2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	 // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Click on Policy
        _click(_link($sPolicyName_OrgAdmin));   

    // Click Edit
     _click(_italic($btn_pencil_EditIcon, _near(_italic($btn_icon_Trash))));

      // Enter the description
          _setValue(_textarea($txtarea_Description), $sPolicyDescription_edit_OrgAdmin);

      // Click on next button for 1 Edit policy
          _click(_submit($lnk_Next));

      // Click on next button for 2 Edit policy
        _click(_button($btn_Nxt, _near(_button($btn_Back))));

      // Click on next button for 3 Edit policy
        _click(_button($btn_Nxt, _near(_button($btn_Back))));

      // Click on Save Changes
      _click(_button($btn_SaveChanges));

      // Verifying the Description
	  _assertEqual($sPolicyDescription_edit_OrgAdmin, _getText(_div($sPolicyDescription_edit_OrgAdmin, _near(_label($lbl_Description)))));

      // Logout from the application
          logOut();
}

/*
Function Name 		: verifyThatOrgAdminCanDeletePolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   09 June 2016
Description		   	   :   This method is used to Verify that Organization admin can edit  'Policy'
Input					 :    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifyThatOrgAdminCanDeletePolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

	// Checking for the Policy name in the list 	
  	  if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
             // Print the message
          	_log($msg_RecordAllreadyCreated);     
        }
  else{
  			// click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1
      _click(_submit($lnk_Next));

      // Click on next button for 2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	 // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));
  }
      // Click on Policy
      _click(_link($sPolicyName_OrgAdmin));

      // Click on Delete
      _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

      // Click on Yes to delete the policy
      _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));

      _wait(5000);

  	// Verify the Appropriate message is displayed
      _assertVisible(_div($msg_PolicyRemoved));

      // Logout from the application
      logOut();
}

/*
Function Name 		:   VerifyOrganizationAdminCanAddContacts
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add Contacts
Input					:    
*/

function VerifyOrganizationAdminCanAddContacts()
{

  			//Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
  
  			// Click on My Profile
			_click(_link($lnk_MyProfile));
	
			// Click on 'Contacts'
			 _click(_link($lnk_Contacts, _near(_link($lnk_MyProfile))));
	
			// Click on + icon
			_click(_link($plusIcon_Contacts));
	
			// Select the contact
			_click(_checkbox($chkbox_SelectedUser, _near(_strong($strng_ContactName_OA))));
			
  			// Click on Save
			_click(_button($submit_Save));			
  
  			// Verifying the Added contact 
			_assertVisible(_strong($strng_ContactName_OA));

			// Click on Contact name
			_click(_link($strng_ContactName_OA));

			// Click on Delete Icon
			_click(_link($icon_Profile_DeleteIcon));

			// Click Yes
			_click(_button($btn_Yes, _near(_heading4($heading_ConfirmRemove))));
		
  			// Logout from the application
			logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotPromoteSameOrganizationsMemberAsAnOrgAdminForTheSameOrganization
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that one Organization admin cannot promote same organization's  member as an org admin for the same organization
Input			          :  
*/

function  verifyThatOrgAdminCannotPromoteSameOrganizationsMemberAsAnOrgAdminForTheSameOrganization()
{
  //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

  // Click on Members	
  _click(_link($lnk_Members));

  // Click on Active
  _click(_link($lnk_Active));

  // Click on Organization Admin
  _click(_link($lnk_MOrganizationAdmin));

  _wait(4000);

  // Verifying Update Members link not visible
	_assertNotVisible(_link($lnk_UpdateMembers));
  
  // Log out from app
  logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCannotHideOtherOrganizationAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that Organization admin cannot hide other  organization admin
Input			          :  
*/

function  verifyThatOrgAdminCannotHideOtherOrganizationAdmin()
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on Members	
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Organization Admin
      _click(_link($lnk_MOrganizationAdmin));

      _wait(4000);

      // Verifying Update Members link not visible
      _assertNotVisible(_link($lnk_HideUser, _near(_tableHeader($Tableheading_Action))));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCanBlockHimself
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that organization admin can block himself
Input			          :  
*/

function  verifyThatOrgAdminCanBlockHimself()
{
     //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click on Members	
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Organization Admin
      _click(_link($lnk_MOrganizationAdmin));

      _wait(4000);

      // Verifying Update Members link not visible
      _assertVisible(_link($lnk_BlockMember, _near(_tableHeader($Tableheading_Action))));

      // Log out from app
      logOut();

}

/*
Function Name 		: verifyThatOrgAdminCanAddANewOrgMemberWithinTheSameOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  01 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add a new organization member within the same organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOrgAdminCanAddANewOrgMemberWithinTheSameOrganization($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on Pending
	      _click(_link($lnk_Pending));
    
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	
  			
	        // Enter EmailID
	     _setValue(_textbox($txtbox_s_Email), $email_qa_);

	       // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      //_assertVisible(_heading3($heading_MemberCreated));
			
		_wait(5000);
		var	$newMemeber	 = _getText(_div($s_EmailNewMember));
	    
		// Click on Close  
	      _click(_button($btn_Close));
	       
		// Verifying the new member is displayed in the list
		_assertVisible(_div($newMemeber));
	      	
			// Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatOrgAdminCanDeleteCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that Organization admin can delete  'Custom Reports'
Input			          :  
*/

function verifyThatOrgAdminCanDeleteCustomReports()
{
         //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		// Checking for 
  		if(_isVisible(_link($lnk_Delete )))
        {
          // Click on Delete icon
          	_click(_italic($btn_icon_Trash));
          
          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            
        }
		else
        {
          	_log($msg_report_RecordNotPresent);
        }
           // Log out from app
               logOut();
}

//********************************* June 10 2016  *********************

/*
Function Name 		: verifyThatOrgAdminCanEditCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  10 June 2016
Description		        :  This method is used to Verify that Organization admin can edit  'Custom Reports'
Input			          :   $sCustomReport_edit_Title
*/

function verifyThatOrgAdminCanEditCustomReports($sCustomReport_edit_Title)
{
          //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		// Checking for Edit link
  		if(_isVisible(_link($lnk_Edit)))
        {
          // Click on edit icon
          	_click(_link($lnk_Edit));
          
           // Enter the Title of Custom report
          _setValue(_textbox($txtbox_Title), $sCustomReport_edit_Title);
          
          // Click Next
          _click(_submit($submit_Next));
          
          // Click Next
          _click(_button($btn_Nxt, _near(_button($btn_Back))));
          
          // Click on Edit report
          _click(_submit($submit_EditReport));
          
          // verifying the report edited or not
          _assertVisible(_link($sCustomReport_edit_Title))
            
        }
		else
        {
          	_log($msg_report_RecordNotPresent);
        }
           // Log out from app
               logOut();
}

/*
Function Name 		:  verifyThatOneOrgAdminCannotDepromoteAnotherOrgAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   10 June 2016
Description		   	   :   This method is used to Verify that Organization admin can  not assign an organization member as a admin of the respective organization
Input					:    
*/

function verifyThatOneOrgAdminCannotDepromoteAnotherOrgAdmin()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Click on Organization Admin
		_click(_link($lnk_OrganizationAdmin));
		
  		// Click on Admins
  		_click(_link($lnk_Admins));
		
  		_assertNotVisible(_link($lnk_Unassign));

        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOneOrgAdminCannotIncludeAEmployeeOrUserAddedByDomainAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   10 June 2016
Description		   	   :   This method is used to Verify that Organization admin cannot include a employee/user added by domain admin
Input					:    
*/

function verifyThatOneOrgAdminCannotIncludeAEmployeeOrUserAddedByDomainAdmin()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Verifying Domain	link is not present
  		_assertNotVisible(_link($lnk_DomainAdmin));

        // Log out from app
        logOut();
}
//***************************************** 13 June 2016 *******************

/*
Function Name 		: verifyThatOneOrgAdminCanAddAnUserIntoTheRespectiveOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add an 'User ' into the respective organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOneOrgAdminCanAddAnUserIntoTheRespectiveOrganization($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
        // Click Members
        _click(_link($lnk_Members));

        // Click ADD
        _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));

        // Click on Member
        _click(_link($lnk_Add_Member));

        // Enter First name
        _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);

        // Enter Last Name
        _setValue(_textbox($txtbox_LastName), $sMember_LastName);

        // Enter Title
        _setValue(_textbox($txtbox_Title), $sMember_Title);

        // Select Location
        _setSelected(_select($drpdown_Location), $sMember_Location);

        // Enter ZipCode
        _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	

        // Enter EmailID
        _setValue(_textbox($txtbox_s_Email), $email_qa_);

        // Click Create
        _click(_submit($submit_Create));

        _wait(5000);
        var	$newMemeber	 = _getText(_div($s_EmailNewMember));

        // Click on Close  
        _click(_button($btn_Close));

      // Click on Pending
         _click(_link($lnk_Pending));

      // Click on Search button
        _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
        _setValue(_textbox($txtbox_Email), $newMemeber);

      // Click on Search
        _click(_submit($submit_Search));

        // Verifying the new member is displayed in the list
        _assertVisible(_div($newMemeber));

        // Log out from app
        logOut();
}

/*
Function Name 		: verifyThatOrgAdminCandeleteAnUserIntoTheDomain
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add an 'User ' into the respective organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOrgAdminCandeleteAnUserIntoTheDomain($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
       //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));
        // Click Members
        _click(_link($lnk_Members));

        // Click on ALL
          _click(_link($lnk_ALL, _near(_link($lnk_Members))));

        // Click ADD
        _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));

        // Click on Member
        _click(_link($lnk_Add_Member));

        // Enter First name
        _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);

        // Enter Last Name
        _setValue(_textbox($txtbox_LastName), $sMember_LastName);

        // Enter Title
        _setValue(_textbox($txtbox_Title), $sMember_Title);

        // Select Location
        _setSelected(_select($drpdown_Location), $sMember_Location);

        // Enter ZipCode
        _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	

        // Enter EmailID
        _setValue(_textbox($txtbox_s_Email), $email_qa_);

        // Click Create
        _click(_submit($submit_Create));

        _wait(5000);
        var	$newMemeber	 = _getText(_div($s_EmailNewMember));

        // Click on Close  
        _click(_button($btn_Close));

      // Click on Search button
        _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
        _setValue(_textbox($txtbox_Email), $newMemeber);

      // Click on Search
        _click(_submit($submit_Search));

        // Click Delete icon
        _click(_link($lnk_deleteUser));

        // Click Yes button
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

        // Verifying Member deleted message is displayed
        _assertVisible(_div($msg_MemberDeleted));

        // Log out from app
        logOut();
}

/*
Function Name 		: verifyThatOneOrgAdminCanUnblockOrgMemberWhoIsAssociatedToTheRespectiveOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that organization admin can unblock  organization member who is associated to the respective organization
Input					  :  $sDomainName5
*/

function verifyThatOneOrgAdminCanUnblockOrgMemberWhoIsAssociatedToTheRespectiveOrganization($sDomainName5)
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($sOrgAdminNameToselect, _near(_span($s_ADMIN))));

      // Click Members
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Search button
      _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
      _setValue(_textbox($txtbox_Email), $sDomainName5);

      // Click on Search
      _click(_submit($submit_Search));
      _wait(6000);
      var $status;

      // Checking for the Unblock icon for the record
      if(_isVisible(_link($lnk_UnblockMember, _near(_div($sDomainName5)))))
        {
            // Click Unblock Member
            _click(_link($lnk_UnblockMember));

            // Click on UnBlock Member
            _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));

        }
        else
        {
            // Click on Block Member
            _click(_link($lnk_BlockMember));

            // Click on 'Yes' button
            _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));

            // Click on Unblock Member
            _click(_link($lnk_UnblockMember));

            // Click On Yes button
            _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));
        }

      // Verifying the Unblocked Msg
      _assertVisible(_div($msg_MemberUnBlocked));

      // Log out from app
      logOut();
}
//****************************  28 June 2016  **************************

/*
Function Name 		: verifyTheFunctionalityOfRequestIconUnderTopNotificationBar
Author 	 	    		:  Anantha N
Created Date 	 	 :  28 June 2016
Description		   	   :  This method is used to Verify the functionality of 'Request' icon under Top Notification Bar.
Input					  :  
*/

function verifyTheFunctionalityOfRequestIconUnderTopNotificationBar()
{
      //Call method to login to site with valid credentials
        loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

  		
      _wait(10000);

      // Click on Request icon
       _click(_button(3));  // btn 3 request icon

      // Request popup
       _assertVisible(_heading2($heading_Requests));
  
  	// Log out from app
        logOut();
}

/*
Function Name 		: verifyTheFunctionalityOfNotificationIconUnderTopNotificationBar
Author 	 	    		:  Anantha N
Created Date 	 	 :  28 June 2016
Description		   	   :  This method is used to Verify the functionality of 'Notification' icon under Top Notification Bar.
Input					  :  
*/

function verifyTheFunctionalityOfNotificationIconUnderTopNotificationBar()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

      _wait(10000);

      // Click on Notification icon
       _click(_button($btn_Notification ));
  
      // Notifications popup
      _assertVisible(_heading2($heading_Notification));
  
  	// Log out from app
        logOut();
}

/*
Function Name 		: verifyTheFunctionalityOfChatIconUnderTopNotificationBar
Author 	 	    		:  Anantha N
Created Date 	 	 :  28 June 2016
Description		   	   :  This method is used to Verify the functionality of 'Chat' icon under Top Notification Bar.
Input					  :  
*/

function verifyTheFunctionalityOfChatIconUnderTopNotificationBar()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

        _wait(10000);

        // Click on Close icon
        _click(_link($lnk_CloseConversation));

        // Click on conversation icon
        _click(_button($btn_Conversation));

        // verify the conversation window 
        _assertVisible(_div($heading_Communication));

        // Log out from app
        logOut();
}

/*
Function Name 		: verifyTheUserIsAbleToSavePolicyAsADraft
Author 	 	    		:  Anantha N
Created Date 	 	 :  28 June 2016
Description		   	   :  This method is used to Verify the user is able to save policy as a draft
Input					  :  $sPolicyDescription_OrgAdmin
*/

function verifyTheUserIsAbleToSavePolicyAsADraft($sPolicyDescription_OrgAdmin)
{
          //Call method to login to site with valid credentials
          loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

          _wait(10000);

          // Click on Close icon
          _click(_link($lnk_CloseConversation));

          // click on Policies
          _click(_link($lnk_Policies));

          // click on Policy Sets
          _click(_link($lnk_PolicySets));

          // click on Pluse icon
          _click(_link($plusIcon_Policies));

          // Enter Policy name
          _setValue(_textbox($txt_Name), $nw_policy);

          // Enter the description
          _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

          // Click on next button for 1
          _click(_submit($lnk_Next));

          // Click on save as Draft
          _click(_submit($btn_SaveasDraft, _near(_button($btn_Nxt))));

          // Click on Draft 
          _click(_link($lnk_Drafts));

          // Verify the Policy 
          _assertVisible(_link($nw_policy));

          // Logout from the application
          logOut();
}

/*
Function Name 		: verifyTheLoginFunctionalityWithInvalidUserNameAndInvalidPassword
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to Verify the login functionality with invalid user name and invalid password
Input					  : 
*/

function verifyTheLoginFunctionalityWithInvalidUserNameAndInvalidPassword()
{
        // Loing to application
        loginToSite($sURL,$sInvalid_DomainName4, $sInvalid_DomainName4_Password);

  		 _windowAction($sWinSiz);
  	
        // Verifying the message displayed
        _assertVisible(_span($msg_UsrAccountNtFnd));
}

/*
Function Name 		:verifyTheNavigationOfForgotPasswordLink
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to Verify the navigation of 'Forgot Password?' link.
Input					  : 
*/

function verifyTheNavigationOfForgotPasswordLink()
{
      // Loing to application
      _navigateTo($sURL);

  		 _windowAction($sWinSiz);
  
      // Click on Forgot password
      _click(_link($lnk_Forgot_Pwd));

      // Verify Heading
      _assertVisible(_heading4($heading_Forgot_Pwd));
  
      // Verify Email btn
      _assertVisible(_textbox($txtbox_Admin_Email));
  
      // Verify Cancel btn
      _assertVisible(_button($btn_Cancel));
  
      // Verify Send btn
      _assertVisible(_submit($submit_Send));
        
}

/*
Function Name 	   : verifyTheNavigationOfSecurityAndPrivacyLink
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to Verify the navigation of 'Security & Privacy' link.
Input					  : 
*/

function verifyTheNavigationOfSecurityAndPrivacyLink()
{
      // Loing to application
      _navigateTo($sURL);

  	 _windowAction($sWinSiz);
  
      // Click on Security & Privacy
      _click(_link($link_securityAndPrivacy));

  	// Verify the Heading
    _assertVisible(_heading1($heading_PrivacyPolicy));
        
}

/*
Function Name 		: verifyTheNavigationOfForgotPasswordLink
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to Enter registered email in 'Forgot Password' page, tap on 'Cancel' and verify.
Input					  : 
*/

function enterRegisteredEmailInForgotPasswordPageTapOnCancelAndVerify($sDomainName4_OA)
{
      // Loing to application
      _navigateTo($sURL);

  		 _windowAction($sWinSiz);
  
      // Click on Forgot password
      _click(_link($lnk_Forgot_Pwd));

  	// Enter the Email
      _setValue(_textbox($txtbox_Admin_Email), $sDomainName4_OA);
  
      // Verify Cancel btn
     _click(_button($btn_Cancel));
  
      // Verify Send btn
     _assertVisible(_submit($btn_SignIn));
        
}

/*
Function Name 		: verifyThatUserIsAbleToAddNewMBN
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to Verify that  user is able to add new MBN
Input					  : $sMBNnumber_VO_DomainAdmin, $sMBNCountry_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatUserIsAbleToAddNewMBN($sMBNnumber_VO_DomainAdmin, $sMBNCountry_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
  //Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  	 _windowAction($sWinSiz);
  
  _wait(10000);

  // Click on MBN Mgmt
  _click(_link($lnk_MBNmgmt));

  // Click on ALL MBNs
  _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));

  //** Searching for the MBN Number **//
  // Click on Search Icon
  _click(_italic($icon_Search));

  // Enter the MBN number
  _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_DomainAdmin);

  // Click on Search 
  _click(_submit($submit_Search));

  // Check for MBN number with Voice
  if(_isVisible(_div($sMBNnumber_VO_DomainAdmin)))
  {
    // click on Delete icon
    _click(_link($lnk_DeleteMBN));

    // click on Yes button
    _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
  }

  // Click on Add icon 
  _click(_link($splusicon_MBN_OrgAdmin));

  // Select the country
  _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);

  // Enter the MBN Number
  _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_DomainAdmin);

  // Select the MBN Type
  _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);

  // Select MBN provider
  _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
 
  // Enter the MBN notes
  _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);

  // Click on Next
  _click(_submit($submit_Next));

  // Click on Create
  _click(_submit($submit_Create));

  // Click on Search Icon
  _click(_italic($icon_Search));

  // Enter the MBN number
  _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_DomainAdmin);

  // Click on Search 
  _click(_submit($submit_Search));

  _assertVisible(_div($sMBNnumber_VO_DomainAdmin));

  // Log out from app
  logOut();

}

/*
Function Name 		: verifyThatUserCanAddAPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  29 June 2016
Description		   	   :  This method is used to verify That User Can Add A Policy
Input					  : $sPolicyDescription_OrgAdmin
*/


function verifyThatUserCanAddAPolicy($sPolicyDescription_OrgAdmin)
{
        // Call method to login to site with valid credentials
         loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
  
  		_wait(10000);

       // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $nw_policy);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  	    // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
       
  		// Click on add policy
        _click(_button($btn_AddPolicy));
        
  		// Verify added policy should be displayed in the mid frame
        _assertEqual($nw_policy, _getText(_link($nw_policy)));
  		      
  		// Logout from the application
          logOut();
}

/*
Function Name 		: verifyThePolicyDetailsMenuFunctionality
Author 	 	    		:  Anantha N
Created Date 	 	 :  30 June 2016
Description		   	   :  This method is used to Verify the 'Policy Details' menu functionality
Input					  : 
*/

function verifyThePolicyDetailsMenuFunctionality()
{
  // Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  _wait(10000);

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));

  var $policyName_Exp;
  var $policyName_Act;
  var $result;
  
  if(_isVisible(_link($lnk_PolicyName)))
  {
    // get the Policy name and store
      $policyName_Exp = _getText(_link($lnk_PolicyName));
     
      // click on Polici name
      _click(_link($lnk_PolicyName));

     // get the Policy name and store	
      $policyName_Act = _getText(_div($lnk_details_PolicyName))

     $result = _areEqual($policyName_Exp, $policyName_Act)

    _log($result);
  }

  // Logout from the application
  logOut();
}

/*
Function Name 		: verifyTheFilterByNameSearchFilterFunctionalityUnderAddAPolicyPopup
Author 	 	    		:  Anantha N
Created Date 	 	 :  28 June 2016
Description		   	   :  This method is used to Verify the 'Filter by name ' search filter functionality under 'Add a Policy' pop up
Input					  :  $sPolicyDescription_OrgAdmin
*/

function verifyTheFilterByNameSearchFilterFunctionalityUnderAddAPolicyPopup($sPolicyDescription_OrgAdmin)
{
  //Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  _wait(10000);

  // Click on Close icon
  _click(_link($lnk_CloseConversation));

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));

  // click on Pluse icon
  _click(_link($plusIcon_Policies));

  // Enter Policy name
  _setValue(_textbox($txt_Name), $nw_policy);

  // Enter the description
  _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

  // Click on next button for 1 - Details
  _click(_submit($lnk_Next));

  // Click on next button for 2 - Cofiguration
  _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  // Click on next button for 3 - Security setting
  _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  // Click on next button for 4 - Application setting
  _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  // Click on next button for 5 - Assign Groups
  _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));-

  //  _click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
  //_setValue(_textbox($txtbox_Policy_AssignMemebers), $strng_Name);
	_setValue(_textbox($txtbox_Name1), $policy_Member_Name);
    // CLick Apply
  //_click(_button($btn_Apply_AssignMembers, _near(_heading4($heading_AssignMembers_Policy))));
  
 // _assertVisible(_strong($strng_Name));
  _assertVisible(_strong($policy_Member_Name));
  _click(_button($btn_Close, _near(_heading4($heading_AssignMembers_Policy))));

  // Logout from the application
  logOut();
}

/*
Function Name 		: verifyTheFunctionalityOfPolicyMembersInThePolicyDetailsTab
Author 	 	    		:  Anantha N
Created Date 	 	 :  30 June 2016
Description		   	   :  This method is used to Verify the 'Policy Details' menu functionality
Input					  : 
*/

function verifyTheFunctionalityOfPolicyMembersInThePolicyDetailsTab()
{
  // Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  _wait(10000);

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));
	var $membersDetails ;
        
  if(_isVisible(_bold($policyMembersAssigned, _near(_link($lnk_PolicyName1)))))
  {
        //_click(_bold("pull-right ng-binding"));
        _click(_bold($policyMembersAssigned, _near(_link($lnk_PolicyName1))));

        // Click on Member Number
        _click(_link($policy_MemberCount, _near(_label($lbl_PolicyMembers))));

        // Store the Assigned Member details
        $membersDetails = _getText(_table($policyMembers_Table));

        // Print the detials
        _log($membersDetails);
  }
  
  // Logout from the application
  logOut();
}

/*
Function Name 		:verifyThatUserIsAbleToUpdateThePoliciesnInfo
Author 	 	    		:  Anantha N
Created Date 	 	 :  30 June 2016
Description		   	   :  This method is used to Verify that user is been able to update the policies info
Input					  : 
*/

function verifyThatUserIsAbleToUpdateThePoliciesnInfo($sPolicyDescription_edit_OrgAdmin)
{
  // Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  _wait(10000);

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));
	
        
  if(_isVisible(_link($lnk_Edit, _near(_italic($btn_icon_Trash)))))
  {
      // Click on Edit Button
      _click(_link($lnk_Edit, _near(_italic($btn_icon_Trash))));

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_edit_OrgAdmin);
     
      // Click Next btn
      _click(_submit($lnk_Next));
     
      // Click Next btn
      _click(_submit($lnk_Next));
      
      // Click Next btn
      _click(_submit($lnk_Next));
     
      // Click Save btn
      _click(_button($btn_SaveChanges));
    
    // Verify the 
      _assertEqual($sPolicyDescription_edit_OrgAdmin, _getText(_div($sPolicyDescription_edit_OrgAdmin)));    
  }
  else
  {
    _log($msg_report_RecordNotPresent);
  }
  
  // Logout from the application
  logOut();
}

/*
Function Name 		: verifyTheDeleteButtonFunctionalityUnderPolicies
Author 	 	    		:  Anantha N
Created Date 	 	 :  30 June 2016
Description		   	   :  This method is used to Verify that user is been able to update the policies info
Input					  : 
*/

function verifyTheDeleteButtonFunctionalityUnderPolicies()
{
  // Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  _wait(10000);

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));
	
   var $policyName;     
  if(_isVisible(_link($lnk_Delete, _near(_italic($btn_pencil_EditIcon)))))
  {
    // Policy Name
    $policyName = _getText(_div($name_profile_Name, _near(_link($link_TogglePanel))))
    _log($policyName);
      
    // Click on Delete Button
      _click(_link($lnk_Delete, _near(_italic($btn_pencil_EditIcon))));

    // Click Yes  
    _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
     
  }
  else
  {
    _log($msg_report_RecordNotPresent);
  }
  
  // Verifying the Deleted Policy name is nor displayed
  _assertNotVisible(_link($policyName));
  
  // Logout from the application
  logOut();
}

/*
Function Name 		: verifyTheCreatedAndModifiedUnderAddPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  04 July 2016
Description		   	   :  This method is used to Verify the 'Created and  Modified' under 'Add policy '
Input					  : $sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin
*/


function verifyTheCreatedAndModifiedUnderAddPolicy($sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin)
{
  
      // Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
  
     // Window maxmize
  	   _windowAction($sWinSiz);

      _wait(10000);

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));
    
      // click on Pluse icon-
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $nw_policy);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1
      _click(_submit($lnk_Next));

      // Click on next button for 2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($nw_policy, _getText(_link($nw_policy)));

      // Click on Created new Policy
      _click(_link($nw_policy));

      // Click on Edit Button
      _click(_link($lnk_Edit, _near(_italic($btn_icon_Trash))));

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_edit_OrgAdmin);

      // Click Next btn
      _click(_submit($lnk_Next));

      // Click Next btn
      _click(_submit($lnk_Next));

      // Click Next btn
      _click(_submit($lnk_Next));

      // Click Save btn
      _click(_button($btn_SaveChanges));

      // Verify the 
      _assertEqual($sPolicyDescription_edit_OrgAdmin, _getText(_div($sPolicyDescription_edit_OrgAdmin)));  

      // Logout from the application
      logOut();
}


/*
Function Name 		: verifyTheCreatedAndModifiedUnderAddPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  04 July 2016
Description		   	   :  This method is used to Add a member to a particular policy and verify that new member had been added to policy
Input					  : $sPolicyDescription_OrgAdmin
*/


function AddAMemberToAParticularPolicyAndVerifyThatNewMemberHadBeenAddedToPolicy($sPolicyDescription_OrgAdmin)
{

        // Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

        // Window maxmize
        _windowAction($sWinSiz);

        _wait(10000);

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon-
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $nw_policy);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_submit($submit_SaveDraft1))));

        // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));

        // Select the Memeber	
        _click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));

        var $memberName = _getText(_link($selected_ContactedName));

        // Click on add policy
        _click(_button($btn_AddPolicy));

        // Verify added policy should be displayed in the mid frame
        _assertEqual($nw_policy, _getText(_link($nw_policy)));

        // Click on Created new Policy
        _click(_link($nw_policy));

        // Click on policy Memebers
        _click(_link($link_PolicyMembers));

        // Verify the Selected Memeber
        _assertEqual($memberName, _getText(_span($memberName)));

        // Click on delete icon
        _click(_link($lnk_Delete, _near(_italic($btn_icon_Trash))));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

        // Logout from the application
        logOut();
}

/*
Function Name 		: removeMemberFromPolicyAndVerifyThatMemberHadBeenRemovedFromThatPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  04 July 2016
Description		   	   :  This method is used to Remove member from policy and verify that member had been removed from that policy.
Input					  : $sPolicyDescription_OrgAdmin
*/

function removeMemberFromPolicyAndVerifyThatMemberHadBeenRemovedFromThatPolicy($sPolicyDescription_OrgAdmin)
{

        // Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

        // Window maxmize
        _windowAction($sWinSiz);

        _wait(10000);

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon-
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $nw_policy);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_submit($submit_SaveDraft1))));

        // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));

        // Select the Memeber	
        _click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));

        var $memberName = _getText(_link($selected_ContactedName));

        // Click on add policy
        _click(_button($btn_AddPolicy));

        // Verify added policy should be displayed in the mid frame
        _assertEqual($nw_policy, _getText(_link($nw_policy)));

        // Click on Created new Policy
        _click(_link($nw_policy));

        // Click on policy Memebers
        _click(_link($link_PolicyMembers));

        // Verify the Selected Memeber
        _assertEqual($memberName, _getText(_span($memberName)));
 
  		// Click AssignMembers
  		_click(_link($lnk_AssignMemebrs));
  
  		// Click on Policy Memebers
  		_click(_radio($radio_PolicyMembers));
  
  		 // Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));
  
  		//  Click on Checl box
  		_click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));
  
  		// Verify the member 
  		_assertVisible(_heading4($heading_Unassigned, _near(_link($policy_Domain_Member))));
  
  		// Click Update
  		_click(_button($submit_Update));
  
  		// Verify the Member not visibel
  		_assertNotVisible(_span($policy_Domain_Member));

        // Click on delete icon
        _click(_link($lnk_Delete, _near(_italic($btn_icon_Trash))));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

        // Logout from the application
        logOut();
}

/*
Function Name 		: verifyThatRemovedMemberFromPolicyCanBeAddedAgainInPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  04 July 2016
Description		   	   :  This method is used to Verify that removed member from policy can be added again in policy
Input					  : $sPolicyDescription_OrgAdmin
*/

function verifyThatRemovedMemberFromPolicyCanBeAddedAgainInPolicy($sPolicyDescription_OrgAdmin)
{

        // Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

        // Window maxmize
        _windowAction($sWinSiz);

        _wait(10000);

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon-
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $nw_policy);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_submit($submit_SaveDraft1))));

        // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  	/*********** Adding the Member ************/
  
        // Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));

        // Select the Memeber	
        _click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));

        var $memberName = _getText(_link($selected_ContactedName));

        // Click on add policy
        _click(_button($btn_AddPolicy));

        // Verify added policy should be displayed in the mid frame
        _assertEqual($nw_policy, _getText(_link($nw_policy)));

        // Click on Created new Policy
        _click(_link($nw_policy));

        // Click on policy Memebers
        _click(_link($link_PolicyMembers));

        // Verify the Selected Memeber
        _assertEqual($memberName, _getText(_span($memberName)));
 
  /*********** Removing the Member ************/
  		// Click AssignMembers
  		_click(_link($lnk_AssignMemebrs));
  
  		// Click on Policy Memebers
  		_click(_radio($radio_PolicyMembers));
  
  		 // Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));
  
  		//  Click on Checl box
  		_click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));
  
  		// Verify the member 
  		_assertVisible(_heading4($heading_Unassigned, _near(_link($policy_Domain_Member))));
  
  		// Click Update
  		_click(_button($submit_Update));
  
  		// Verify the Member not visible
  		_assertNotVisible(_span($policy_Domain_Member));
   
  /*********** Adding the Member ************/
  		// Click AssignMembers
  		_click(_link($lnk_AssignMemebrs));
  
  		// Click on Policy Memebers
  		_click(_radio($radio_PolicyMembers));
  
  		// Enter the Member name
        _setValue(_textbox($txtbox_Name1), $policy_Domain_Member);

        // Click on Apply
        _click(_button($btn_Apply_AssignMembers));
  
  		//  Click on Check box
  		_click(_checkbox($chkbox_SelectedUser, _near(_strong($policy_Domain_Member))));

        var $memberName = _getText(_link($selected_ContactedName));

        // Click on Update policy
       _click(_button($submit_Update));
  
        // Verify added policy should be displayed in the mid frame
        _assertEqual($nw_policy, _getText(_link($nw_policy)));

        // Click on delete icon
        _click(_link($lnk_Delete, _near(_italic($btn_icon_Trash))));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

        // Logout from the application
        logOut(); 
}

/*
Function Name 		: verifyThatTheCountOfThePolicyInTheFirstFrameMatchesWithTheCountInTheLastFrame
Author 	 	    		:  Anantha N
Created Date 	 	 :  04 July 2016
Description		   	   :  This method is used to Verify that the count of the policy in the 'First Frame' matches with the count in the 'Last Frame
Input					  : 
*/

function verifyThatTheCountOfThePolicyInTheFirstFrameMatchesWithTheCountInTheLastFrame()
{

        // Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

        // Window maxmize
        _windowAction($sWinSiz);

        _wait(10000);

        // click on Policies
        _click(_link($lnk_Policies));
  
  		// click on Policy Sets
        _click(_link($lnk_PolicySets));
  
  		var $pCount = _getText(_span($span_Count, _in(_link($link_d_PolicySets))));
  
  		var $framePolicyCount = _getText(_span($span_mFramePolicy_Count));
  
  		_assertEqual($framePolicyCount, _getText(_span($span_Count, _in(_link($link_d_PolicySets)))));
  
		// Logout from the application
        logOut();   		

}

/*
Function Name 		:  verifyTheFollowingsShouldBeDisplayedUnderProfilePopupWindow
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify that followings should be displayed under  profile popup window.
Input			          :  
*/
function verifyTheFollowingsShouldBeDisplayedUnderProfilePopupWindow()
{
  //Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  // Window maxmize
  _windowAction($sWinSiz);

  _wait(10000);

    // Click on User icon
    _click(_button($btn_Usericon));
  
  // Verify the Profile name
  _assertVisible(_link($lnk_ProfileLink));
  
  // Verify the Number
  _assertVisible(_span($span_Profile_NgBInding, _near(_span($lbl_Number))));
  
  // Verify MBN
  _assertVisible(_span($span_Profile_NgBInding, _near(_span($txtbox_MBN))));
  
  // Log out from app
        logOut();

}

/*
Function Name 		:  verifyProfileSettingFunctionality
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Profile setting 'functionality
Input			          :  
*/
function verifyProfileSettingFunctionality()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click Profile Settings	
        _click(_link($lnk_ProfileSettings));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyMemberProfileUnderInViewProfile
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Member profile' under in view profile
Input			          :  
*/
function verifyMemberProfileUnderInViewProfile()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click Profile Settings	
      _click(_link($lnk_ViewProfile ));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);

      _assertVisible(_span($sStaus_User));
      _assertVisible(_image($sImg_Alt, _near(_span($profile_CamerIcon))));
      _assertVisible(_heading2($span_Profile_NgBInding, _near(_span($profile_CamerIcon))));
      _assertVisible(_link($lnk_details));
      _assertVisible(_link($lnk_Contact, _near(_link($lnk_details))));
      _assertVisible(_link($lnk_History, _near(_link($lnk_Settings))));
      _assertVisible(_link($lnk_Settings));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyDetailsSubTabInformationUnderProfileView
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Details' sub tab information under profile view
Input			          :  
*/
function verifyDetailsSubTabInformationUnderProfileView()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click Profile Settings	
      _click(_link($lnk_ViewProfile ));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);

    _assertVisible(_label($lbl_FirstName));
   _assertVisible(_label($lbl_LastName));
   _assertVisible(_label($slbl_title));
   _assertVisible(_label($txtbox_Email));
   _assertVisible(_label($lbl_Location));
   _assertVisible(_label($lbl_ZipCode));
   _assertVisible(_label($lbl_ExpirationDate));

  // Log out from app
      logOut();
}

/*
Function Name 		:  verifyDetailsSubTabInformationUnderProfileView
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Details' sub tab information under profile view
Input			          :  
*/
function verifyDetailsSubTabInformationUnderProfileView()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click Profile Settings	
      _click(_link($lnk_ViewProfile ));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);
		
  	  // Click  Details Tab
      _click(_link($lnk_Contact, _near(_link($lnk_details)))); 

      // Click on Phone]
      _click(_link($lnk_Phone));
      // Verify the Details
      _assertVisible(_link($lnk_Phone_1, _near(_link($lnk_Phone))));
      _assertVisible(_link($lnk_Mobile, _near(_link($lnk_Phone))));
      _assertVisible(_link($lnk_ResidentPhone, _near(_link($lnk_Phone))));

  		// Click Internet
      _click(_link($lnk_Internet)); 
      // Verify the Details
      _assertVisible(_link($lnk_workEmail ));
      _assertVisible(_link($lnk_HomeEmails));
      _assertVisible(_link($lnk_OtherEmail));
      _assertVisible(_link($lnk_IMAddress));
      _assertVisible(_link($lnk_WorkWebPage));
      _assertVisible(_link($lnk_HomeWebPage));

      // Click Address 
      _click(_link($lnk_Address));
      // Verify the Details
      _assertVisible(_link($lnk_Business));
      _assertVisible(_link($lnk_Resident));
      _assertVisible(_link($lnk_Workshop));
    
  	  // Log out from app
      logOut();

}

/*
Function Name 		:  verifyHistoryTabInformationUnderProfileView
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'History' tab information under profile view
Input			          :  
*/
function verifyHistoryTabInformationUnderProfileView()
{
    //Call method to login to site with valid credentials
    loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

    // Window maxmize
    _windowAction($sWinSiz);

    _wait(10000);

    // Click on User icon
    _click(_button($btn_Usericon));

    // Click Profile Settings	
    _click(_link($lnk_ViewProfile ));

    var $pageTitle = _title();
    _log($pageTitle);

    // Verifying the Page title
    _assertEqual($pageTitle, $sPageTitle);

    // Click History Tab
    _click(_link($lnk_History, _near(_link($lnk_Settings))));      

    // Verify the Elements
    _assertVisible(_select($drpdwn_ProfileHistory));
    _assertEqual($lnk_AllHistory, _getSelectedText(_select($drpdwn_ProfileHistory)));
    _assertVisible(_link($lnk_Note));
    _assertVisible(_div($date));
    
  	// Log out from app
    logOut();
 
}

/*
Function Name 		:  verifyAddANoteUnderHistory
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Add a note' under history
Input			          :  $sNoteHistory
*/
function verifyAddANoteUnderHistory($sNoteHistory)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click Profile Settings	
      _click(_link($lnk_ViewProfile ));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);

      // Click History Tab
      _click(_link($lnk_History, _near(_link($lnk_Settings))));      

      // Click Note
      _click(_link($lnk_Note));

      // Enter the Note
      _setValue(_textarea(0, _near(_link($lnk_Note))), $sNoteHistory);

      // Click Save
      _click(_submit($submit_Save , _near(_link($lnk_Note))));

      // Store the Text
      var $text = _getText(_paragraph($sNote_ProfileData))

     // Verify the Note
       _assertEqual($sNoteHistory, _getText(_paragraph($text)));

      // Log out from app
      logOut();
}

/*
Function Name 		:  verifyAddNewContactUnderContact
Author 	 	    	     :  Anantha N
Created Date 	      :  05 uly16
Description		        :  This method is used to Verify 'Add new contact' under 'contact'
Input			          :  $sPhoneNumber
*/
function verifyAddNewContactUnderContact($sPhoneNumber)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      // Window maxmize
      _windowAction($sWinSiz);

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));-

      // Click Profile Settings	
      _click(_link($lnk_ViewProfile ));

      var $pageTitle = _title();
      _log($pageTitle);

      // Verifying the Page title
      _assertEqual($pageTitle, $sPageTitle);

      // Click  Details Tab
      _click(_link($lnk_Contact, _near(_link($lnk_details)))); 

      // Click on Phone
      _click(_link($lnk_Phone));

      // Click on The Phone
      _click(_link($lnk_Phone_1));

      // Enter the Phone Number
      _setValue(_textbox($sPhoneNUmber_profile), $sPhoneNumber);

      // Click on Add Button
      _click(_submit($lnk_Add, _near(_heading4($heading_addPhoneNumber))));

      // Verify the message
      _assertVisible(_heading3($msg_PhoneNumberAdded));

      // Click on Delete Icon
      _click(_italic($icone_TrashPhoneNumber, _near(_span($sPhoneNumber))));

      // Click on Yes button
      _click(_button($btn_Yes ));

      // Log out from app
      logOut();
}

/*
Function Name 		: verifyTheCurrentActivityFunctionalityUnderPolicy
Author 	 	    		:  Anantha N
Created Date 	 	 :  30 June 2016
Description		   	   :  This method is used to Verify  the 'Current Activity' functionality  under Policy
Input					  : 
*/

function  verifyTheCurrentActivityFunctionalityUnderPolicy()
{
  // Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

   _windowAction($sWinSiz);
  
  _wait(10000);

  // click on Policies
  _click(_link($lnk_Policies));

  // click on Policy Sets
  _click(_link($lnk_PolicySets));
	
  // Click on Cloud 
  _click(_link($lnk_RecentActivity));
  
  // Click on View All Activity
  _click(_link($lnk_ViewAllActivity));
  
  // Verify the Activity Policys
  _assertVisible(_heading3($heading_ActivityforPolicy));
  
  // Logout from the application
  logOut();
}
