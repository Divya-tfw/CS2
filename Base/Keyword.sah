_include("Config.sah");
_include("OR.sah");
_include("../Data/Data.sah");

/**********************************************************************************************************
FileName				:Keyword.sah
Description				:This file contains all the keywords used to interact with GUI Objects across the framework 
AuthorName	 	 	  :Divya Raju.R
DateOfCreation		  :1/27/2016
DateOfModification   :1/27/2016
***********************************************************************************************************/
var $Contactmembername1;
var $Contactmembername2;
var $sOptionSelected;
var $now = new Date();
var $nYear = $now.getFullYear();
var $nMonth = $now.getMonth()+1;
var $nDate = $now.getDate();
var $nHour = $now.getHours();
var $nMin = $now.getMinutes();
var $nSec = $now.getSeconds();
var $sTimeStamp1=$nYear+""+$nMonth+""+$nDate+""+$nHour+""+$nMin+""+$nSec;
$sPolicyNameToEdit=$sPolicyNameToEdit+""+$sTimeStamp1;

var $now = new Date();
var $y = $now.getFullYear();
var $m = $now.getMonth()+1;
var $d = $now.getDate();
var $h = $now.getHours();
var $min = $now.getMinutes();
var $s = $now.getSeconds();
var $email_qa_ =$Mem1+$d+""+$m+""+$y+"."+$h+""+$min+""+$s+"@gmail.com";
var $dName=$Mem1+$d+""+$m+""+$y+"."+$h+""+$min+""+$s;
var $dEmail=$dName+"@gmail.com";
var $nw_policy = $sPolicy_oa+$d+""+$m+""+$y+""+$h+""+$min+""+$s;


/*
Function Name 		:   loginToSite
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to login to site with valid credentials
*//*
function loginToSite($sURL,$sUserName,$sPassword)
{
		
		//Sets readyStates of an XMLHttpRequest (XHR) Sahi should wait for
		_setXHRReadyStatesToWaitFor("2,3");
		
		//Navigate to url of the application
		_navigateTo($sURL);
		
		_wait(15000);
		
		//Maximise browser
		_windowAction("maximize");		
	
		_wait(10000,_isVisible(_textbox($txt_Email)));
		
		//Enter user name
		_setValue(_textbox($txt_Email), $sUserName);

		//Enter password
		_setValue(_password($txt_Password),$sPassword );		

		//Click on signin button
		_click(_submit($btn_SignIn));	
		
		_wait(14000);
		
		if(_exists(_click(_submit(0))))
		{
		_click(_submit(0));
          _log("Accept button is found ");
          _wait(10000);
		}
  
		  else
		  {
			_log("Accept button not found ");
			_wait(1000);
		  }
			
}*/
/*
Function Name 		:   verifyTopNavigationBar
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to verify top navigation icons on Home page
*/
function verifyTopNavigationBar()
{
		//Call method to login to site with valid credentials
		loginToSite($sURL,$sUserName,$sPassword);

		//Verify existance of  Request icon on home page
		_assertExists(_span($lnk_RequestIcon));

		//Verify existance of  Message icon on home page
		_assertExists(_span($lnk_MessageIcon));

		//Verify existance of  Notifications icon on home page
		_assertExists(_span($lnk_NotificationIcon));

		//Verify existance of  Chat icon on home page
		_assertExists(_span($lnk_ChatIcon));

		//Log out from app
		logOut();

}

/*
Function Name 		:   logOut
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to log out of the application
*/
function logOut()
{
	//Click on user
	_click(_span($span_User));

	//Click on Log out button
	_click(_link($lnk_LogOut));
}
/*
Function Name 		:   verifyRequestIcon
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify 'Request' popup window on tapping 'Request' icon
*/
function verifyTopNavigationIconsPopUps($lnk_RequestIcon,$sRequestIcon)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sUserName,$sPassword);

	//Click on given icon to open pop up
	_click(_span($lnk_RequestIcon));

	//Verify existance of popup window on tapping given icon
	_assertExists(_heading2($sRequestIcon));

	//Click on given icon to close pop up
	_click(_span($lnk_RequestIcon));

	//Log out of the application
	logOut();  
}


/*
Function Name 		:   verifyRequestIcon
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify  popup window on tapping respective icons
*/
function verifyPopupForChatIcon($lnk_ChatIcon,$sChatIcon)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sUserName,$sPassword);

	//Click on Chat icon to open pop up
	_click(_span($lnk_ChatIcon));

	//Verify existance of popup window on tapping given icon
	_assertExists(_div($sChatIcon));

	//Click on chat icon to close pop up
	_click(_span($lnk_ChatIcon));

	//Log out of the application
	logOut();  
}

/*
Function Name 		:   verifyContentsOfMessagePopUP
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify  contents of Message Pop up
*/
function verifyContentsOfMessagePopUP()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sUserName,$sPassword);
		
	//Click on Message icon to open pop up
	_click(_span($lnk_MessageIcon));

	//Verify display of All Messages link
	_assertExists(_link("/All messages/"));

	//Verify display of Urgent Messages link
	_assertExists(_link($lnk_Urgent_Message));

	//Verify display of BroadCast Messages link
	_assertExists(_link($lnk_BroadCastMessage));

	//Verify display of Compose Messages link
	_assertExists(_link($lnk_ComposeMessage));

	//Click on Message icon to close pop up
	_click(_span($lnk_MessageIcon));

	//Log out of the application
	logOut();  
	  
}
/*
Function Name 		:   verifyContentsOfChatsPopUP
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify  contents of Chat Pop up
*/
function verifyContentsOfChatsPopUP()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sUserName,$sPassword);
		
	//Click on chat icon link
	_click(_span($lnk_ChatIcon));

	//verify display of Inbox link
	_assertExists(_link($lnk_Inbox));

	//Verify display of History tab
	_assertExists(_link($lnk_History));

	//Verify display of Contacts tab
	_assertExists(_link($lnk_Contacts));

	//Click on chat icon link
	_click(_span($lnk_ChatIcon));

	//Log out of the application
	logOut(); 
}

/*
Function Name 		:   verifyContentsOfChatsPopUP
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify  contents of Chat Pop up
*/
function verifyContentsOfInboxDropDownOfChatsPopUP()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sUserName,$sPassword);
		
	//Click on chat icon link
	_click(_span($lnk_ChatIcon));

	//verify display of Inbox link
	_assertExists(_link($lnk_Inbox));

	_click(_select(0));

	_assertEqual("All Messages", _getSelectedText(_select(0)));

	//Click on chat icon link
	_click(_span($lnk_ChatIcon));

	//Log out of the application
	logOut(); 
}

/*
Function Name 		:   verifyFPAL
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify forget password activation 
*/
function verifyFPAL()
{
	//Launch the browser & navigate to given link
 	 _navigateTo($sURL);

	//Click on Login link
	_click(_link($lnk_Login));

	//Tap on 'Forgot Password?'
	_click(_link($lnk_ForgetPassword));

	//Enter email address
	_setValue(_textbox($txt_EmailAddressForForgotPassword), $sUserName);

	//Click on Send button
	_click(_submit($btn_Send));
}
/*
Function Name 		:   verifyFPAL
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify all GUI Objects on the landing page
*/
function verifyObjectsOnMainPage()
{
//Launch the browser & navigate to given link
	 _navigateTo($sURL);

    /* Verify all GUI Objects on the page*/
    _assertExists(_link($lnk_Home));
    _assertExists(_link($lnk_PortalFeatures));
    _assertExists(_link($lnk_SecureLine));
    _assertExists(_link($lnk_Support));
    _assertExists(_link($lnk_Login));
    _assertExists(_link($lnk_Registration));
    _assertExists(_heading1($txt_AppInfo));
    _assertExists(_link($lnk_AppStore));
    _assertExists(_link($lnk_PlayStore));
    _assertExists(_link($lnk_WindowsMarket));
    _assertExists(_link($lnk_BlackBerryWorld));   
    _assertExists(_image($img_CellTrustLogo));

}

/*
Function Name 		:   verifyFPAL
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to verify errors when clicked on sign with blank input
*/
function verifyErrorForBlankCredentials()
{
	//Launch the browser & navigate to given link
	 _navigateTo($sURL);

	//Click on Login link
	_click(_link($lnk_Login));

    //Verify existance of username text box
    _assertExists(_textbox($sUserNameBlank));

    //Verify existance of password text box
    _assertExists(_password($sPasswordBlank));

	//Verify Sign in button
    _assertExists(_submit($btn_SignIn));

	/*Verify the error message after clicking on Signin button with blank values*/

	//Verify email id error
	_assertExists(_span($sEmailIdError));

	//Verify Password error
	_assertExists(_span($sPasswordIdError));

}
	/*
Function Name 		:   validLogin
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to verify successfull Login
*/
function validLogin()
{
		//Call method to login to site with valid credentials
		loginToSite($sURL,$sUserName,$sPassword);
	
        //Verify display of comp name
        _assertExists(_span($sCompanyName));

          //Log out from app
            logOut();
}

	/*
Function Name 		:   verifyChatIconDropDownValues
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to Verify drop down values of chat icon
*/

function verifyChatIconDropDownValues()
{
    //Call method to login to site with valid credentials
    loginToSite($sURL,$sUserName,$sPassword);

    //Click on chat icon link
    _click(_span($lnk_ChatIcon));

    //Click on drop down
    _click(_select(0));
    //Verify drop down values
    var $list = _getOptions(_select(0));

		//Verify drop down values
         _assertEqual($sAllMessagesdpvalue, $list[0]);
        _assertEqual($sSecureLinedpvalue, $list[1]);
        _assertEqual($sStandardSMSspvalue, $list[2]);
        _assertEqual($sBroadcastdpvalue, $list[3]);
        _assertEqual($sUrgentdpvalue, $list[4]);

     //Click on chat icon link
    _click(_span($lnk_ChatIcon));

    //Log out of the application
    //logOut(); 
}

	/*
Function Name 		:   verifyLinksWhenClickedOnReg
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to verify icons when clicked on Registration page
*/
function verifyLinksWhenClickedOnReg()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

  		//Validation existance of Individual registration link
		_assertEqual($lnk_Individual, _getText(_link($lnk_Individual)));
  
  		//Validation existance of Company registration link
		_assertEqual($lnk_Company, _getText(_link($lnk_Company)));
}

/*
Function Name 		:   verifyLinksWhenClickedOnReg
Author 	 	    		:	Divya
Created Date 	 	 :   28th Jan 2016
Description		   	   :   This method is used to verify successfull registration of user
Input					: $sREmail,$sRPwd
*/
function registerAsUser($sREmail,$sRPwd)
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

  		//Validation existance of Individual registration link
		_click(_link($lnk_Individual));
	
  		//Enter first name
        _setValue(_textbox($txt_FirstName), $sFN);
		
  		//Enter last name
        _setValue(_textbox($txt_LastName), $sLN);
		
  		//Enter email id	
        _setValue(_textbox($txt_REmailId), $sREmail);
		
  		//Enter password
        _setValue(_password($txt_RPwd), $sRPwd);
		
  		//Enter confirm password
        _setValue(_password($txt_RCPwd), $sRPwd);
		
  		//Select Location
        _setSelected(_select($drpdwn_Location), $sRLocationId);
		
  		//Click on drop down to close it
        _click(_select($drpdwn_Location));
		
  		//Enter Zip code
        _setValue(_textbox($txt_ZipCode), $sRZipCode);
		
  		//Enter access key
        _setValue(_textbox($txt_Accesskey),$sAccesskey);
		
  		//Click on accept terms
        _click(_label($txt_Label));
		
  		//Click on submit button
        _click(_submit($btn_Submit));

  		//Verification of entered user details
  		//Verify Congratulations message
        _assertExists(_heading2($sCongratesMsg));
		
        var $a="Check your email (";
        var $b=") and click on the activation link.";
        _assertExists(_span($a+$sREmail+$b));
  		
  		//Validate Account information
        _assertEqual($txt_AccountInformation, _getText(_heading4($txt_AccountInformation)));
		
		//Validate first name
        _assertEqual($sFN,_getText(_span($txt_verifyAccountInfo,_near(_div($sverifyRFN)))));
		
  		//Validate last name
        _assertEqual($sLN,_getText(_span($txt_verifyAccountInfo,_near(_div($sverifyRLN)))));
		
  		//Validate email
        _assertEqual($sREmail,_getText(_span($txt_verifyAccountInfo,_near(_div($sverifyREmail)))));
		
          //Click on finish button
          _click(_submit($btn_Finish));
}

/*
Function Name 		:   verifyLinksWhenClickedOnReg
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify error message display when registered with invalid user id
Input					: $sREmailInvalid,$sRPwdInvalid
*/
function registerAsUserWithInvalidEmail($sREmailInvalid,$sRPwdInvalid)
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

  		//Validation existance of Individual registration link
		_click(_link($lnk_Individual));
	
  		//Enter first name
        _setValue(_textbox($txt_FirstName), $sFN);
		
  		//Enter last name
        _setValue(_textbox($txt_LastName), $sLN);
		
  		//Enter email id	
        _setValue(_textbox($txt_REmailId), $sREmail);
		
  		//Enter password
        _setValue(_password($txt_RPwd), $sRPwd);
		
  		//Enter confirm password
        _setValue(_password($txt_RCPwd), $sRPwd);
		
  		//Select Location
        _setSelected(_select($drpdwn_Location), $sRLocationId);
		
  		//Click on drop down to close it
        _click(_select($drpdwn_Location));
		
  		//Enter Zip code
        _setValue(_textbox($txt_ZipCode), $sRZipCode);
		
  		//Enter access key
        _setValue(_textbox($txt_Accesskey),$sAccesskey);
		
  		//Click on accept terms
        _click(_label($txt_Label));
  	
  		//Click on submit button
        _click(_submit($btn_Submit));  
}

/*
Function Name 		:   verifyDefaultLocationIdWI
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify Location should be selected under 'Location' drop down.
*/
function verifyDefaultLocationIdWI()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

  		//Validation existance of Individual registration link
		_click(_link($lnk_Individual));

		//Validate location id defaults to Location 
		_assertEqual($sRDefaultLocationId, _getSelectedText(_select($drpdwn_Location)));
  
} 

/*
Function Name 		:   verifyClickCancelLeadsToLandingPage
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify User should be navigated to landing page upon clicking cancel
*/

function verifyClickCancelLeadsToLandingPage()
{
	//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

  		//Validation existance of Individual registration link
		_click(_link($lnk_Individual));

        //Click on cancel button
        _click(_submit($btn_Cancel));

      //Verify User should be navigated to landing page upon clicking cancel
     // _assertEqual($sHomePage, _getText(_link($sHomePage)));
}
/*
Function Name 		:   registerAsCompanyWithValidDetails
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify User should be navigated to landing page upon clicking cancel
*/
function registerAsCompanyWithValidDetails()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

        //Enter company name
        _setValue(_textbox(0),$sRCompanyName);

		//Select Industry type
		_setSelected(_select(0), $sRIndustry);

		//Select Comp type
		_setSelected(_select(1), $sRIndustryType);
		
		//Close drop down
		_click(_select(1));

		//Select country
		_setSelected(_select(2), $sRLocationId);

		//Select number of employees
		_setSelected(_select(3),$sRNumberOfEmp);

		//Select Revenue of comp
		_setSelected(_select(4), $sRCompRevenue);

        //Enter zip code
        _setValue(_textbox(1), $sRCompZipCode);

        //Enter access key
        _setValue(_textbox(2), $sAccesskey);

        //Click on Next button
        _click(_submit($btn_Submit));

		//Enter first name
        _setValue(_textbox(0), $sCompFN);

        //Enter last name
        _setValue(_textbox(1),$sCompLN);

        //Enter email
        _setValue(_textbox(2), $sCompId);

        //Enter pwd
        _setValue(_password(0), $sRCompPwd);

        //Enter retype pwd
        _setValue(_password(1), $sRCompPwd);

        //Enter zip code
        _setValue(_textbox(3),  $sRCompZipCode);

        //Enter access key
        _setValue(_textbox(4), $sAccesskey);

        //Click accept terms
        _click(_label(0));

        //Click on next btn
        _click(_submit($btn_Submit));

        _assertExists(_heading2($sCompRegistrationSuccessMsg));

		_assertExists(_span("Check your email ("+$sCompId
                            +") and click on the activation link."));       

        //Click on finish button
        _click(_submit($btn_Finish));
}
/*
Function Name 		:   verifyDrpdwnValuesForIndustry
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify Industry drop down values in Register as Comp page
*/


function verifyDrpdwnValuesForIndustry()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

		//Select Industry type
		_setSelected(_select(0), $sRIndustry);

       //Verify drop down values
      var $list = _getOptions(_select(0));

      //Verify drop down values
      _assertEqual($sAccountingDrpdwnValue, $list[1]);
      _assertEqual($sAnimationDrpdwnValue, $list[2]);
}

/*
Function Name 		:   verifyDrpdwnValuesForIndustry
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify Industry drop down values in Register as Comp page
*/

function verifyDrpdwnValuesForIndustryType()
  {
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

		//Click on drop down
		_click(_select(1));

       	//Verify drop down values
      	var $list = _getOptions(_select(1));

        //Verify drop down values
		_assertEqual($sTypeDrpdwnValue, $list[0]);
        _assertEqual($sNonProfitDrpdwnValue, $list[1]);
        _assertEqual($sPrivateDrpdwnValue, $list[2]);
        _assertEqual($sPublicDrpdwnValue, $list[3]);
        _assertEqual($sMunicipalDrpdwnValue, $list[4]);
        _assertEqual($sEducationalInstitutionDrpdwnValue, $list[5]);		
  }
  
/*
Function Name 		:   verifyDrpdwnValuesForIndustry
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify Employee count drop down values in Register as Comp page
*/
function verifyDrpdwnValuesForEmployeesCount()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

		//Click on drop down
		_click(_select(3));

       	//Verify drop down values
      	var $list = _getOptions(_select(3));

        for ($i=0;$i<$list.length;$i++)
        {
          _assertExists( $list[$i]);
        }
}

/*
Function Name 		:   verifyDrpdwnValuesForIndustry
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to Country drop down values in Register as Comp page
*/

function verifyDrpdwnValuesForCountry()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

		//Click on drop down
		_click(_select(2));

       	//Verify drop down values
      	var $list = _getOptions(_select(2));

        for ($i=0;$i<$list.length;$i++)
        {
          _assertExists( $list[$i]);
        }
} 

/*
Function Name 		:   verifyDrpdwnValuesForRevenue
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to Revenue drop down values in Register as Comp page
*/

function verifyDrpdwnValuesForRevenue()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

		//Click on drop down
		_click(_select(4));

       	//Verify drop down values
      	var $list = _getOptions(_select(4));

        for ($i=0;$i<$list.length;$i++)
        {
          _assertExists( $list[$i]);
        }
} 
/*
Function Name 		:   registerAsCompanyWithSameUN
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify duplicate user name error.
*/

function registerAsCompanyWithSameUN()
{
		//Navigate to url of the application
		_navigateTo($sURL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Registration));

		//Click on Company link
		_click(_link($lnk_Company));

        //Enter company name
        _setValue(_textbox(0),$sRCompanyName);

		//Select Industry type
		_setSelected(_select(0), $sRIndustry);

		//Select Comp type
		_setSelected(_select(1), $sRIndustryType);
		
		//Close drop down
		_click(_select(1));

		//Select country
		_setSelected(_select(2), $sRLocationId);

		//Select number of employees
		_setSelected(_select(3),$sRNumberOfEmp);

		//Select Revenue of comp
		_setSelected(_select(4), $sRCompRevenue);

        //Enter zip code
        _setValue(_textbox(1), $sRCompZipCode);

        //Enter access key
        _setValue(_textbox(2), $sAccesskey);

        //Click on Next button
        _click(_submit($btn_Submit));        
        
        //Enter first name
        _setValue(_textbox(0), $sCompFN);

        //Enter last name
        _setValue(_textbox(1),$sCompLN);

        //Enter email
        _setValue(_textbox(2), $sCompId);

        //Enter pwd
        _setValue(_password(0), $sRCompPwd);

        //Enter retype pwd
        _setValue(_password(1), $sRCompPwd);

        //Enter zip code
        _setValue(_textbox(3),  $sRCompZipCode);

        //Enter access key
        _setValue(_textbox(4), $sAccesskey);

        //Click accept terms
        _click(_label(0));

        //Click on next btn
        _click(_submit($btn_Submit));

		//Verify existance of duplicate user name error
		_assertExists(_div($sRDuplicateUserError));
  
}


/*
Function Name 		:   verifyPolicyList
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify All 'Policies' list should be  displayed
*/
function verifyPolicyList($sDev_URL)
{
		//Navigate to url of the application
		_navigateTo($sDev_URL);

		//Maximise browser
		_windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Login));

		//Enter user name
		_setValue(_textbox($txt_Email), $sUserName);

		//Enter password
		_setValue(_password($txt_Password),$sPassword );

		//Click on signin button
		_click(_submit($btn_SignIn));
		
		//Click on Policieslink
		_click(_link($lnk_Policy));
		
		//Click on policy set
		_click(_link($lnk_PolicySet));

		//Check existance of All policy list
		_assertExists(_span("/All Policies [(] [0-9][)]/"));  
		
		logOut(); 
}

/*
Function Name 		:   verifyPolicySetInfo
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify All info under Policy set should be  displayed
*/
function verifyPolicySetInfo($sDev_URL)
{

		//Navigate to url of the application
		_navigateTo($sDev_URL);

		 //Maximise browser
		  _windowAction($txt_WindowMaximise); 
		  
		//Click on Login link
		_click(_link($lnk_Login));

		//Enter user name
		_setValue(_textbox($txt_Email), $sUserName);

		//Enter password
		_setValue(_password($txt_Password),$sPassword );

		//Click on signin button
		_click(_submit($btn_SignIn));
		
		//Click on Policieslink
		_click(_link($lnk_Policy));
		
		//Click on policy set
		_click(_link($lnk_PolicySet));

		//Verify all info wrt Policy should be displayed
		_assertExists(_label($sPName));
		_assertExists(_label($sPPolicyStatus));
        _assertExists(_label($sPDescription));
        _assertExists(_label($sPDateCreated));
       _assertExists(_label($sPolicyMember));
        _assertExists(_label($sPCreatedBy));
        _assertExists(_label($sPolicyExpired));
        _assertExists(_label($sPLastModified));
        _assertExists(_label($sPModifiedBy));
		
		//Verify info under security settings
		_assertExists(_tableHeader($sPPolicyName));
		_assertExists(_tableHeader($sPSDescription));
		_assertExists(_tableHeader($sPPolicyValue));
		_assertExists(_tableHeader($sPInclude));
		_assertExists(_tableHeader($sPLock));
		//Log out of app
		//logOut(); 
}

/*
Function Name 		:   verifyPolicySetInfo
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify sub links of devices link
*/

function verifySubLinksOfDevicesLink()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);		

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//verify display of Pending Devices
		_assertExists(_link($lnk_MPendingDevices));

		//Log out of app
		//logOut(); 
}


/*
Function Name 		:   verify_Display_Of_AllDevices_Link_When_ClickedOn_AllDevices
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify display of All devices link when clicked on All Devices sublink
*/

function verify_Display_Of_AllDevices_Link_When_ClickedOn_AllDevices()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));
  
  		//Verify display of All devices page
  		_assertVisible(_div($lnk_AllDevices));
		
		 logOut(); 
  
}
/*
Function Name 		:   verifyOptionsUnderDeviceDropDown
Author 	 	    		:	Divya
Created Date 	 	 :   2nd feb 2016
Description		   	   :   This method is used to verify drop down values under Device OS drop down
*/
function verifyOptionsUnderDeviceOSDropDown()
{
	//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));


		//Click on drop down
		_click(_select(2));

       	//Verify drop down values
      	var $list = _getOptions(_select(2));

       _assertEqual($drpdwn_DeviceOsVAlue, $list[0]);
        _assertEqual($drpdwn_CountryValue, $list[1]);
        _assertEqual($drpdwn_StatusValue, $list[2]);
        _assertEqual($drpdwn_HandSetValue, $list[3]);
  
 		 logOut(); 
}
/*
Function Name 		:   verifyOptionsUnder_DeviceType_DropDown
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify Options under DeviceType DropDown
*/
function verifyOptionsUnder_DeviceType_DropDown()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Verify drop down values
      	var $list = _getOptions(_select(3));

       	_assertEqual($drpdwn_AllDeviceTypeVAlue, $list[0]);
        _assertEqual($drpdwn_UnknownDeviceTypeValue, $list[1]);
        _assertEqual($drpdwn_IOSDeviceTypeValue, $list[2]);
        _assertEqual($drpdwn_AndroidDeviceTypeValue, $list[3]);
  		_assertEqual($drpdwn_WindowsPhoneDeviceTypeValue, $list[4]);
  		_assertEqual($drpdwn_BalckBerryDeviceTypeValue, $list[5]);

 		logOut(); 
}
/*
Function Name 		:   verifyDisplayOf_DeviceTypeSelected
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display format of selected Device type
*/
function verifyDisplayOf_DeviceTypeSelected()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Select value from Device type drop down
		_setSelected(_select(3), $drpdwn_UnknownDeviceTypeValue);

		//Verify dispay of selected value in drop down as a link
		_assertVisible(_link($drpdwn_UnknownDeviceTypeValue));

		//verify display of date in given format dd mm yyyy
		_assertVisible(_paragraph($txt_TimeStampUnderDeviceType));

		//Log out of app
		//logOut(); 
  
} 

/*
Function Name 		:   verifyDifferentStatusUnderStatusDropDown
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify diffrent status under Status drop down
*/

function verifyDifferentStatusUnderStatusDropDown()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Select value Status from Device type drop down
		_setSelected(_select(2),$drpdwn_StatusValue);

		//Verify existance of Status of devices present under Status
		_assertExists(_link($lnk_Pending));
		_assertExists(_link($lnk_Current));
		
		//Log out of app
		//logOut(); 

}
/*
Function Name 		:   verifyDifferentStatusUnderStatusDropDown
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display of countries when selected country as drop down value
*/

function verifyDisplayOf_Countries_Whenselected_CountryDropDownValue()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Select value Country from Device type drop down
		_setSelected(_select(2),$drpdwn_CountryValue);
		
		//verify display of countries
		_assertExists(_div($txt_DeviceOsDropDwnContents));
		
		_log(_getText(_div($txt_DeviceOsDropDwnContents)));
		
		//Log out of app
		//logOut(); 
}		

/*
Function Name 		:   verifyDifferentStatusUnderStatusDropDown
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display of Handsets when selected Hand set as drop down value
*/

function verifyDisplayOf_Handset_When_selected_HandsetDropDownValue()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Select value Country from Device type drop down
		_setSelected(_select(2),$drpdwn_HandSetValue);
		
		//Click to close drop down
		_click(_select(2));
		
		//verify display of countries
		_assertExists(_link($drpdwn_UnknownDeviceTypeValue));
		
		_log(_getText(_link($drpdwn_UnknownDeviceTypeValue)));
		
		//Log out of app
		//logOut(); 
}	

/*
Function Name 		:   verifyDisplayOfAddNewDeviceWindow
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display of add a new device window upon clicking on + icon
*/

function verifyDisplayOfAddNewDeviceWindow()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));		

		//Click on + icon
		_click(_link(168));

		//Verify display of Add a device window
		_assertExists(_heading4($txt_AddNewDevice));

		//Close the window
		_click(_italic($icon_CloseWindow));

		//Log out of app
		//logOut(); 		
} 


/*
Function Name 		:   verifyContentsOfAdvancedSearch
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display contents of Advanced Search
*/
function verifyContentsOfAdvancedSearch()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));

		//Click on Advanced Search option
		_click(_div($div_AdvancedSearch));

		//Verify that following options are displayed when clicked on Advanced Search 
        _assertExists(_label($txt_RegisteredFrom));
        _assertExists(_label($txt_P2PExpiryFrom));
        _assertExists(_label($drpdwn_OS));
        _assertExists(_label($drpdwn_DeviceStatus));
        _assertExists(_submit($btn_Reset));
        _assertExists(_submit($btn_Search));

		//Log out of app
		//logOut();
  
} 

/*
Function Name 		:   advancedSearchSearchResults
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify display contents of Advanced Search
*/

function advancedSearchSearchResults()
{
//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link($lnk_MDevices));

		//Verify display of All Devices link
		_assertExists(_link($lnk_MAllDevices));	

		//Click on Advanced Search option
		_click(_div($div_AdvancedSearch));

  		//Set Registred From date
        _setValue(_textbox($txt_RegisteredFromDate), $sRegisteredFromDate);
  
 		 //Set Registred To date
        _setValue(_textbox($txt_RegisteredToDate), $sRegisteredFromTo);
  /*
  		//Set P2P Expiry From Date
        _setValue(_textbox($txt_P2PExpiryFromDate), $sP2PExpiryFromDate);
  
  		//Set P2P Expiry To Date
        _setValue(_textbox($txt_P2PExpiryToDate), $sP2PExpiryToDate);*/
  
  		//Select OS Value
        _setSelected(_select(4),$sOS);
  
		//Select device status
        _setSelected(_select(5),$sDeviceStatus);
  
		//Click on search button
        _click(_submit($btn_Search));
  
  		//Log out of app
		//logOut();

}
/*
Function Name 		:   verifyExistanceOfSubGroupsUnderGroups
Author 	 	    		:	Divya
Created Date 	 	 :   5th feb 2016
Description		   	   :   This method is used to verify existance of Sub groups Under Groups
*/

function verifyExistanceOfSubGroupsUnderGroups()
{
	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on groups
		_click(_link("/Groups .*/"));
		//Verify the existance of subgroups under Groups
        _assertExists(_link("/User Groups .*/"));
        _assertExists(_link("/Policy Groups .*/"));
        _assertExists(_link("/Contact Groups .*/"));
        _assertExists(_link("/Shared Groups .*/"));
        _assertExists(_link("/All .*/"));

		//Log out of app
		logOut();	
} 
/*
Function Name 		:   verifyDisplayOfContactGroupSection
Author 	 	    		:	Divya//Login to site with valid credentials		
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of Contact Group section when click on Contact Group link
*/

function verifyDisplayOfContactGroupSection()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on groups
		_click(_link("/Groups .*/"));

		//Click on Contact Groups link
		_click(_link("/Contact Groups .*/"));

		//Verify clicking on Contact groups link navigates Contact Group section
		_assertExists(_heading2("/ContactGroups .*/"));

		//Log out of app
		//logOut();
} 

/*
Function Name 		:   verifyGroupsCount
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of Contact Group section when click on Contact Group link
*/

function verifyGroupsCount()
{
    //Login to site with valid credentials
      loginToSite($sURL,$sUN1,$sPwd1);	

    //Click on groups
    _click(_link("/Groups .*/"));

    //Click on Contact Groups link
    _click(_link("/Contact Groups .*/"));

	var $expected=_getText(_link(141));
	var $actual=_getText(_heading2(6));

	if(_areEqual($expected, $actual))
    {
      _log("Count of groups displayed in the Mid-Frame and the count displayed near the Contact Groups in the First Frame are same");
    }
	else
    {
      _log("Count of groups displayed in the Mid-Frame and the count displayed near the Contact Groups in the First Frame are not same");
    } 
        
    //Log out of app
    //logOut();
}

/*
Function Name 		:   addGroup
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to add new group
*/

function addGroup()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

   		 //Click on groups
    	_click(_link("/Groups .*/"));

   		 //Click on Contact Groups link
    	_click(_link("/Contact Groups .*/"));

		//Click on + icon
        _click(_link(165));

        //Enter Title
        _setValue(_textbox($txt_Title), $sGroupTitle);

        //Select type of group
        _setSelected(_select($drp_dwn_GType), $sUsergroupDropDown);

        //Enter description
        _setValue(_textarea(0), $sGroupTitle);

        //Click on next button
        _click(_submit($btn_Submit));

		//Search for name
		_setValue(_textbox($txt_GName), $sUsergroupToSearch);

		_click(_checkbox($chkbox_OnStatus, _near(_strong("Cell Trust[1]"))));

		_click(_submit($btn_Addgroup));

		//Log out of app
    	//logOut();
}

/*
Function Name 		:   verifyDisplayOfSortByIcon
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of Sort By icon
*/
function verifyDisplayOfSortByIcon()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

   		 //Click on groups
    	_click(_link("/Groups .*/"));

   		 //Click on Contact Groups link
    	_click(_link("/Contact Groups .*/"));

 		 //Verify existance of Sort by link	
        _assertExists(_link($lnk_SortBy));
  
  		//Click on Sort by Link
        _click(_link($lnk_SortBy));  
  		
        _log("Links in pop up "+_getText(_list(27)));
  
		//Log out of app
    	//logOut();
}  

/*
Function Name 		:   verifyDisplayOfSortByIcon
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify sub menus under User management
*/
function verifySubMenus_UnderUM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Check existance of sub menus under UM menu
		_assertExists(_link("/Pending/"));
		_assertExists(_link("/Active/"));
		_assertExists(_link("/All/"));
		_assertExists(_link("/Import/"));

		//Log out of app
    	//logOut();
} 
 /*
Function Name 		:   verifyAllUsersSubMenu
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify page navigated to All users sub menu upon clicking on All link
*/ 

function verifyAllUsersSubMenu()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));
	
		//Verify page navigated to All users sub menu upon clicking on All link
		_assertExists(_div($txt_AllUsers));

		//Log out of app
    	//logOut();
  
}   
/*
Function Name 		:   verifyPendingSubMenu
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify page navigated to Pending sub menu upon clicking on Pending link
*/ 

function verifyPendingSubMenu()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));
	
		//Verify page navigated to All users sub menu upon clicking on All link
		_assertExists(_div($txt_Pending));

		//Log out of app
    	//logOut();
  
}   

/*
Function Name 		:   verifyActiveSubMenu
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify page navigated to Active sub menu upon clicking on Active link
*/ 

function verifyActiveSubMenu()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));
	
		//Verify page navigated to All users sub menu upon clicking on All link
		_assertExists(_div($txt_Active));

		//Log out of app
    	//logOut();
  
}   

/*
Function Name 		:   verifyImportSubMenu
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify page navigated to Import sub menu upon clicking on Import link
*/ 

function verifyImportSubMenu()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));
	
		//Verify page navigated to All users sub menu upon clicking on All link
		_assertExists(_div($txt_Import));

		//Log out of app
    	//logOut();
  
}   
/*
Function Name 		:   verifyUserAndRolesSection
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify User and roles section under User management
*/ 

function verifyUserAndRolesSection()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Verify existance of User & roles section under UM
		_assertExists(_heading2($txt_UserAndRoles));

		//Log out of app
    	//logOut();
} 

/*
Function Name 		:   listOfUsersUnderUM
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify list of users under UM
*/ 

function listOfUsersUnderUM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));

		//verify existance of all users under UM
		_log(_getText(_div($txt_AllUsersSection)));

		//Log out of app
    	logOut();  
} 
/*
Function Name 		:   verifyDisplayOfUserSearchWindow
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to verify Display Of User Search Window
*/ 

function verifyDisplayOfUserSearchWindow()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link($lnk_UserManagement));

		//Click on All submenu
		_click(_link("/All/"));

		_click(_div($btn_UserSearch));

        if(_exists(_submit($btn_Search)))
        {
          _log("User search window is expanded ");
          }
        else
        {
           _log("User search window is not expanded ");
        }
		//Log out of app
    	logOut();  
} 
/*
Function Name 		:   userSearchInUM
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to verify Display Of User while searched in User management under All submenu
*/ 

function userSearchInUM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on User search section
		_click(_div($div_UserSearch));

		//Enter first name to search	
		_setValue(_textbox($sverifyRFN), $sUMFirstNameSearchInput);

		//Click on search button
		_click(_submit($btn_Search));

		//Validate existance of name searched
		_assertEqual($sAllUMNameToVerify, _getText(_link($sAllUMNameToVerify)));
		//Log out of app
    	logOut();  
}

/*
Function Name 		:   verifyDisplayOfMessageWindowInAllUMModule
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to verify Display Of message window in All sub menu of UM 
*/ 

function verifyDisplayOfMessageWindowInAllUMModule()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on message icon for a given user
		_click(_span("/table-cell-icon-link glyphicon glyphicon-envelope/",_leftOf(_link($sAllUNNameToClickForMessage))));

		//Verify display of Message window pop up
		_assertExists(_heading2($sAllUNNameToClickForMessage, _near(_span($icon_Chat))));

		//Log out of app
    	logOut();  
}

/*
Function Name 		:   verifyDisplayOfOptionsInPlusIcon
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of options in + icon under Users & roles
*/ 

function verifyDisplayOfOptionsInPlusIcon()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on + icon under User & Roles
		_click(_link(165));

		//verify display of options when clicked on + icon
		_assertExists(_link("/User/"));
		_assertExists(_link($txt_Role));

		//Log out of app
    	logOut();  
} 

/*
Function Name 		:   verifyDisplayOfAddNewUserpopup
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of Add New User Pop up
*/ 

function verifyDisplayOfAddNewUserpopup()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on + icon under User & Roles
		_click(_link(165));

		//Click on User link to add new user
		_click(_link("/User/"));

		//verify display of User pop up
		_assertExists(_heading4($txt_UMAddNewMember));

		//Log out of app
    	logOut();  
} 


/*
Function Name 		:   verifyDisplayOfAddNewRolepopup
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of Add New Role Pop up
*/ 

function verifyDisplayOfAddNewRolepopup()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on + icon under User & Roles
		_click(_link(165));

		//Click on User link to add new role
		_click(_link($txt_Role));

		//verify display of User pop up
		_assertExists(_heading4($txt_UMAddNewRole));

		//Log out of app
    	logOut();  
} 
/*
Function Name 		:   verifyDisplayOfSortByPopUpInUM
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of sort by pop up in Um 
*/ 
function verifyDisplayOfSortByPopUpInUM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

  		//Click on sort by link
		_click(_link($lnk_UMSortBy));

  		//Verify display of sort by pop up 
  		_assertExists(_list(26));
  
		//Log out of app
    	logOut();  
} 

/*
Function Name 		:   verifyDisplayOfSortByPopUpInUM
Author 	 	    		:	Divya
Created Date 	 	 :   12th feb 2016
Description		   	   :   This method is used to Verify display of sort by pop up in Um 
Input				: SortInputCharacter	
*/ 

function sortingUsingGivenCharacterinUM($sUMSortInputCharacter)
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

  		//Click on sort by link
		_click(_link($lnk_UMSortBy));

		//Click on character A to sort
  		_click(_link($sUMSortInputCharacter));
  
		//Log out of app
    	logOut();  
} 

/*
Function Name 		:   verifyDisplayOfFilterByOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of Filter by option	
*/ 


function verifyDisplayOfFilterByOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Verify existance of list of filter by options
		_assertExists(_list($lst_FilterBy));
  		
		//Log out of app
    	logOut();  
}  

/*
Function Name 		:   verifyDateCreated_NewestFirstFilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of list in Newest first sorted order
*/ 
function verifyDateCreated_NewestFirstFilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_DateCreated_NewestFirst));
  
		//Log out of app
    	logOut(); 
} 


/*
Function Name 		:   verifyDateCreated_OldestFirstFilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of list in Oldest first sorted order
*/ 
function verifyDateCreated_OldestFirstFilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_DateCreated_OldestFirst));
  
		//Log out of app
    	logOut(); 
} 


/*
Function Name 		:   verifyDateUpdated_NewestFirstFilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of list in date updated in newest first sorted order
*/ 
function verifyDateUpdated_NewestFirstFilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_DateUpdated_NewestFirst));
  
		//Log out of app
    	logOut(); 
} 

/*
Function Name 		:   verifyDateUpdated_OldestFirstFilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of list in date updated in oldest first sorted order
*/ 
function verifyDateUpdated_OldestFirstFilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_DateUpdated_OldestFirst));
  
		//Log out of app
    	logOut(); 
} 

/*************************************************************************/
/*
Function Name 		:   verifyTitle_Ascending_FilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of title as per ascending
*/ 
function verifyTitle_Ascending_FilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_TitleAscending));
  
		//Log out of app
    	logOut(); 
} 

/*
Function Name 		:   verifyTitle_Descending_FilterOption
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of title as per descending
*/ 
function verifyTitle_Descending_FilterOption()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_TitleDescending));
  
		//Log out of app
    	logOut(); 
} 

/*
Function Name 		:   verifyListDisplayAsPerSnippet
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to Verify display of list sorted according to snippet order
*/
function verifyListDisplayAsPerSnippet()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);			

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));
		
		//Click on Filter By option
		_click(_link(194));

		//Click on option Date created - newest first option
		_click(_link($drp_dwn_UMList));
  
		//Log out of app
    	logOut(); 
} 
/*
Function Name 		:   addNewUser_In_UM
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to add new user in UM
*/


function addNewUser_In_UM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on + icon to add new user
		_click(_link($lnk_UMPlusIcon));

		//Click on user link
		_click(_link($lnk_UMAddUser));		

		//Enter first name	
 		 _setValue(_textbox(14), $sUMFN);

		//Enter last name
		_setValue(_textbox(15), $sUMLN);

		//Enter email id
		_setValue(_textbox(16), $sUMEmail);

		//Select country
		_setSelected(_select(2), $sUMCountry);
		
		//Enter Zip code
		_setValue(_textbox(17), $sUMUser_ZipCode);

		//Select role 
		_setSelected(_select(3),$sUMUserRole);

		//Click on Next button
		_click(_submit($btn_Submit));

        //Click on Finish button
        //_click(_submit("Finish"));

		_click(_submit($btn_UMCancel));

		//Log out of app
    	logOut(); 
}

/*
Function Name 		:   addNewRole_In_UM
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to add new role in UM
*/


function addNewRole_In_UM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on + icon to add new user
		_click(_link($lnk_UMPlusIcon));

		//Click on role link
		_click(_link($txt_Role));	

		//Enter First name
		_setValue(_textbox($txt_GName), "AutoRole1");
		
		//Enter description
		_setValue(_textarea($txt_UMDescription), "Description");
		
		//Click on next button	
		  _click(_submit($btn_Submit));

		//Click on next button	
		_click(_button($btn_Submit));

		//Log out of app
    	logOut();   
} 

/*
Function Name 		:   updateUserDetails_In_UM
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is used to update user & validate same in Pending & all sub menus
*/

function updateUserDetails_In_UM()
{
		//Login to site with valid credentials
      	loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on user management link	
		_click(_link("/User Management .*/"));

		//Click on Pending link
		_click(_link("/Pending .*/"));
  
		//Click on All users
		_click(_link($txt_AllUsers));

		//Select one of users & click on edit button
		_click(_link($lnk_Action, _near(_div($sUserNameB4Edit))));

		//Edit first name
		_setValue(_textbox(14), $sUserFNToEdit);

		//Click on Edit button
		_click(_submit($btn_Edit));

		//Validate updation of un
		_assertEqual($sUserNameAfterEdit, _getText(_link($sUserNameAfterEdit)));

		//Click on All submenu
		_click(_link("/All [0-9[0-9]/"));

		//Click on All users
		_click(_link($txt_AllUsers));

		//Validate updation of un
		_assertEqual($sUserNameAfterEdit, _getText(_link($sUserNameAfterEdit)));

		//Log out of app
    	logOut(); 
}
/*
Function Name 		:   verifyDisplayOfSortByDropDown
Author 	 	    		:	Divya
Created Date 	 	 :   17th feb 2016
Description		   	   :   This method is verify display of Sort by drop down in devices
*/

function verifyDisplayOfSortByDropDown()
{
		//Login to site with valid credentials
		loginToSite($sURL,$sUN1,$sPwd1);	

		//Click on Devices 
		_click(_link("/Devices .*/"));
  
 		 //Click on All Devices link
		_click(_link("/All Devices .*/"));	
			
		//Verify display of sort icon
		_assertExists(_link(177));

		//Click on drop down of sort icon
		//_click(_link(177));

		//verify existance of sorting drop downs
		//_assertExists(_listItem($drpdwn_SortBy));

		//Log out of app
		//logOut();
}



/*
Function Name 			:   verifyMBNCreatedByDomainAdminIsVisibleToOtherDomain
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that MBN created by domain admin is visible to other domain admins
Input					:   $sURL,$sDomainName1,$sDomainName1_Password,$sDomainName2,$sDomainName2_Password, $iMBNValue ,
							$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/

function verifyMBNCreatedByDomainAdminIsVisibleToOtherDomain
($sURL,$sDomainName1,$sDomainName1_Password,$sDomainName2,$sDomainName2_Password, $iMBNValue ,$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly)
{
 
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	_wait(2000);
	//Get row count of table
    var $rowCount=_fetch(_table(4).rows.length);
	_log($rowCount);
	//Get table contents 
    var $Contents= _getTableContents(_table(4));

	//Initialise value to 1
    var $i=1;
  
	/************Block to check if given MBN is already existing in the table , if yes means delete *************/
    while($i<$rowCount)
    {
      //Assign value of 4 coulmn to given variable
        var $b=$Contents[$i][4];   
      _log($b);
     //Verify existance of MBN .If yes means delete else means create new one 
      if($iMBNValue==$b)
      {
        //Click on MBN delete link near given MBN
        _click(_link($lnk_DeleteMBN, _near(_div($iMBNValue))));
        
        //Click on Yes button in pop up
        _click(_button($btn_YesForDeleteMBN));
        
         _log("MBN is already existing .Hence deleted");
      }
       $i++;
    }

	//Click on + icon
	_click(_link($icon_PlusAddMBN, _near(_span($icon_Mobile))));
	
	_wait(2000);
	/*******Actions on Create MBN pop up********************/

	//Click on country drop down to open the drop down
	_click(_select($drp_dwn_CountryId));

	//Select desired value from drop down
	_setSelected(_select($drp_dwn_CountryId), $drp_dwn_MBNCountryId);

	//Click on country drop down to close the drop down
	_click(_select($drp_dwn_CountryId));

	//Enter MBN to create
	_setValue(_textbox($txt_MBNValue), $iMBNValue);

	//Select desired value from Type drop down
	_setSelected(_select($drp_dwn_MBNType), $drp_dwn_MBN_VoiceOnly);
	
	//Click on next button
	_click(_submit($btn_Next));	

	//Click on Create button
	_click(_submit($btn_Create));
 
	/***********Pop up closure****************************/

	//Validate MBN ,Location and type selected after creation
	_assertEqual($iMBNValue, _getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))));
	_assertEqual($drp_dwn_MBNCountryId, _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable)))));
	_assertEqual($drp_dwn_MBN_VoiceOnly, _getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType)))));

	//Log out from app
	logOut();

	/******************************Login as Another Domain Admin****************************/
	loginToSite($sURL,$sDomainName2,$sDomainName2_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//Validate created MBN details are visible to Another domain Admin
	_assertEqual($iMBNValue, _getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))));
	_assertEqual($drp_dwn_MBNCountryId, _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable)))));
	_assertEqual($drp_dwn_MBN_VoiceOnly, _getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType)))));

	//Log out from app
	logOut();  
}

/*
Function Name 			:   verifyMBNCreatedByDomainAdminIsNotVisibleToOrgDomain
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that MBN created by domain admin is not visible to other organization admin
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sOrgAdminName1,$sOrgAdminPassword1, $iMBNValue ,
							$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/

function verifyMBNCreatedByDomainAdminIsNotVisibleToOrgDomain
($sURL,$sDomainName1,$sDomainName1_Password,$sOrgAdminName1,$sOrgAdminPassword1, $iMBNValue ,
 $drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly)
{
  
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//Get row count of table
    var $rowCount=_fetch(_table(4).rows.length);
	_log($rowCount);
	//Get table contents 
    var $Contents= _getTableContents(_table(4));

	//Initialise value to 1
    var $i=1;
  
	/************Block to check if given MBN is already existing in the table , if yes means delete *************/
    while($i<$rowCount)
    {
      //Assign value of 4 coulmn to given variable
        var $b=$Contents[$i][4];   
      _log($b);
     //Verify existance of MBN .If yes means delete else means create new one 
      if($iMBNValue==$b)
      {
        //Click on MBN delete link near given MBN
        _click(_link($lnk_DeleteMBN, _near(_div($iMBNValue))));
        
        //Click on Yes button in pop up
        _click(_button($btn_YesForDeleteMBN));
        
         _log("MBN is already existing .Hence deleted");
		 _wait(2000);
      }
       $i++;
    }

//Click on + icon
	_click(_link($icon_PlusAddMBN, _near(_span($icon_Mobile))));
_wait(2000);
	/*******Actions on Create MBN pop up********************/

	//Click on country drop down to open the drop down
	_click(_select($drp_dwn_CountryId));

	//Select desired value from drop down
	_setSelected(_select($drp_dwn_CountryId), $drp_dwn_MBNCountryId);

	//Click on country drop down to close the drop down
	_click(_select($drp_dwn_CountryId));

	//Enter MBN to create
	_setValue(_textbox($txt_MBNValue), $iMBNValue);

	//Select desired value from Type drop down
	_setSelected(_select($drp_dwn_MBNType), $drp_dwn_MBN_VoiceOnly);
	
	//Click on next button
	_click(_submit($btn_Next));	

	//Click on Create button
	_click(_submit($btn_Create));
 _wait(2000);
	/***********Pop up closure****************************/

	//Validate MBN ,Location and type selected after creation
	_assertEqual($iMBNValue, _getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))));
	_assertEqual($drp_dwn_MBNCountryId, _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable)))));
	_assertEqual($drp_dwn_MBN_VoiceOnly, _getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType)))));

	//Log out from app
	logOut();

	/******************************Login as Another Domain Admin****************************/
	loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

	_click(_span($sOrgNameToClick));
	
	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));
_wait(2000);
	//Validate created MBN details are visible to Another domain Admin
    var $iMBNVal=_getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))) ;
    var $sLocationVal= _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable))));
    var $sMBNTyp=_getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType))));	

  	if(($iMBNValue != $iMBNVal) &&($drp_dwn_MBNCountryId != $sLocationVal) && ($drp_dwn_MBN_VoiceOnly != $sMBNTyp))
    {
      _log("Created MBN value is not visible to Organisation Admin");
    }
     else
     {
       _log("Created MBN value is visible to Organisation Admin");
     }
    
	//Log out from app
	logOut();  
}


/*
Function Name 			:   verifyMBNCreatedByDomainAdminIsNotVisibleToOrgMember
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that MBN created by domain admin is not visible to other organization admin
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sMemberName1,$sMemberPassword1, $iMBNValue ,
							$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/

function verifyMBNCreatedByDomainAdminIsNotVisibleToOrgMember
($sURL,$sDomainName1,$sDomainName1_Password,$sMemberName1,$sMemberPassword1, $iMBNValue ,
 $drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly)
{
  
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//Get row count of table
    var $rowCount=_fetch(_table(4).rows.length);
	_log($rowCount);
	//Get table contents 
    var $Contents= _getTableContents(_table(4));

	//Initialise value to 1
    var $i=1;
  
	/************Block to check if given MBN is already existing in the table , if yes means delete *************/
    while($i<$rowCount)
    {
      //Assign value of 4 coulmn to given variable
        var $b=$Contents[$i][4];   
      _log($b);
     //Verify existance of MBN .If yes means delete else means create new one 
      if($iMBNValue==$b)
      {
        //Click on MBN delete link near given MBN
        _click(_link($lnk_DeleteMBN, _near(_div($iMBNValue))));
        
        //Click on Yes button in pop up
        _click(_button($btn_YesForDeleteMBN));
        
         _log("MBN is already existing .Hence deleted");
      }
       $i++;
    }

	//Click on + icon
	_click(_link($icon_PlusAddMBN, _near(_span($icon_Mobile))));

	/*******Actions on Create MBN pop up********************/

	//Click on country drop down to open the drop down
	_click(_select($drp_dwn_CountryId));

	//Select desired value from drop down
	_setSelected(_select($drp_dwn_CountryId), $drp_dwn_MBNCountryId);

	//Click on country drop down to close the drop down
	_click(_select($drp_dwn_CountryId));

	//Enter MBN to create
	_setValue(_textbox($txt_MBNValue), $iMBNValue);

	//Select desired value from Type drop down
	_setSelected(_select($drp_dwn_MBNType), $drp_dwn_MBN_VoiceOnly);
	
	//Click on next button
	_click(_submit($btn_Next));	

	//Click on Create button
	_click(_submit($btn_Create));
 
	/***********Pop up closure****************************/

	//Validate MBN ,Location and type selected after creation
	_assertEqual($iMBNValue, _getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))));
	_assertEqual($drp_dwn_MBNCountryId, _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable)))));
	_assertEqual($drp_dwn_MBN_VoiceOnly, _getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType)))));

	//Log out from app
	logOut();

	/******************************Login as Another Domain Admin****************************/
	loginToSite($sURL,$sMemberName1,$sMemberPassword1);

	_click(_span($sOrgNameToClick));
	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));
  
	//Validate created MBN details are visible to Another domain Admin
    var $iMBNVal=_getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))) ;
    var $sLocationVal= _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable))));
    var $sMBNTyp=_getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType))));	

  	if(($iMBNValue != $iMBNVal) &&($drp_dwn_MBNCountryId != $sLocationVal) && ($drp_dwn_MBN_VoiceOnly != $sMBNTyp))
    {
      _log("Created MBN value is not visible to Organisation Admin");
    }
     else
     {
       _log("Created MBN value is visible to Organisation Admin");
     }
    
	//Log out from app
	logOut();  
}


/*
Function Name 			:   verifyDomainCreatedPolicyIsVisibleToAnotherDomainAdmin
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Policy created by domain admin is visible to other domain admins
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,
							$sDomainName2,$sDomainName2_Password,$sPolicyName,$sPolicyExpiryDate, $sPolicyDescription
*/


function verifyDomainCreatedPolicyIsVisibleToAnotherDomainAdmin($sURL,$sDomainName1,$sDomainName1_Password,
             $sDomainName2,$sDomainName2_Password,$sPolicyName,$sPolicyExpiryDate, $sPolicyDescription)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//Click on + plus icon
	_click(_link($icon_PlusAddMBN, _near(_span($txt_PolicySetheader))));
  
	/**********************Create Policy Pop up*********************************/
	//Enter Policy name
	_setValue(_textbox($txt_GName), $sPolicyName);

	//Enter Policy Expiry Date
	_setValue(_textbox($txt_PolicyExpiryDate), $sPolicyExpiryDate);

	//Enter Policy description	
	_setValue(_textarea($txt_Description), $sPolicyDescription);

	//Click on next button
	_click(_submit($btn_Next));	

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on Add policy
	_click(_button($btn_AddPolicy));
	/*********************Closure of Pop up**************************/
	//Validate display of Created policy
	_assertEqual($sPolicyName, _getText(_link($sPolicyName)));

	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName2,$sDomainName2_Password);

	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//Validate display of Created policy
	_assertEqual($sPolicyName, _getText(_link($sPolicyName)));

	//Log out from app
	logOut();
}

/*
Function Name 			:   verifyDomainCreatedPolicyIsNotVisibleToOrgAdmin
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Policy created by domain admin is not visible to other organization admin
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,
							$sPolicyName,$sPolicyExpiryDate, $sPolicyDescription,$sOrgAdminName1,$sOrgAdminPassword1
*/
function verifyDomainCreatedPolicyIsNotVisibleToOrgAdmin($sURL,$sDomainName1,$sDomainName1_Password,
            $sPolicyName,$sPolicyExpiryDate, $sPolicyDescription,$sOrgAdminName1,$sOrgAdminPassword1)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//Click on + plus icon
	_click(_link($icon_PlusAddMBN, _near(_span($txt_PolicySetheader))));
  
	/**********************Create Policy Pop up*********************************/
	//Enter Policy name
	_setValue(_textbox($txt_GName), $sPolicyName);

	//Enter Policy Expiry Date
	_setValue(_textbox($txt_PolicyExpiryDate), $sPolicyExpiryDate);

	//Enter Policy description	
	_setValue(_textarea($txt_Description), $sPolicyDescription);

	//Click on next button
	_click(_submit($btn_Next));	

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on Add policy
	_click(_button($btn_AddPolicy));
	/*********************Closure of Pop up**************************/
	//Validate display of Created policy
	_assertEqual($sPolicyName, _getText(_link($sPolicyName)));

	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

	_click(_span($sOrgNameToClick));
	//Click on Policy link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//verify created policy should not be visible to org admin
	

	if(_exists(_link($sPolicyName)))
    {
      _log("Created policy is visible");
    }
     else
     {
       _log("Created policy is not visible.Success");
     }

	//Log out from app
	logOut();
} 



/*
Function Name 			:   verifyDomainCreatedPolicyIsNotVisibleToOrgMember
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Policy created by domain admin is not visible to other organization admin
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,
							$sPolicyName,$sPolicyExpiryDate, $sPolicyDescription,$sMemberName1,$sMemberPassword1
*/
function verifyDomainCreatedPolicyIsNotVisibleToOrgMember($sURL,$sDomainName1,$sDomainName1_Password,
            $sPolicyName,$sPolicyExpiryDate, $sPolicyDescription,$sMemberName1,$sMemberPassword1)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//Click on + plus icon
	_click(_link($icon_PlusAddMBN, _near(_span($txt_PolicySetheader))));
  
	/**********************Create Policy Pop up*********************************/
	//Enter Policy name
	_setValue(_textbox($txt_GName), $sPolicyName);

	//Enter Policy Expiry Date
	_setValue(_textbox($txt_PolicyExpiryDate), $sPolicyExpiryDate);

	//Enter Policy description	
	_setValue(_textarea($txt_Description), $sPolicyDescription);

	//Click on next button
	_click(_submit($btn_Next));	

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on Add policy
	_click(_button($btn_AddPolicy));
	
	/*********************Closure of Pop up**************************/
	//Validate display of Created policy
	_assertEqual($sPolicyName, _getText(_link($sPolicyName)));

	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);

	_click(_span($sOrgNameToClick));
	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));

	//verify created policy should not be visible to org admin

	if(_exists(_link($sPolicyName)))
    {
      _log("Created policy is visible");
    }
     else
     {
       _log("Created policy is not visible.Success");
     }

	//Log out from app
	logOut();
} 


/*
Function Name 			:   verifyDomainCreatedReportIsVisibleToAnotherDomainAdmin
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Reports created by domain admin is visible to other domain admins  
*/

function verifyDomainCreatedReportIsVisibleToAnotherDomainAdmin()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Create custom report and verify same
	createCustomReport($lnk_CustomReport,$sReportName,$chk_boxMessageId,$chk_boxMessageStatus,$sToDate,$sToDate1);
	
	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName2,$sDomainName2_Password);
	
	//Click on Reports link
	_click(_link($lnk_Report));

	//Click on Custom Report
	_click(_link($lnk_CustomReport));

	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sReportName)))
	{
      _log("Report added by Domain admin is visible to other domain admin");
    }
	else
    {
      _log("Report added by Domain admin is not visible to other domain admin");
    }
     //Log out from app
	logOut();
}


/*
Function Name 			:   verifyDomainCreatedReportIsVisibleToAnotherDomainAdmin
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Reports created by domain admin is visible to other organization admin  
*/

function verifyDomainCreatedReportIsVisibleToAnotherOrgAdmin()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Reports link
	_click(_link($lnk_Report));
	_wait(2000);
	//Click on Custom Report
	_click(_link($lnk_CustomReport));
	
	_wait(2000);
/*
	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sReportName)))
	{
      //Click on report link
		_click(_link($sReportName));
          
        //Click on delete button  
		_click(_link($btn_ReportDelete));
          
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
		 _wait(4000);
	}

	else
	{
	_log("Creating new one..");
	}*/	
	//Click on + plus icon
	_click(_link($icon_PlusAddGroup, _near(_heading2($txt_CustomReports))));
	_wait(2000);
	/*****************Report creation pop up**********************************/
  
	//Select message option in report type
	_setSelected(_select(0), $sMessageReportType);

	//Enter report title
	_setValue(_textbox($txt_ReportTitle), $sReportName);

	//Enter Report Description
	_setValue(_textarea(0), $sReportName);

	//Click on next button
	_click(_button($btn_Next));

	//Click on Message Id check box
	_click(_checkbox($txt_ReportColName, _in(_div($chk_boxMessageId))));

	//Click on Message Status check box
	_click(_checkbox($txt_ReportColName, _in(_div($chk_boxMessageStatus))));

	//Click on next button
	_click(_button($btn_NextForReport));
/*
	//Click on From text box
	_setValue(_textbox($txt_ToDate), $sToDate);

	//Click on To text box
	_setValue(_textbox($txt_ToDate1), $sToDate1);
	*/
	//Click on Add Report button
	_click(_submit($btn_AddReport));
	_wait(2000);
	/*****************Report creation pop up closure**********************************/
	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);
	
	//Click on Reports link
	_click(_link($lnk_Report));

	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sReportName)))
	{
      _log("Report added by Domain admin is visible to other org admin");
    }
	else
    {
      _log("Report added by Domain admin is not visible to other org admin");
    }
     //Log out from app
	logOut();
}


/*
Function Name 			:   verifyDomainCreatedReportIsVisibleToAnotherOrgMember
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that Reports created by domain admin is visible to other organization member
*/

function verifyDomainCreatedReportIsVisibleToAnotherOrgMember($sDomainName1,$sDomainName1_Password,$sMemberName1,$sMemberPassword1)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Reports link
	_click(_link($lnk_Report));
	_wait(2000);
	//Click on Custom Report
	_click(_link($lnk_CustomReport));
/*
	//Verify whether report name already exists, If yes means delete it.
	if(_isVisible(_link($sReportName)))
	{
      //Click on report link
		_click(_link($sReportName));
          
        //Click on delete button  
		_click(_link($btn_ReportDelete));
          _wait(4000);
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
		 _wait(4000);
	}
	
	else 
	{
	_log("Report name do not exists.....Hence creating new one");
	}
*/
	
	//Click on + plus icon
	_click(_link($icon_PlusAddGroup, _near(_heading2($txt_CustomReports))));
_wait(4000);
	/*****************Report creation pop up**********************************/
  
	//Select message option in report type
	_setSelected(_select(0), $sMessageReportType);

	//Enter report title
	_setValue(_textbox($txt_ReportTitle), $sReportName);

	//Enter Report Description
	_setValue(_textarea(0), $sReportName);

	//Click on next button
	_click(_button($btn_Next));

	//Click on Message Id check box
	_click(_checkbox($txt_ReportColName, _in(_div($chk_boxMessageId))));

	//Click on Message Status check box
	_click(_checkbox($txt_ReportColName, _in(_div($chk_boxMessageStatus))));


	//Click on next button
	_click(_button($btn_NextForReport));
/*
	//Click on From text box
	_setValue(_textbox($txt_ToDate), $sToDate);

	//Click on To text box
	_setValue(_textbox($txt_ToDate1), $sToDate1);*/
	
	//Click on Add Report button
	_click(_submit($btn_AddReport));
	/*****************Report creation pop up closure**********************************/
	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sMemberName1,$sMemberPassword1);
	
	//Click on Reports link
	_click(_link($lnk_Report));

	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sReportName)))
	{
      _log("Report added by Domain admin is visible to other org member\employee\user");
    }
	else
    {
      _log("Report added by Domain admin is not visible to other org member\employee\user");
    }
     //Log out from app
	logOut();
}

/*
Function Name 			:   verifyDomainCreatedContactIsNotVisibleToOthers
Author 	 	    		:	Divya
Created Date 	 	 	:   13th April 2016
Description		   	   	:   This method is Verify that contacts created by domain admin is not visible to other domain admins
Input					:	$sDomainName1,$sDomainName1_Password,$sDomainName2,$sDomainName2_Password
*/


function verifyDomainCreatedContactIsNotVisibleToOthers($sDomainName1,$sDomainName1_Password,$sDomainName2,$sDomainName2_Password,
$sDomainAdminContact1,$sDomainAdminContact2,$sRole)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on My profile
	_click(_link($lnk_MyProfile));
	
	_wait(1000);
	//Click on contacts
	_click(_link($lnk_SContacts, _near(_link($lnk_MyProfile))));
	
	//Click on + icon to add contacts
	_click(_link($plusIcon_Contacts , _near(_heading2($lnk_SContacts))));
	
	
	//Select contacts by clicking on check boxs near by contact names
	_click(_checkbox($sDomainAdminContact1));	
	var $sContactName1=_getText(_strong("ng-binding", _near(_checkbox($sDomainAdminContact1))));
	
	_click(_checkbox($sDomainAdminContact2));
	var $sContactName2=_getText(_strong("ng-binding", _near(_checkbox($sDomainAdminContact2))));

	//Click on Add Members button
	_click(_button($btn_CAddmembers));

	if(_exists(_link($sContactName1)) && _exists(_link($sContactName2)) )
    {
      _log("Added contact is visible");
    }
	else
    {
      _log("Added contact is not visible");
    }

	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName2,$sDomainName2_Password);

	if($sRole==$sOrgRole)
	{
	//change role to organisation
	_click(_span($sOrgNameToClick));
	
	//Click on Contacts under Shortcuts
	_click(_link($lnk_SContacts, _near(_link($lnk_MyProfile))));
	}
	
	else if($sRole==$sDARole)
	{
	//Click on Contacts under Shortcuts
	_click(_link($lnk_SContacts, _near(_link($lnk_MyProfile))));
	}
	
	else if($sRole==$sMemberRole)
	{
	_click(_link($lnk_MContacts));
	}
	

	if(_exists(_link($sContactName1)) && _exists(_link($sContactName2)) )
    {
      _log("Added contact is visible in other domain admin");
    }
	else
    {
      _log("Added contact is not visible in other domain admin");
    }

	//Log out from app
	logOut();
  
}
/*
Function Name 			:   verifyDomainCreatedGroupIsVisibleToAnotherDomain
Author 	 	    		:	Divya
Created Date 	 	 	:   14th April 2016
Description		   	   	:   This method is Verify that user groups  created by domain admin is visible other domain admins
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sDomainName2,$sDomainName2_Password
*/
function verifyDomainCreatedGroupIsVisibleToAnotherDomain($sURL,$sDomainName1,$sDomainName1_Password,
                               $sDomainName2,$sDomainName2_Password )
{

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sGroupTitle)))
	{
      //Click on report link
		_click(_link($sGroupTitle));
          
      //Click on delete button  
		_click(_link($btn_ReportDelete));
          
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
	}

	//Click on + icon
	_click(_link($icon_PlusAddGroup, _near(_heading2($txt_UserGroup))));

	//Enter group title
	_setValue(_textbox($txt_Title), $sGroupTitle);

	//Enter Description
	_setValue(_textarea(0),$sGroupTitle);

	//Click on Next button
	_click(_submit($btn_Next));

	//Click on Add Group
	_click(_submit($btn_Addgroup));

 	//Log out from app
	logOut();

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName2,$sDomainName2_Password);

	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

	//Verify whether report name is visible to other domain admin
	if(_exists(_link($sGroupTitle)))
	{
      _log("Group is visible to other domain admin");
	}
	else
    {
      _log("Group is not visible to other domain admin");
	}

    //Log out from app
	logOut();
}








/*
Function Name 			:   verifyErrorMessagewhenDomainAdminIsBlocked
Author 	 	    		:	Divya
Created Date 	 	 	:   22th April 2016
Description		   	   	:   App should not allow blocked domain admin  to login and error message should display as "Account has been blocked by administrator"  when trying to login.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sBlockDomainAdmin,$sBlockDomainAdminPassword
*/
function verifyErrorMessagewhenDomainAdminIsBlocked($sURL,$sDomainName1,$sDomainName1_Password,$sBlockDomainAdmin,$sBlockDomainAdminPassword)
{

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_click(_link($lnk_UserManagement));

	//Click on Active link
	_click(_link($lnk_UMActive));

	//Click on Domain Admin link
	_click(_strong($lnk_DA));
	
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter last name to search member name
	_setValue(_textbox($txt_MLastName), $sMemberLastName);
	
	//Click on search button
	_click(_submit($btn_Search));
	
	_wait(2000);
	
	if(_isVisible(_div($sDomainAdminNameToBlock)))
    {
      _log("Domain Admin is existing");
      if(_isVisible(_link("/Block Member/", _rightOf(_div($sDomainAdminNameToBlock)))))
      {
          _log("Domain Admin is not blocked");  
			_wait(2000);
          //Click on Block link near Domain Admin Name
          _click(_link("/Block/", _near(_div($sDomainAdminNameToBlock))));

          //Click on Yes on Block Confirmation Pop up
          _click(_button($btn_YesToBlockAdmin));     
			_wait(2000);
          //Verify unblock option is getting displayed under blocked domain admin
          _assertVisible(_link("/Unblock/",_click(_div($sDomainAdminNameToBlock))));
      }
      else
      {
        _log("Contact already blocked .Hence validating error message");       
      }
	  
	  //Log out from app
	logOut();
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sBlockDomainAdmin,$sBlockDomainAdminPassword);

	//Validate the error message of account blocked 
	_assertEqual($sBlockedErrorMessage, _getText(_div($sBlockedErrorMessage)));
    } 
	else
	{
	_log("Domain admin is not existing..");
	logOut();
	}
	
}

/*
Function Name 			:   verifyAdminCanLoginWhenDomainAdminIsUnBlocked
Author 	 	    		:	Divya
Created Date 	 	 	:   22nd April 2016
Description		   	   	:   App should not allow blocked domain admin  to login and error message should display as "Account has been blocked by administrator"  when trying to login.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password, $sBlockDomainAdmin,$sBlockDomainAdminPassword
*/
function verifyAdminCanLoginWhenDomainAdminIsUnBlocked($sURL,$sDomainName1,$sDomainName1_Password,
                                                      $sBlockDomainAdmin,$sBlockDomainAdminPassword)
  {

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));
	
	//Click on search button
	_click(_div($lnk_MSearchIcon));
	
	//Search via email
	_setValue(_textbox($txt_MEmailId), $sBlockDomainAdmin);
	
	//Click on search button
	_click(_submit($submit_Search));
	
		 if(_exists(_div($sDomainAdminNameToUnBlock)))
		 {
			if(_exists(_link("/Unblock/", _rightOf(_div($sDomainAdminNameToUnBlock)))))
			 {
			  _log("Domain Admin is unblocked"); 

			  //Scroll page towards left 
			  var $el=_div("list-view-table-main table-responsive-full clearfix");        
			  _call($el.scrollLeft=300);
		  
			  //Click on Block link near Domain Admin Name
			  _click(_link("/Unblock/", _rightOf(_div($sDomainAdminNameToUnBlock))));

			  //Click on Yes on Block Confirmation Pop up
			  _click(_button($btn_YesToBlockAdmin));     

			  //Verify unblock option is getting displayed under blocked domain admin
			  _assertVisible(_link("/Block/",_click(_div($sDomainAdminNameToUnBlock))));
			
			  //Log out from app
			  logOut();

			  //Call method to login to site with valid credentials
			  loginToSite($sURL,$sBlockDomainAdmin,$sBlockDomainAdminPassword);			
		  }
  	 
		  else
		  {
			  _log("Contact is already unblocked .Hence no action taken");  		
			 
		  }
		  }
		  else
		  {
		  _log("Contact not present");
		  }
		
    	  //Log out from app
			  logOut();
  }   

/*
Function Name 			:   verifyMemberCantLoginWhenDomainAdminHasBlocked
Author 	 	    		:	Divya
Created Date 	 	 	:   25th April 2016
Description		   	   	:   App should not allow blocked domain admin  to login and error message should display as "Account has been blocked by administrator"  when trying to login.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password, $sBlockMember1,$sBlockMember1Pwd
*/
  
function verifyMemberCantLoginWhenDomainAdminHasBlocked($sURL,$sDomainName1,$sDomainName1_Password,
                                     $sBlockMember1,$sBlockMember1Pwd )
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));
	
	//Click on search button
	_click(_div($lnk_MSearchIcon));
	
	//Search via email
	_setValue(_textbox($txt_MEmailId), $sBlockMember1);
	
	//Click on search button
	_click(_submit($submit_Search));

    if(_exists(_div($sBlockMember1)))
        {
          _log("Domain Admin is existing");
          if(_exists(_link("/Block Member/", _rightOf(_div($sBlockMember1)))))
          {
              _log("Domain Admin is not blocked");  

              //Click on Block link near Domain Admin Name
              _click(_link("/Block/", _near(_div($sBlockMember1))));

              //Click on Yes on Block Confirmation Pop up
              _click(_button($btn_YesToBlockAdmin));     

              //Verify unblock option is getting displayed under blocked domain admin
              _assertVisible(_link("/Unblock/",_click(_div($sBlockMember1))));
			  
			   //Log out from app
				logOut();
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sBlockMember1,$sBlockMember1Pwd);

        //Validate the error message of account blocked 
        _assertEqual($sBlockedErrorMessage, _getText(_div($sBlockedErrorMessage)));
          }
          else
          {
            _log("Contact already blocked .Hence validating error message"); 						
          }
        }  
	else
	{
	_log("Contact is not existing");
	}	
	//Log out from app
				logOut();		
  }
  
  
  /*
Function Name 			:   verifyMemberCanLoginWhenDomainAdminHasUnBlocked
Author 	 	    		:	Divya
Created Date 	 	 	:   25th April 2016
Description		   	   	:   App should  allow unblocked employee/user to login.  when trying to login.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password, $sBlockDomainAdmin,$sBlockDomainAdminPassword
*/
function verifyMemberCanLoginWhenDomainAdminHasUnBlocked($sURL,$sDomainName1,$sDomainName1_Password,$sBlockMember1,$sBlockMember1Pwd)
{
//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));

    if(_exists(_span($sMemeberNameToUnBlock)))
        {
          _log("Domain Admin is existing");
          if(_exists(_link("/Unblock/", _rightOf(_div($sMemeberNameToUnBlock)))))
          {
              _log("Domain Admin is  blocked");  

              //Click on Block link near Domain Admin Name
              _click(_link("/Unblock/", _near(_div($sMemeberNameToUnBlock))));

              //Click on Yes on Block Confirmation Pop up
              _click(_button($btn_YesToBlockAdmin));     

              //Verify unblock option is getting displayed under blocked domain admin
              _assertVisible(_link("/Block/",_click(_div($sMemeberNameToUnBlock))));
            
            //Log out from app
            logOut();
            //Call method to login to site with valid credentials
            loginToSite($sURL,$sBlockMember1,$sBlockMember1Pwd);
            
 			//Log out from app
           	logOut();
            
          }
          else
          {
            _log("Contact already unblocked .Hence validating error message");     
              //Log out from app
           		 logOut();
             
          }
        }
		else 
		{
		_log("Contact is not existing");
  //Log out from app
           		 logOut();		
		}
}

  /*
Function Name 			:   verifyDomainAdminCanAccessAllModules
Author 	 	    		:	Divya
Created Date 	 	 	:   25th April 2016
Description		   	   	:   Verify Domain admin should be able to access the all modules
Input					:	$sURL,$sDomainName1,$sDomainName1_Password
*/
function verifyDomainAdminCanAccessAllModules($sURL,$sDomainName1,$sDomainName1_Password)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Verify links under Shortcuts
	_click(_link("/Shortcuts/"));
	_assertEqual("Dashboard", _getText(_link("/Dashboard/")));
	_assertEqual("Profile", _getText(_link("Profile")));
	_assertEqual("Contacts", _getText(_link("/Contacts/")));

	//Verify links under organisation
	_click(_link("/Organizations/"));
	_assertEqual("/All Organizations/", _getText(_link("/All Organizations/")));

	//Verify links under User management
	_click(_link($lnk_UserManagement));
	_assertEqual("/All/", _getText(_link("/All/")));
	_assertEqual("/Active/", _getText(_link("/Active/")));
	_assertEqual("/Pending/", _getText(_link("/Pending/")));
	_assertEqual("/Import/", _getText(_link("/Import/")));

	//Verify links under Configuration
	_click(_link("/Configuration/"));
	_assertEqual("Server Configuration", _getText(_link("Server Configuration")));
	_assertEqual("Secure SMS", _getText(_link("Secure SMS")));

	//Verify links under Devices
	_click(_link("/Devices /"));
	_assertEqual("/All Devices /", _getText(_link("/All Devices /")));
	_assertEqual("/Available /", _getText(_link("/Available /")));
	_assertEqual("/Assigned /", _getText(_link("/Assigned /")));

	//Verify links under Groups
	_click(_link("/Groups /"));
	_assertEqual("/User Groups /", _getText(_link("/User Groups /")));
	_assertEqual("/Policy Groups /", _getText(_link("/Policy Groups /")));
	_assertEqual("/Contact Groups /", _getText(_link("/Contact Groups /")));
             
	//Verify links under MBN Management
     _click(_link("/MBN Management /"));
	 _assertEqual("/All MBN's /", _getText(_link("/All MBN's /")));
	 _assertEqual("/Import /", _getText(_link("/Import /")));

	//Verify links under Policies
	_click(_link("/Policies /"));
	 _assertEqual("/Policy Sets /", _getText(_link("/Policy Sets /")));
	 _assertEqual("/Drafts /", _getText(_link("/Drafts /")));

	//Verify links under Reports
	_click(_link("/Reports /"));
	 _assertEqual("/Custom Report /", _getText(_link("/Custom Report /")));
	 _assertEqual("/System Report /", _getText(_link("/System Report /")));

	//Verify links under User Roles
	_click(_link("/User Roles /"));
	_assertEqual("/Organization Admin /", _getText(_link("/Organization Admin /")));
	_assertEqual("/Member /", _getText(_link("/Member /")));
	_assertEqual("/Domain Admin /", _getText(_link("/Domain Admin /")));

	//Log out from app
	logOut();
}
  /*
Function Name 			:   verifyDomainAdminCanCreateMembers
Author 	 	    		:	Divya
Created Date 	 	 	:   25th April 2016
Description		   	   	:   Verify Domain admin can create members
*/
function verifyDomainAdminCanCreateMembers()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_wait(10000,_isVisible(_link($lnk_UserManagement)));
	
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));
	
	_wait(2000);
	
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter last name to search member name
	_setValue(_textbox($txt_MEmailId), $dEmail);
	
	//Click on search button
	_click(_submit($btn_Search));
	
	//Check existance of member 
    if(_exists(_div($dEmail)))
    {	
       var $el=_div($div_ScrollLeft);        
	   _call($el.scrollLeft=300);
      
      //Click on delete icon near by member name
      _click(_link($btn_UMDelete, _near(_div($dEmail))));

       //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
    }
	else
	{
	_log("Member do not exist");
	}
	//Click on + icon
	_wait(6000,_isVisible(_link($icon_plus, _near(_heading2($txt_All)))));
	_click(_link($icon_plus, _near(_heading2($txt_All))));

	//Enter Member first name
	_setValue(_textbox($txt_FirstName),$sMemberFirstName);

	//Enter Member last name
    _setValue(_textbox($txt_LastName), $sMemberLastName);

	//Enter member title
    _setValue(_textbox($txt_Title),$sMemberTitle);

	//select location
    _setSelected(_select($txt_MemberLocation),$sMemberLocation);

	//Enter zip code
    _setValue(_textbox($txt_MemberZipCode),$sMemberZipCode);

	//Enter member email
    _setValue(_textbox($txt_MemberEmail), $dEmail);
	
	//Enter phone number
	_setValue(_textbox($txt_PhoneNumber), $iPhoneNumber);	

	//Click on create button
    _click(_submit($btn_MemberCreate));
	
	_wait(2000);
	/*
	//Validation 1: Domain admin should be able to add an user successfully.
	
    _assertVisible(_heading2("Congratulations! Member has been created."));   
*/
	//Click on close button
	_wait(10000,_isVisible(_button($btn_MemberClose)));
    _click(_button($btn_MemberClose));
	
	//Validation 2: Details entered while creating should be displayed    
    _assertEqual($dEmail, _getText(_div($dEmail)));
	_assertEqual($sMemberLocation, _getText(_div($txtVerify_Country)));
	
	_wait(2000);
	
	//Click on Pending link under User management
	_click(_link("/Pending/"));
	
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter last name to search member name
	_setValue(_textbox($txt_MEmailId), $dEmail);
	
	//Click on search button
	_click(_submit($btn_Search));
	_wait(2000);
	
	//Validate 3: existance of member in table
    if(_exists(_div($dEmail)))
    {	
      _log("Created member exists in User management Pending section..");
    }

	else
	{
	 _log("Created member do not exists in User management Pending section..");	
    }

	//Log out from app
      logOut();
}
  /*
Function Name 			:   verifyDomainAdminCanCreateOrg
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin should be able to add  an 'organizations' successfully and Newly created organization should be  
							displayed on the 'User Roles' module
*/
/*
function verifyDomainAdminCanCreateOrg()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Organisation link
	_click(_link($lnk_Organisation));

	//Click on All Organisation sub link
	_click(_link($lnk_AllOrg, _near(_link($lnk_Organisation))));
	
	_wait(2000);
	
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter last name to search member name
	_setValue(_textbox($txt_ONameTosearch), $sNewOrgName2);
	
	//Click on search button
	_click(_submit($btn_Search));
	
	//Verify existance of org-if yes then delete it 
	if(_isVisible(_div($sNewOrgName2)))
       {
         //Click on delete icon
       _click(_italic($btn_DeleteAllUserOption, _near(_div($sNewOrgName2))));
         
          //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
       }
	   else{
	   _log("Org name is not existing before");
	   }

	//Click on + icon to create new organisation
	_click(_link($icon_PlusOrg, _near(_heading2($txt_AllOrg))));

	//Enter org name
    _setValue(_textbox($txt_GName), $sNewOrgName2);

	//Enter org type
    _setValue(_textbox($txt_OrgType), $sNewOrgType);

	//Select desired country 
    _setSelected(_select($drp_dwn_OrgLocationId), $sNewOrgLocation);

	//Enter Zip code
    _setValue(_textbox($txt_MemberZipCode), $sNewOrgZipCode);

	//Click on Submit button
    _click(_submit($btn_Submit));

	//click on create button to create new organisation
    _click(_submit($btn_MemberCreate));

   //Click on close button
    _click(_button($btn_MemberClose));
	
	_wait(1000);

	//Validate that Domain admin should be able to add  an 'organizations' successfully. 
	_assertEqual($sOrgCreatedSuccessMessage, _getText(_div($sOrgCreatedSuccessMessage)));

	//Click on user roles link
    _click(_link($lnk_UR));

	//Click on Organization Admin
    _click(_link($lnk_OA));

	//Validate Newly created organization should be  displayed on the 'User Roles' module	
    _assertEqual($sNewOrgName2, _getText(_link($sNewOrgName2)));
	//Log out from app
      logOut();
}
*/
  /*
Function Name 			:   verifyMembersRIncludedWhileCreatingOrg
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Members included for the organization must be listed  under 'Member' tab for the organization created by domain admin.
*/

function verifyMembersRIncludedWhileCreatingOrg()
{	
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Organisation link
	_click(_link($lnk_Organisation));

	//Click on All Organisation sub link
	_click(_link($lnk_AllOrg, _near(_link($lnk_Organisation))));

	_wait(2000);
	
	//Verify existance of org-if yes then delete it 
	
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter First name to search member name
	_setValue(_textbox($txt_ONameTosearch), $sNewOrgName1);
	
	//Click on search button
	_click(_submit($btn_Search));
	
	if(_exists(_div($sNewOrgName1)))
       {
		_log("Organisation name already exists .Hence deleting it")	;
			
         //Click on delete icon
       _click(_italic($btn_DeleteAllUserOption, _near(_div($sNewOrgName1))));
         
          //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
       }
	   else
	   {
	   _log("Organisation name do not exists .Hence creating it");
	   }

	//Click on + icon to create new organisation
	_click(_link($icon_PlusOrg, _near(_heading2($txt_AllOrg))));

	//Enter org name
    _setValue(_textbox($txt_GName), $sNewOrgName1);

	//Enter org type
    _setValue(_textbox($txt_OrgType), $sNewOrgType);

	//Select desired country 
    _setSelected(_select($drp_dwn_OrgLocationId), $sNewOrgLocation);

	//Enter Zip code
    _setValue(_textbox($txt_MemberZipCode), $sNewOrgZipCode);

	//Click on Submit button
    _click(_submit($btn_Submit));
	
	//Select first two members by clicking on check box
	_click(_checkbox("on[1]"));
	var $mname1=_getText(_strong(0, _near(_checkbox("on[1]"))));
	_log($mname1);

	_click(_checkbox("on[2]"));
	var $mname2=_getText(_strong("ng-binding", _near(_checkbox("on[2]"))));
	_log($mname2);
	//click on create button to create new organisation
    _click(_submit($btn_MemberCreate));

   //Click on close button
    _click(_button($btn_MemberClose));
	
	_wait(1000);

	//Validate that Domain admin should be able to add  an 'organizations' successfully. 
	_assertEqual($sOrgCreatedSuccessMessage, _getText(_div($sOrgCreatedSuccessMessage)));
	
	//Validate Newly created organization should be  displayed on the Organisation table
    _assertEqual($sNewOrgName1, _getText(_div($sNewOrgName1)));

	//Click on Newly created Organisation name
	_click(_div( $sNewOrgName1));

    //Click on Company Details tab
    _click(_link($tab_OrgCompDetails));

	//Validate the details present under this tab with details entered while creating
    _assertEqual($sNewOrgName1, _getText(_span($sNewOrgName1)));
    _assertEqual($sNewOrgType, _getText(_span($sNewOrgType)));
    _assertEqual($sNewOrgLocation, _getText(_span($sNewOrgLocation)));
    _assertEqual($sNewOrgZipCode, _getText(_span($sNewOrgZipCode)));

	_click(_link($tab_OrgMembers));
	_assertExists(_div($mname1));
	//_assertExists(_div($mname2));

	//Log out from app
      logOut();
}
  /*
Function Name 			:   verifyDomainAdminCanAddUserGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin can add  a ' User Groups' successfully.
*/

function verifyDomainAdminCanAddUserGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

	_wait(2000);
	
	_call(_div($div_VerticalScrollBar).scrollTop=2000); 
	
	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sGroupTitle)))
	{
      //Click on report link
		_click(_link($sGroupTitle));
          
      //Click on delete button  
		_click(_italic($btn_ReportDelete));
          
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
	}
	else
	{
	_log("Group not existing .Hence creating new one");
	}

	//Click on + icon
	_click(_link($icon_PlusAddGroup));

	//Enter group title
	_setValue(_textbox($txt_Title), $sGroupTitle);

	//Enter Description
	_setValue(_textarea(0),$sGroupTitle);

	//Click on Next button
	_click(_submit($btn_Next));
/*
	//Select first two members by clicking on check box 
	_click(_checkbox("on[1]"));	

	_click(_checkbox("on[2]"));	
*/
	//Click on Add Group
	_click(_submit($btn_Addgroup));
	
	_wait(2000);

    //Validate existance of created group
    _assertEqual($sGroupTitle, _getText(_link($sGroupTitle)));

	//Log out from app
      logOut();
}

 /*
Function Name 			:   verifyExistanceofMembersAddedWhileCreatingUserGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin can add  a ' User Groups' successfully.
*/
function verifyExistanceofMembersAddedWhileCreatingUserGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

	_wait(2000);
	
	_call(_div($div_VerticalScrollBar).scrollTop=2000); 
	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sGroupTitle1)))
	{
      //Click on report link
		_click(_link($sGroupTitle1));
          
      //Click on delete button  
		_click(_italic($btn_ReportDelete));
          
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
	}
	else
	{
	_log("Group not existing .Hence creating new one");
	}

	//Click on + icon
	_click(_link($icon_PlusAddGroup));

	//Enter group title
	_setValue(_textbox($txt_Title), $sGroupTitle1);

	//Enter Description
	_setValue(_textarea(0),$sGroupTitle1);

	//Click on Next button
	_click(_submit($btn_Next));

	//Select first two members by clicking on check box
	_click(_checkbox("on[1]"));
	var $mname1=_getText(_strong("ng-binding", _near(_checkbox("on[2]"))));

	_click(_checkbox("on[2]"));
	var $mname2=_getText(_strong("ng-binding", _near(_checkbox("on[3]"))));

	//Click on Add Group
	_click(_submit($btn_Addgroup));

	_wait(2000);
	//Click on newly created group
	_click(_link($sGroupTitle1));

	//Validate existance of added members while 
	_assertExists(_div($mname1));
	//_assertExists(_div($mname2));

	//Log out from app
     logOut();
  
}

 
 /*
Function Name 			:   verifyDomainAdminCreateContactGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin can add  a ' Contact Groups' successfully.
*/
function verifyDomainAdminCreateContactGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Call method to create Contact group
	createContactGroup($sContactGroupTitle);
	
	//Log out from app
    logOut();
}
 /*
Function Name 			:   verifyExistanceofMembersAddedWhileCreatingContactGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Members included for the contact  group should be displayed under contact  group.
*/
function verifyExistanceofMembersAddedWhileCreatingContactGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Call method to create Contact group
	createContactGroup($sContactGroupTitle1);

	//Click on newly created group
	_click(_link($sContactGroupTitle1));

	//Validate existance of added members while 
	//_assertExists(_div($Contactmembername1));
	//_assertExists(_div($Contactmembername2));

    //Log out from app
    logOut();
}


 /*
Function Name 			:   createPolicyGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin can add  a ' Contact Groups' .
*/
function createPolicyGroup($lnk_Groups,$lnk_PG,$sPolicyGroupTitle,$txt_PolicyHeader)
{
	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on Policy groups
	_click(_link($lnk_PG));
		_wait(2000);
	
	_call(_div($div_VerticalScrollBar).scrollTop=2000); 
	
	//Verify whether report name already exists, If yes means delete it.
	if(_exists(_link($sPolicyGroupTitle)))
	{
      //Click on report link
		_click(_link($sPolicyGroupTitle));
          
      //Click on delete button  
		_click(_italic($btn_ReportDelete));
          
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
	}
	_wait(2000);
	
	//click on + icon
	_click(_link($icon_PlusAddGroup));
	
	_wait(2000);
	//Enter group title
	_setValue(_textbox($txt_Title), $sPolicyGroupTitle);

	//Enter description
	_setValue(_textarea(0),$sPolicyGroupTitle);
	
	//Click on next pages
	_click(_link(1));
	
	_click(_italic("fa fa-angle-double-right"));
	
	//Select first two members by clicking on check box
	_click(_checkbox("on[4]"));
	 $Contactmembername1=_getText(_strong("ng-binding", _near(_checkbox("on[1]"))));

	_click(_checkbox("on[5]"));
	 $Contactmembername2=_getText(_strong("ng-binding", _near(_checkbox("on[2]"))));
	 
	//Click on Next button
	_click(_submit($btn_Next));

	_wait(2000);
	//Click on Add Group
	_click(_submit($btn_Addgroup)); 	
}


/*
Function Name 			:   verifyExistanceofMembersAddedWhileCreatingPolicyGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:  Members included for the contact  group should be displayed under contact  group.
*/
function verifyExistanceofMembersAddedWhileCreatingPolicyGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Call method to create Policy group
	createPolicyGroup($lnk_Groups,$lnk_PG,$sPolicyGroupTitle1,$txt_PolicyHeader);

	//Click on newly created group
	_click(_link($sPolicyGroupTitle1));

	//Validate existance of added members while 
	//_assertExists(_div($Contactmembername1));
	//_assertExists(_div($Contactmembername2));

    //Log out from app
    logOut();
}


 /*
Function Name 			:   verifyDomainAdminCreatePolicyGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin can add  a ' Policy Groups' successfully.
*/
function verifyDomainAdminCreatePolicyGroup()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Call method to create policy group
	createPolicyGroup($lnk_Groups,$lnk_PG,$sPolicyGroupTitle,$txt_PolicyHeader);
	
	//Scroll Veritically
	_call(_div($div_VerticalScrollBar).scrollTop=2000); 
	
	_assertEqual($sPolicyGroupTitle, _getText(_link($sPolicyGroupTitle)));
    //Log out from app
    logOut();
}

 /*
Function Name 			:   searchForMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Search for MBN in search criteria
*/
function searchForMBN($iMBNValue)
{
	//Click on search button
	_click(_div($btn_SearchSL, _near(_div($lnk_MBN_All))));

	//Enter MBN to search
	_setValue(_textbox($txt_MBN), $iMBNValue);

	//Click on search button
	_click(_submit($btn_Search));
}


 /*
Function Name 			:   createMBNWithGivenType
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Create MBN with given type
Input					: 	$iMBNValue,$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/
function createMBNWithGivenType($iMBNValue,$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly,$radio_MBNAssignToMember1)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	_wait(2000);
	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//Check existance of MBN before creating it by calling method to search MBN 	
	searchForMBN($iMBNValue);

	if(_exists(_div($iMBNValue)))
    {
      _log("MBN is already existing .Hence deleting it");
      
      //Click on delete icon near MBN
      _click(_link($lnk_DeleteMBN, _near(_div($iMBNValue))));
      
      //Click on Yes button
        _click(_button($btn_YesForDeleteMBN));
      
      //Click on Reset button
      _click(_submit($btn_Reset));
	  _wait(2000);
	  
    } 
	else
    {
       _log("MBN is not existing");
      _click(_submit($btn_Reset));
    }

	//Call method to create MBN	
	createMBN($drp_dwn_CountryId,$iMBNValue,$drp_dwn_MBN_VoiceOnly,$radio_MBNAssignToMember1); 
	
	//method to search MBN 
	searchForMBN($iMBNValue);

	//Validate MBN ,Location and type selected after creation
	_assertEqual($iMBNValue, _getText(_div($iMBNValue, _near(_link($lnk_MBNInTable)))));
	_assertEqual($drp_dwn_MBNCountryId, _getText(_div($drp_dwn_MBNCountryId, _near(_link($lnk_LocationInTable)))));
	_assertEqual($drp_dwn_MBN_VoiceOnly, _getText(_div($drp_dwn_MBN_VoiceOnly, _near(_link($drp_dwn_MBNType)))));

	//Log out from app
	logOut();
  
}
 /*
Function Name 			:   createMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Create MBN with given type
Input					: 	$iMBNValue,$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/
function createMBN($drp_dwn_CountryId,$iMBNValue,$drp_dwn_MBN_VoiceOnly,$radio_MBNAssignToMember1)
{
//Click on + icon
	_click(_link($icon_PlusAddMBN, _near(_span($icon_Mobile))));

	/*******Actions on Create MBN pop up********************/
	_wait(2000);
	//Click on country drop down to open the drop down
	_click(_select($drp_dwn_CountryId));

	//Select desired value from drop down
	_setSelected(_select($drp_dwn_CountryId), $drp_dwn_MBNCountryId);

	//Click on country drop down to close the drop down
	_click(_select($drp_dwn_CountryId));

	//Enter MBN to create
	_setValue(_textbox($txt_MBNValue), $iMBNValue);

	//Select desired value from Type drop down
	_setSelected(_select($drp_dwn_MBNType), $drp_dwn_MBN_VoiceOnly);
	
	//Select provider 
	_setSelected(_select($drp_dwn_Vendor), $sVendorTypeD);
	
	//Click on next button
	_click(_submit($btn_Next));	

	//Select a member for MBN
	//_click(_radio($radio_MBNAssignToMember1));
	
	//Click on Create button
	_click(_submit($btn_Create));
	/***********Pop up closure***************************/
 
}
 /*
Function Name 			:   verifyCannotCreateDuplicatedMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   verify App should not allow domain admin  to create duplicate MBN  with same country and same MBN type.
Input					: 	$sURL,$sDomainName1,$sDomainName1_Password,$iMBNValue,$drp_dwn_MBNCountryId,$drp_dwn_MBN_VoiceOnly
*/

function verifyCannotCreateDuplicatedMBN($sURL,$sDomainName1,$sDomainName1_Password,$drp_dwn_CountryId,
                                         $iMBNValue,$drp_dwn_MBN_VoiceOnly)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//Call method to create MBN	
	createMBN($drp_dwn_CountryId,$iMBNValue,$drp_dwn_MBN_VoiceOnly,$radio_MBNAssignToMember1); 
	
	//Validate existance of error message
	_assertEqual($sDuplicatedMBNErrorMsg, _getText(_div($sDuplicatedMBNErrorMsg)));

	//Click on x to close Create MBN pop up
	_click(_span($icon_CrossMBNPopup));

	//Log out from app
	logOut();
}

 /*
Function Name 			:   verifyDACanUnassignMembersInMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to  unassign the employee/user who has associated with MBN
*/

function verifyDACanUnassignMembersInMBN()
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//method to search MBN 
	searchForMBN($iMBNValue);

	if(_exists(_div($iMBNValue)))
	{
	//Click on MBN link
	_click(_div($iMBNValue));

    //Click on Assigned To Tab
    _click(_link($tab_MBNAssignedTo));

	//Click on + to assign member
	_click(_link($lnk_MBNAssignMember));

	//Select first Item in the list
	_click(_radio($radio_MBNSelectMember,_near(_strong($txt_MBnSelectMember))));

	var $MBNAddMember=_getText(_strong($txt_MBnSelectMember, _near(_radio($radio_MBNSelectMember))));

	//Click on change button
	_click(_button($btn_MBNOwnerChange));

    if(_exists(_div($MBNAddMember)))
    {
      //Click on Unassign button
        _click(_link($btn_MBNUnassign));

        //Click on Yes button
       _click(_button($btn_YesForDeleteMBN));
      
      //Validate the success message
	_assertEqual($sMBNOwnerChangedMessage, _getText(_div($sMBNOwnerChangedMessage)));
    }
	}
	else
	{
	_log("MBN is not existing...");
	}
	//Log out from app
	logOut();
}
  
 /*
Function Name 			:   createPolicySet
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to  unassign the employee/user who has associated with MBN
Input					:	$sPolicyName,$sPolicyExpiryDate,$sPolicyDescription
*/
  function createPolicySet($sPolicyName,$sPolicyExpiryDate,$sPolicyDescription)
  {
  	//Click on Groups link
	_click(_link($lnk_Policies));

	//Click on Policy link
	_click(_link($lnk_PolicySet));
	
	_wait(2000);
	//check existance of policy set, if yes means delete
	  if(_exists(_link($sPolicyName)))
	  {				
		  //Click on Policy set
		  _click(_link($sPolicyName));
		  
		  //Click on delete button
		  _click(_italic($btn_ReportDelete));
		  
		  _wait(2000);
		  //click on yes button in pop up
		   _click(_button($btn_YesForDeleteMBN));
		   
		   _log("Policy set already exists .Hence deleted");
	  }
  	_wait(4000);
	
	//Click on + plus icon
	_click(_link($icon_PlusAddMBN, _near(_span($txt_AllPolicy))));
	
	_wait(2000);
	/**********************Create Policy Pop up*********************************/
	//Enter Policy name
	_setValue(_textbox($txt_GName), $sPolicyName);

	//Enter Policy Expiry Date
	_setValue(_textbox($txt_PolicyExpiryDate), $sPolicyExpiryDate);

	//Enter Policy description	
	_setValue(_textarea($txt_Description), $sPolicyDescription);

	//Click on next button
	_click(_submit($btn_Next));	

	//Click on include for Data storage interval
	_click(_checkbox($chk_Box_ON, _near(_cell($txt_DataStorageInterval))));
	
	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));

	//Click on next button
	_click(_button($btn_Next));
	
	var $memname=$sPolicyName;
	
	//_click(_checkbox($chk_Box_ON, _near(_strong($sPolicyName))));

	//Click on next button
	_click(_button($btn_Next));
	
	//select member
	//_click(_checkbox("on[41]"));
	
	//Click on Add policy
	_click(_button($btn_AddPolicy));	
	
	/*********************Closure of Pop up************************/
	//Validate display of Created policy
	_assertEqual($sPolicyName, _getText(_link($sPolicyName)));
  }
/*
Function Name 			:   verifyDomainAdminCanCreatePolicySetwithMembersAndGroups
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin can create policy set and assign members as well as add group name 
*/
function verifyDomainAdminCanCreatePolicySetwithMembersAndGroups()
{
  
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Create a policy set 
	createPolicySet($sPolicyName,$sPolicyExpiryDate,$sPolicyDescription);

	//Log out from app
	logOut();
} 
 /*
Function Name 			:   verifyDACanUnassignMembersInGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin can create policy set and assign members as well as add group name 
							Members unassigned for the user group is removed from the user group.
Input					:   $sURL,$sDomainName1,$sDomainName1_Password,$lnk_UserGroup,$sGroupTitle
*/ 

function verifyDACanUnassignMembersInGroup($sURL,$sDomainName1,$sDomainName1_Password,$lnk_UserGroup,$sGroupTitle)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

  	//Check exitsance of group 
    if(_exists(_link($sGroupTitle)))
    {
      _log("Group already exists .Hence unassigning members");
      
      //Click on group 
      _click(_link($sGroupTitle));
      
    // _click(_link("Unassign", _near(_span("Anantha N"))));
      
      if(_exists(_link($lnk_GUnassign)))
      {
        //Click on unassign link
      _click(_link($lnk_GUnassign));
      
      //Click on Yes button
       _click(_button($btn_YesForDeleteMBN));
      }
    }
	//Log out from app
    logOut();  
} 
 /*
Function Name 			:   verifyDACanAssignMembersInGroup
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to assign more members to the existing user group
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$lnk_UserGroup,$chckbox_Gon
*/ 

function verifyDACanAssignMembersInGroup($sURL,$sDomainName1,$sDomainName1_Password,$lnk_UserGroup,$sGroupTitle,$chckbox_Gon)
{

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Groups link
	_click(_link($lnk_Groups));

	//Click on User groups link
	_click(_link($lnk_UserGroup));

  	//Check exitsance of group 
    if(_isVisible(_link($sGroupTitle)))
    {         
      //Click on group 
      _click(_link($sGroupTitle));  
       
      //click on + to add members 
     _click(_link($icon_PlusUpdateMembers));
      
	  if(_isVisible(_checkbox($chckbox_Gon)))
	  {
      //Click on all name check box
      _click(_checkbox($chckbox_Gon));
      /*
		  if(_getAttribute(_button("Add Members"),"disabled")==false)
		  {
		  //Click on add members button
		  _click(_button($btn_GAddMembers));
		  
		  //Validate success message
		  _assertEqual($sGMAssignedMsg, _getText(_div($txt_AssignedMemberUpdateMsg)));
		  }    
		  else
		  {
		  _log("Searched Group do not exists....... ");		  
		  _click(_button($btn_CrossMark))
		  }*/
		  
		   //Click on add members button
		  _click(_button($btn_GSave));
	  }
	  else
	  {
		_log("Member is not existing");
		_click(_button($btn_CrossMark));
	  }
      
    }
	else
	{
	_log("Group title is not existing to assign member..");
	}
	//Log out from app
    logOut();  
  
}
 /*
Function Name 			:   createCustomReport
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Create custom report and verify same
Input					:	$lnk_CustomReport,$sReportName,$chk_boxMessageId,$chk_boxMessageStatus,$sToDate,$sToDate1
*/ 

function createCustomReport($lnk_CustomReport,$sReportName,$chk_boxMessageId,$chk_boxMessageStatus,$sToDate,$sToDate1)
{

	//Click on Reports link
	_click(_link($lnk_Report));

	//Click on Custom Report
	_click(_link($lnk_CustomReport));

	 _wait(3000);
	//Verify whether report name already exists, If yes means delete it.
	if(_isVisible(_link($sReportName)))
	{
      //Click on report link
		_click(_link($sReportName));
          
        //Click on delete button  
		_click(_italic($btn_ReportDeleteOption));
          
		  _wait(3000);
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
		 
		 _wait(1000);
	}

	//Click on + plus icon
	_click(_link($icon_PlusAddGroup));

	/*****************Report creation pop up**********************************/
  
	//Select message option in report type
	//_setSelected(_select(0), $sMessageReportType);

	//Enter report title
	_setValue(_textbox($txt_ReportTitle), $sReportName);

	//Enter Report Description
	//_setValue(_textarea(0), $sReportName);

	_wait(1000);
	//Click on next button
	_click(_submit(0));

	//Click on Message Id check box
	_click(_checkbox($chckbx_ReportType, _in(_div($chk_boxMessageId))));	

	//Click on Message Status check box
	_click(_checkbox($chckbx_ReportType, _in(_div($chk_boxMessageStatus))));

	//Click on next button
	_click(_button($btn_NextForReport));
/*
	//Click on From text box
	_setValue(_textbox($txt_ToDate), $sToDate);

	//Click on To text box
	_setValue(_textbox($txt_ToDate1), $sToDate1);*/
	
	//Click on Add Report button
	_click(_submit($btn_AddReport));
	/*****************Report creation pop up closure**********************************/
	
	_wait(5000);
	//Validate the existance of created report
	_assertEqual($sReportName, _getText(_link($sReportName)));	
}
  
   /*
Function Name 			:   verifyDACanAddContacts
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to add  'Contacts' successfully .
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sContactName1,$sContactName2
*/ 
  
  function verifyDACanAddContacts($sURL,$sDomainName1,$sDomainName1_Password,$sContactName1,$sContactName2)
{
  	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Contacts under Shortcuts
	_click(_link($lnk_SContacts, _near(_link($lnk_MyProfile))));

	_wait(1000);
	//Search whether is already existing
	searchContacts($sContactName1);
	searchContacts($sContactName2);

	//Click on + icon to add contacts
	_click(_link($icon_PlusAddGroup, _near(_heading2($lnk_Contacts))));

	//Search for given Contact name
	_setValue(_textbox($txt_GName), $sContactNameSearch);

	//Click on apply button
	_click(_button($btn_Apply));

	//Select contacts by clicking on check boxs near by contact names
	_click(_checkbox($chkbox_OnStatus, _near(_strong($sContactName1))));
	//_click(_checkbox($chkbox_OnStatus, _near(_strong($sContactName2))));

	//Click on Add Members button
	_click(_button($btn_GSave));

	if((_exists(_link($sContactName1))) 
	/*&& (_exists(_link($sContactName2)) */))
    {
      _log("Added contact is visible");
    }
	else
    {
      _log("Added contact is not visible");
    }

	//Log out from app
	logOut();
}
 /*
Function Name 			:   searchContacts
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Search contact by given name, if existing means delete it
Input					:	$sContactName1
*/ 
function searchContacts($sContactName1)
{
  //check existance of contact
	if(_exists(_link($sContactName1)))
       {
       
         //Click on contact name
       _click(_link($sContactName1));

         //Click on delete button	
		_click(_link($btn_ContactDelete));

		//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));

       }
}
 /*
Function Name 			:   verifyDACanUpdateMember
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to edit an user successfully.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sMFNToSearch,$sMemberToEdit
*/ 

function verifyDACanUpdateMember($sURL,$sDomainName1,$sDomainName1_Password,$sMFNToSearch,$sMemberToEdit)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));

		_wait(1000);

	//Click on search icon
    _click(_div($lnk_MSearchIcon));

	//Enter first name to search
    _setValue(_textbox($txt_MFirstName),$sMFNToSearch);

	//Click on search button
    _click(_submit($btn_Search));

	//Check existance of member 
    if(_exists(_div($sMemberToEdit)))
    {
       var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);
      
      //Click on delete icon near by member name
      _click(_link($btn_MEdit, _near(_div($sMemberToEdit))));
	  
	  //Clear the content and edit the last name
	   _setValue(_textbox($txt_LastName), "");
	  _setValue(_textbox($txt_LastName), "Test28");

       //Click on Yes on Block Confirmation Pop up
      _click(_submit($btn_MUpdate));
      
      //Validate existance of member updated success message
      _assertEqual($sUpdatedMemberSuccessMessage, _getText(_div($sUpdatedMemberSuccessMessage)));	  
	
    }

	//Log out from app
    logOut();
}


 /*
Function Name 			:   verifyDACanEditOrg
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to edit  an 'organizations' successfully.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sContactNameSearch,$sOrgNameToEdit,$sOrgNameToEdit
*/ 

function verifyDACanEditOrg($sURL,$sDomainName1,$sDomainName1_Password,$sContactNameSearch,$sOrgNameToEdit,
                            $sOrgNameToEdit1)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	_wait(2000);
	//Click on Organisation link
	_click(_link($lnk_Organisation));

	//Click on All Organisation sub link	
	_click(_link($lnk_AllOrg, _near(_link($lnk_Organisation))));
	
	_wait(2000);
	//Click on search icon
    _click(_div($lnk_MSearchIcon));

	//Enter  name to search
    _setValue(_textbox($txt_ONameTosearch), $sContactNameSearch);

	//Click on search button
    _click(_submit($btn_Search));

	//Check existance of member 
    if(_exists(_div($sOrgNameToEdit)))
    {
       var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);
      
      //Click on delete icon near by member name
      _click(_link($btn_Edit, _near(_div($sOrgNameToEdit))));
      
      //Clear the content on name
		_setValue(_textbox($txt_GName), "");
      //Edit the name
      _setValue(_textbox($txt_GName), $sOrgNameToEdit1);

       //Click on Yes on Block Confirmation Pop up
      _click(_submit($btn_MUpdate));
      
      //Validate existance of member updated success message
      _assertEqual($sOrgEditedSuccessMessage, _getText(_div($sOrgEditedSuccessMessage)));
    }
	//Log out from app
    logOut();
  
}

 /*
Function Name 			:   verifyDACanDeleteOrganisation
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:  	Domain admin should be able to delete  an 'organizations' successfully.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password, $sOrgNameToDelete
*/ 
function verifyDACanDeleteOrganisation($sURL,$sDomainName1,$sDomainName1_Password, $sOrgNameToDelete)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on Organisation link
	_click(_link($lnk_Organisation));

	//Click on All Organisation sub link
	_click(_link($lnk_AllOrg, _near(_link($lnk_Organisation))));

	//Click on search icon
    _click(_div($lnk_MSearchIcon));

	//Enter  name to search
    _setValue(_textbox($txt_ONameTosearch), $sOrgNameToDelete);

	//Click on search button
    _click(_submit($btn_Search));

	//Check existance of member 
    if(_exists(_div($sOrgNameToDelete)))
    {
       var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);    
            
      //Delete org
      _click(_link($btn_ODelete));

    	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
      
      //Validate success message after deletion
      _assertEqual($sOrgDeletedSM, _getText(_div($sOrgDeletedSM)));
    }
    else
    {
      _log("Org is not existing ");
    }
	//Log out from app
   logOut();
}
 


/*
Function Name 			:   verifyDACanEditMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:  	Domain admin should be able to edit  'MBN'
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sMBNValueToEdit
*/ 

function verifyDACanEditMBN($sURL,$sDomainName1,$sDomainName1_Password,$sMBNValueToEdit)
{

	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//method to search MBN 
	searchForMBN($sMBNValueToEdit);
	_wait(2000);
	
	//Click on MBN link
    if(	_exists(_div($sMBNValueToEdit)))
    {
      //Click on edit button
        _click(_link($btn_EditMBN));

        //Clear and edit the MBN
        _setValue(_textbox($txt_MBNValue), "");
		_wait(2000);
        _setValue(_textbox($txt_MBNValue), $sMBNValueToEdit);
      
      	//Click on Update 
        _click(_submit($btn_MUpdate));
      
      //Validated the edit MBN
      _assertEqual($sMBNValueToEdit, _getText(_div($sMBNValueToEdit)));
    }
    else
    {
      _log("MBN is not existing.Hence not edited");
    }

	//Log out from app
	logOut();
}

/*
Function Name 			:   verifyDACanDeleteMBN
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:  	Domain admin should be able to delete  'MBN'
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sMBNValueToDelete
*/ 
function verifyDACanDeleteMBN($sURL,$sDomainName1,$sDomainName1_Password,$sMBNValueToDelete)
{
//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on link MBN Management 
	_click(_link($lnk_MBNManagement));

	//Click on link -All MBN's
	_click(_link($lnk_AllOrg, _near(_link($lnk_MBNManagement))));

	//method to search MBN 
	searchForMBN($sMBNValueToDelete);

	//Click on MBN link
    if(	_exists(_div($sMBNValueToDelete)))
    {
      //Click on delete button
       _click(_link($btn_DeleteMBN));
      
      //Click on Yes button
      _click(_button($btn_YesForDeleteMBN));  
        
    }
    else
    {
      _log("MBN is not existing.Hence not deleted");
    }

	//Log out from app
	logOut();
}
/*
Function Name 			:   verifyDACanDeletePolicyName
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:  	Domain admin should be able to delete  'Policy' successfully.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sPolicyNameToDelete
*/ 

function verifyDACanDeletePolicyName($sURL,$sDomainName1,$sDomainName1_Password,$sPolicyNameToDelete)
{
    //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

    //Click on Groups link
        _click(_link($lnk_Policies));

        //Click on Policy link
        _click(_link($lnk_PolicySet));
	
	//check existance of policy set, if yes means delete
	  if(_exists(_link($sPolicyNameToDelete)))
	  {
		_log("Policy set exists .Hence deleting");
		
		  //Click on Policy set
		  _click(_link($sPolicyNameToDelete));
		  
		  //Click on delete button
		  _click(_link($btn_ReportDelete));
		  
		  //click on yes button in pop up
		   _click(_button($btn_YesForDeleteMBN));
        
        //Validate policy deleted success message
        _assertEqual($sPolicySetDeletedSM, _getText(_div($sPolicySetDeletedSM)));
	  }
      else
      {
        _log("Policy set is not existing to delete");  
      }

	//Log out from app
	logOut();
  
}



/*
Function Name 				:  verifyOrgAdminCanDeleteGroup
Author 	 	    	     	:  Divya
Created Date 	      		:  20 May 2016
Description		        	:  This method is used to Verify that Organization admin can delete groups
Input			          	:  $sURL,$sOrgAdminName1,$sOrgAdminPassword1,$lnk_ContactGroups,$sGroups_ContactGrpToDelete
*/ 

function verifyOrgAdminCanDeleteGroup($sURL,$sOrgAdminName1,$sOrgAdminPassword1,$lnk_ContactGroups,$sGroups_ContactGrpToDelete)
{
			//Call method to login to site with valid credentials
  			      	   loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);
			
			        // Click on User icon
			        _click(_button($btn_Usericon));
			
			        // Click on Organization Admin
			        _click(_span($sOrgAdminNameToSelect));
			
			        // Click on Groups
			         _click(_link($lnk_Groups));
			
					// Click on Contact Groups
					_click(_link($lnk_ContactGroups));
		
  					// Check for the Contact is present in the list
		     		if(_isVisible(_link($sGroups_ContactGrpToDelete)))
			        {
                      	// Click on the Contact Group
			          	_click(_link($sGroups_ContactGrpToDelete));
			         
			           // Click on Delete Icon
			            _click(_link($lnk_Delete));
			
			           // Click on Yes
			           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));                  
     			       }
					else
                    {                      
                      _log("Group is not available");                      	
                    }
  				// Log out from app
	          //	logOut();	
  
}



/**************************************************Organisation Member*******************************************************************/


/*
Function Name 		:  verifyExistanceOfLinksInOrgMemberInHomePage
Author 	 	    	     :  Divya
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify existance of links in home page
Input			          :  $sURL, $sOrgMem1, $sOrgMem1Pwd
*/
function verifyExistanceOfLinksInOrgMemberInHomePage($sURL, $sOrgMem1, $sOrgMem1Pwd)
{

	//Call method to login to site with valid credentials
  	loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Verify existance of following links 
    _assertExists(_link($lnk_MDashboard));
    _assertExists(_link($lnk_MyProfile));
    _assertExists(_link($lnk_MContacts));
    _assertExists(_link($lnk_ContactGroups));
    _assertExists(_link($lnk_MAddressBook));
    _assertExists(_link($lnk_MMBN));
    _assertExists(_link($lnk_Devices));
    _assertExists(_link($lnk_MPolicies));
    _assertExists(_link($lnk_Report));

	// Log out from app
     logOut();
}


/*
Function Name 		 :   verifyMBNCreatedByDomainAdminIsVisibleToOtherDomain
Author 	 	    		 :	 Divya
Created Date 	 	  :   7th June 2016
Description		   	   	:   This method is to Verify that Organization member can add  a 'Contact Groups'
Input					  :   $sURL, $sOrgMem1, $sOrgMem1Pwd,$sGroupTitle
*/

function verifyOMCanAddContactgroup($sURL, $sOrgMem1, $sOrgMem1Pwd,$sGroupTitle)
{
	//Call method to login to site with valid credentials
 	loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Method to create contact group
	createContactGroupAsOM($sGroupTitle);	

	// Log out from app
    logOut();
  
}

/*
Function Name 		    :   createContactGroupAsOM
Author 	 	    		:	 Divya
Created Date 	 	    :   7th June 2016
Description		   	   	:   This method is to create contact group by organisation member
Input					:   $sGroupTitle
*/
function createContactGroupAsOM($sGroupTitle)
{
 	//Click on Contact Groups link
    _click(_link($lnk_ContactGroups));

	//Check existance of group & delete it ,if existing
	if(_isVisible(_link($sGroupTitle)))
   	{
   			_log("Group is existing already .Hence deleting it & recreating it again");

      		//Click on delete button
			_click(_italic($btn_OMDeleteReport));

            //Click on Yes button in pop up
            _click(_button($btn_YesForDeleteMBN));
   	}
	else
    {
      		_log("Group is not existing already .Hence creating it ");
    }
      
		//Click on + icon
       _click(_link($plusIcon_Contacts, _near(_heading2($txt_HeaderContact))));

        //Enter Title
        _setValue(_textbox($txt_Title), $sGroupTitle);       

        //Enter description
        _setValue(_textarea(0), $sGroupTitle);

        //Click on next button
        _click(_submit($btn_Submit));		

		//Click on submit button
		_click(_submit($btn_Addgroup));
		
  		//Validate existance of created group
		_assertVisible(_link($sGroupTitle));
}



/*
Function Name 		    		:   verifyVisiblityOfCreatedContactGroup
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Contact groups  created by Organization member should not visible domain admins
Input					     	:   $sURL, $sOrgMem1, $sOrgMem1Pwd,$sDomainName1, $sDomainName1_Password,$sGroupTitle
									,$sDomainOption
*/

function verifyVisiblityOfCreatedContactGroup($sURL,  $sOrgMember1, $sOrgMemPwd1,$sOMCGGroupTitle1,$sDomainOption)
{
	//Call method to login to site with valid credentials
 	loginToSite($sURL,  $sOrgMember1, $sOrgMemPwd1);

	//create contact group by organisation member
	createContactGroupAsOM($sOMCGGroupTitle1);	
	
	// Log out from app
    logOut();


    if($sDomainOption=="DomainAdmin")
    {
      	//Call method to login to site with valid credentials
        loginToSite($sURL, $sDomainName1, $sDomainName1_Password);

        //Click on Groups link
        _click(_link($lnk_Groups));

        //Click on Contact groups
        _click(_link($lnk_ContactGroup));

        //Verify whether group already exists, If yes means delete it.
        if(_isVisible(_link($sOMCGGroupTitle1)))
        {
         _log("Contact Group is existing.Failure");
        }
        else
        {
          _log("Contact groups  created by Organization member should not visible domain admins");
        }

      	// Log out from app
        logOut();
    }
    else if($sDomainOption=="OrganisationAdmin")
    {
 		//Call method to login to site with valid credentials
  		loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);
			
  		//Change role to organisation admin
		_click(_div($sOrgAdminNameToselect));
			
		// Click on Groups
		 _click(_link($lnk_Groups));
			
		// Click on Contact Groups
		_click(_link($lnk_ContactGroups));
		
  		// Check for the Contact is present in the list
		 if(_isVisible(_link($sOMCGGroupTitle1)))
			{
           		 _log("Contact groups created by  Organization member  is  visible to organization  admins ");   
     		}
			else
              {                      
                 _log("Contact groups created by  Organization member  is not  visible to organization  admins ");                      	
              }
  		// Log out from app
	      logOut();
	}

	 else if(($sDomainOption=="Employee")||($sDomainOption=="Organisation_Member") )
    {
 		//Call method to login to site with valid credentials
  		loginToSite($sURL,$sEmployee_account,$sEmployee_pwd);
      
        //Click on Contact Groups link
      _click(_link($lnk_ContactGroups));

        //Check existance of group & delete it ,if existing
        if(_isVisible(_link($sOMCGGroupTitle1)))
        {
                _log("Group is existing ...");              
        }
        else
        {
                _log("Contact  groups created by  Organization member  should not  visible to employee/user. ");
        }
      // Log out from app
	      logOut();
    }

}

/*
Function Name 		    		:   verifyOMCanDeleteContactGroup
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to delete  a 'Contact Groups' successfully
									and and confirmation message "Group Deleted" should be displayed
Input					     	:   $sURL, $sOrgMem1, $sOrgMem1Pwd,$sOMGroupTitleToDelete
*/

function verifyOMCanDeleteContactGroup($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMGroupTitleToDelete)
{
	//Call method to login to site with valid credentials
 	loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on Contact Groups link
    _click(_link($lnk_ContactGroups));

	//Check existance of group & delete it ,if existing
	if(_isVisible(_link($sOMGroupTitleToDelete)))
   	{
   			_log("Group is existing .Hence deleting it");

      		//Click on delete button
			_click(_link($lnk_Delete));

            //Click on Yes button in pop up
            _click(_button($btn_YesForDeleteMBN));
   	}
	else 
    {
      _log("Group not existing to delete");
    }
	// Log out from app
    logOut();
}

/*
Function Name 		    		:   verifyOMCanEditCG
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to edit  a 'Contact Groups' successfully.
Input					     	:   $sURL, $sOrgMem1, $sOrgMem1Pwd,$sOMGroupTitleToEdit
*/
function verifyOMCanEditCG($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMGroupTitleToEdit)
{
	//Call method to login to site with valid credentials
 	loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on Contact Groups link
    _click(_link($lnk_ContactGroups));

	//Check existance of group & delete it ,if existing
	if(_isVisible(_link($sOMGroupTitleToEdit)))
   	{
   			_log("Group is existing .Hence editing it");
			
			//Click on contact group to edit		
			_click(_link($sOMGroupTitleToEdit));	
			
      		//Click on edit button
			_click(_link($btn_CGEdit));
      
      		//Clear title
      		 _setValue(_textarea(0), "");
      
     	 	//Enter title
       		 _setValue(_textarea(0), $sOMGroupTitleToEdit);
      
      		//Click on save button
      		_click(_submit($btn_GSave));
   	}

	else 
    {
			_log("Group not existing to edit.Hence creating & editing");
			//Method to create contact group
			createContactGroupAsOM($sOMGroupTitleToEdit);	
			
			_wait(2000);
	
			//Click on contact group to edit		
			_click(_link($sOMGroupTitleToEdit));
			
			//Click on edit button
			_click(_link($btn_CGEdit));
      
      		//Clear title
      		 _setValue(_textarea(0), "");
      
     	 	//Enter title
       		 _setValue(_textarea(0), $sOMGroupTitleToEdit);
      
      		//Click on save button
      		_click(_submit($btn_GSave));
    }
	// Log out from app
    logOut();
}


/*
Function Name 		    		:   verifyOMAddContacts
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to add  'Contacts' successfully.
Input					     	:   sURL, $sOrgMem1, $sOrgMem1Pwd,$sOMContactSearchValue
*/
function verifyOMAddContacts($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMContactSearchValue,$sContactName1ToSelect,$sContactName2ToSelect)
{
	
	createUser_Under_AllUserSection($sMemberFirstName+$sTimeStamp1,$sMemberLastName);
	createUser_Under_AllUserSection($sMemberFirstName+$sTimeStamp1,$sMemberLastName);
	
	$sContactName1ToSelect=$sMemberFirstName+$sTimeStamp1+" "+$sMemberLastName;
	$sContactName2ToSelect=$sMemberFirstName+$sTimeStamp1+" "+$sMemberLastName;
	//Call method to login to site with valid credentials
 	loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on contacts link
    _click(_link($lnk_MContacts));

	//Click on + icon to add contacts
    _click(_link($icon_PlusAddGroup));
	
	addContactOM($sContactName1ToSelect);
	addContactOM($sContactName2ToSelect);
	
	//Click on Add members
    _click(_button($btn_GSave));

	//verify success message
    _assertExists(_div($sOMContactListUpdateMessage));

	// Log out from app
    logOut();
}

function addContactOM($sContactName1ToSelect)
{
	//Search for contacts with name auto
    _setValue(_textbox($txt_GName),$sContactName1ToSelect);
  
  	//Click on Apply button
    _click(_button($btn_Apply));

  if(_isVisible(_strong($sContactName1ToSelect)) )
  {
	//Check if all check boxes are checked.If yes means uncheck & recheck it
    if (_checkbox($chkbox_OnStatus, _near(_strong($sContactName1ToSelect))).checked == true  )
    {  
        _click(_checkbox($chkbox_OnStatus, _near(_strong($sContactName1ToSelect))));     
        _click(_checkbox($chkbox_OnStatus, _near(_strong($sContactName1ToSelect))));
        
    }
	//Else only check it 
    else
    {
        _click(_checkbox($chkbox_OnStatus, _near(_strong($sContactName1ToSelect))));
        
	}
	}
	

}
/*
Function Name 		    		:   verifyOMCanDeleteContacts
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to delete  'Contacts' successfully.
Input					     	:   $sURL, $sOrgMember1, $sOrgMemPwd1,$sContactNameToDelete
*/
 function verifyOMCanDeleteContacts($sURL, $sOrgMember1, $sOrgMemPwd1,$sContactNameToDelete)
 {
 	//Call method to login to site with valid credentials
    loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on contacts link
    _click(_link($lnk_MContacts));
   
   if(_exists(_link($sContactNameToDelete)))
   {     
     //Click on delete button
     _click(_link($icon_Profile_DeleteIcon));
     
     //Click on Yes button
     _click(_button($btn_YesForDeleteMBN));
   }
   else
   {
     _log("Contact name is not existing to delete");
   }

	// Log out from app
    logOut();
 }
 
 
 
 /*
Function Name 		    		:   verifyOMAddedContactsVisiblity
Author 	 	    				:	 Divya
Created Date 	 	     		:   8th June 2016
Description		   	   	   		:   This method is to verify Contacts created by Organization member should not visible to domain admins
Input					     	:   $sURL, $sOrgMember1, $sOrgMemPwd1,$sOMContactSearchValue,
									$sContactName1ToSelect,$sContactName2ToSelect,$sDomainName1, $sDomainName1_Password
*/

function verifyOMAddedContactsVisiblity($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMContactSearchValue,
                    $sContactName1ToSelect,$sContactName2ToSelect,$sDomainOption,$sDomainName1, $sDomainName1_Password)
{
//verify Organization member should be able to add  'Contacts' successfully.
	verifyOMAddContacts($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMContactSearchValue,
                    $sContactName1ToSelect,$sContactName2ToSelect);

if(_areEqual($sDomainOption,"DomainAdmin"))
    {
	_log("selected option is Domain admin");
	
      	//Call method to login to site with valid credentials
        loginToSite($sURL, $sDomainName1, $sDomainName1_Password);

        //Click on My profile link
        _click(_link($lnk_MyProfile));

        //Click on Contacts link
        _click(_link($lnk_ContactsUnderShortCuts));

      if(_isVisible(_strong($sContactName1ToSelect)) || _exists(_strong($sContactName2ToSelect)) )
      {
        _log("Contact added as organisation member is not visible as Domain Admin.");
      }
      else
      {
        _log("Contact added as organisation member is visible as Domain Admin.");
      }
      // Log out from app
        logOut();
		
    }


    else   if(_areEqual($sOMOrgAdmin,"OrganisationAdmin"))
    {
	_log("selected option is organisation admin");
	
 		//Call method to login to site with valid credentials
  		loginToSite($sURL,$sOrgAdminName1,$sOrgAdminPassword1);
			
  		//Change role to organisation admin
		_click(_span($sOrgAdminNameToselect));
			
		//Click on My profile link
        _click(_link($lnk_MyProfile));

        //Click on Contacts link
        _click(_link($lnk_ContactsUnderShortCuts));

      if(_isVisible(_strong($sContactName1ToSelect)) || _exists(_strong($sContactName2ToSelect)) )
      {
        _log("Contact added as organisation member is not visible as Domain Admin.");
      }
      else
      {
        _log("Contact added as organisation member is visible as Domain Admin.");
		}
     
      // Log out from app
        logOut();
		
		
	}

else if((_areEqual($sOMEmp,"Employee"))||(_areEqual($sOMoption,"Organisation_Member") ))
    {
	_log("selected option is employee or other organisation member");
	
	
 		//Call method to login to site with valid credentials
  		loginToSite($sURL,$sEmployee_account,$sEmployee_pwd);
      
       //Click on contacts link
   		 _click(_link($lnk_MContacts));
      
      if(_exists(_strong($sContactName1ToSelect)) || _exists(_strong($sContactName2ToSelect)) )
      {
		_log("Contact added as organisation member is displayed ..");
      }
      else
      {
        _log("Contact added as organisation member is not displayed ..");
      }
	
      // Log out from app
	      logOut();
		  
    }
  
}


/*
Function Name 		    		:   verifyOMCanAddReport
Author 	 	    				:	 Divya
Created Date 	 	     		:   10th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to add  'Custom Reports' successfully.
Input					     	:   $sURL, $sOrgMember1, $sOrgMemPwd1,$sOMReportName
									
*/

function verifyOMCanAddReport($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMReportName)
{
	//Call method to login to site with valid credentials
    loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on reports link
    _click(_link($lnk_OMReports));

	//Check existance of report , if exists then delete it
    if(_isVisible(_link($sOMReportName)))
    {
      //Click on report 
      _click(_link($sOMReportName));
      
      //Click on delete button
      _click(_italic($btn_OMDeleteReport));
      
      //click on yes on pop up      
    _click(_button($btn_Yes));
    }
	_wait(3000);

	//Click on plus icon to create
	_click(_link($plusicon_Groups ));
	
	_wait(2000);
	
	//Enter report title
    _setValue(_textbox($txt_Title), $sOMReportName);
	
	//Enter report description
    _setValue(_textarea($txt_UMDescription), $sOMReportName);

	//Click on next button
    _click(_submit($btn_Next));

	//Select Message option
    _click(_checkbox($chckbx_ReportType, _in(_div($sOMReportType1Toselect))));

	//Select Message Id option
    _click(_checkbox($chckbx_ReportType, _in(_div($sOMReportType2Toselect))));

	//Click on next button
    _click(_button($btn_Nxt ));

	//Click on date filter 
    _click(_textbox($txtbox_TO));
/*
	//Select repesctive date from calender
    _click(_span($sOMDateforReport, _near(_strong($sOMYearForReport))));

	//Click on To Date filter 
    _click(_textbox($txtbox_TO_1));

	//Select repesctive date from calender
    _click(_span($sOMDateforReport, _near(_strong($sOMYearForReport))));*/

	//Click on Add report
    _click(_submit($lnk_AddReport));

	//Verify existance of created report
    _assertEqual($sOMReportName, _getText(_link($sOMReportName)));

	// Log out from app
    logOut();
}

/*
Function Name 		    		:   verifyOMCanEditReport
Author 	 	    				:	 Divya
Created Date 	 	     		:   10th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to edit  'Custom Reports'
										successfully and changes made on the report should get reflected
Input					     	:   $sURL, $sOrgMember1, $sOrgMemPwd1,$sOMEditReportName
									
*/
function verifyOMCanEditReport($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMEditReportName)
{
	//Call method to login to site with valid credentials
    loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on reports link
    _click(_link($lnk_OMReports));

	//Check existance of report , if exists then delete it
    if(_isVisible(_link($sOMEditReportName)))
    {
      //Click on report 
      _click(_link($sOMEditReportName));
      
      //Click on edit button
      _click(_link($btn_CGEdit));
      
      //Enter report title
    _setValue(_textbox($txt_Title), "");
	
         //Enter report title
    _setValue(_textbox($txt_Title), $sOMEditReportName);
      
	//Enter report description
    _setValue(_textarea($txt_UMDescription), $sOMEditReportName);

	//Click on next button
    _click(_submit($btn_Next));	

	//Click on next button
    _click(_button($btn_Nxt ));	

	//Click on edit report
   _click(_submit($btn_OMEditReport));      
    }
  else
  {
    _log("Given report do not exists...");
  }

	// Log out from app
    logOut();
}

/*
Function Name 		    		:   verifyOMCanDeleteReport
Author 	 	    				:	 Divya
Created Date 	 	     		:   10th June 2016
Description		   	   	   		:   This method is to verify Organization member should be able to delete  'Reports' successfully.
Input					     	:   $sURL, $sOrgMember1, $sOrgMemPwd1,$sOMDeleteReportName									
*/

function verifyOMCanDeleteReport($sURL, $sOrgMember1, $sOrgMemPwd1,$sOMDeleteReportName)
{
	//Call method to login to site with valid credentials
    loginToSite($sURL, $sOrgMember1, $sOrgMemPwd1);

	//Click on reports link
    _click(_link($lnk_OMReports));

	//Check existance of report , if exists then delete it
    if(_isVisible(_link($sOMDeleteReportName)))
    {
      //Click on report 
      _click(_link($sOMDeleteReportName));
      
      //Click on delete button
      _click(_italic($btn_OMDeleteReport));
      
      //click on yes on pop up      
    _click(_button($btn_Yes));
    }
	
    else
    {	
      _wait(2000);

        //Click on plus icon to create
        _click(_link($plusicon_Groups ));

        //Enter report titel
        _setValue(_textbox($txt_Title), $sOMDeleteReportName);

        //Enter report description
        _setValue(_textarea($txt_UMDescription), $sOMDeleteReportName);

        //Click on next button
        _click(_submit($btn_Next));	

        //Click on next button
        _click(_button($btn_Nxt ));	

        //Click on Add report
        _click(_submit($lnk_AddReport));
      
       //Click on report 
      _click(_link($sOMDeleteReportName));
      
      //Click on delete button
      _click(_italic($btn_OMDeleteReport));
      
      //click on yes on pop up      
    _click(_button($btn_Yes));
    }

	// Log out from app
    logOut();
}











/****************************************************************************************************************************************************************/
/*
Function Name 			:   verifyDACanEditPolicySet
Author 	 	    			:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin can edit  policy set  
Input					: 	$sURL,$sDomainName1,$sDomainName1_Password,$sPolicyNameToEdit,
                                 $txt_Scroll_Content	
*/
function verifyDACanEditPolicySet($sURL,$sDomainName1,$sDomainName1_Password,$sPolicyNameToEdit,
                                 $txt_Scroll_Content)
{
	//Call method to login to site with valid credentials
    loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

    //Click on Groups link
    _click(_link($lnk_Policies));

     //Click on Policy link
     _click(_link($lnk_PolicySet));

		//Scroll Veritically
	_call(_div($txt_Scroll_Content).scrollTop=8000); 

	//check existance of policy set, if yes means delete
	  if(_isVisible(_link($sPolicyNameToEdit)))
	  { 
        
        //Cal method to edit policy 
         editPolicySet($sPolicyNameToEdit);        
		_wait(2000);
	     
      }

      else
      {
         _log("Policy set is not existing to edit..");     
        
        //Create a policy set 
		createPolicySet($sPolicyNameToEdit,$sPolicyExpiryDate,$sPolicyDescription);       
        
        _wait(5000);        		
        
        //Scroll Veritically
		_call(_div($txt_Scroll_Content).scrollTop=8000); 
        
        //Cal method to edit policy 
        editPolicySet($sPolicyNameToEdit);   
      }  

	//Log out from app
	logOut();
}

/*
Function Name 			:   editPolicySet
Author 	 	    			:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin can edit  policy set  
Input					: 	$sPolicyNameToEdit
                                 
*/
function editPolicySet($sPolicyNameToEdit)
{
  		//click on policy
        _click(_link($sPolicyNameToEdit));
        _wait(4000);
		//Click on edit button
		_click(_link($btn_EditPolicySet));

		_wait(2000);
        
        //Clear the contents of policy
         _setValue(_textbox($txt_GName),"");  
        
            //Enter Policy name
          _setValue(_textbox($txt_GName),$sPolicyNameToEdit);          

          //Click on next button
          _click(_submit($btn_Next));	

          //Click on next button
          _click(_button($btn_Next));

          //Click on next button
          _click(_button($btn_Next));
        
		//Click on add policy
		_click(_button($btn_SaveChangesToPolicy));

}

/*
Function Name 			:   verifyDACanEditCustomReport
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Verify Domain admin should be able to edit  'Custom Reports' successfully and changes made on the report should get reflected.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sReportNameToEdit
*/ 
function verifyDACanEditCustomReport($sURL,$sDomainName1,$sDomainName1_Password,
                                    $sReportNameToEdit)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Reports link
	_click(_link($lnk_Report));

	//Click on Custom Report
	_click(_link($lnk_CustomReport));	
	
	//Scroll bottom
	_call(_div($txt_Scroll_Content).scrollTop=20000); 

	$sReportNameToEdit=$sPolicyNameToEdit+$sTimeStamp1;
	if(_isVisible(_link($sReportNameToEdit)))
    {
      editCustomReport($sReportNameToEdit);
    }

	else
    {
      //Create custom report and verify same
	createCustomReport($lnk_CustomReport,$sReportNameToEdit,$chk_boxMessageId,
                       $chk_boxMessageStatus,$sToDate,$sToDate1);
      	//Scroll bottom
      _call(_div($txt_Scroll_Content).scrollTop=20000); 
      
      editCustomReport($sReportNameToEdit);
    }

	//Log out from app
	logOut();
}


/*
Function Name 			:   verifyDACanEditCustomReport
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Method to edit custom report
Input					:	$sReportNameToEdit
*/ 
function editCustomReport($sReportNameToEdit)
{
  //Click on report name
      _click(_link($sReportNameToEdit));     
      
  _wait(3000);
      //Click on edit button
      _click(_link($btn_REditReport));
  
        _wait(2000);
 	 //Enter report title as blank
	_setValue(_textbox($txt_ReportTitle),"");
  
      //Enter report title
	_setValue(_textbox($txt_ReportTitle),$sReportNameToEdit);
      
      //Click on next button
	_click(_button($btn_Next));
      
      //Click on next button
	_click(_button($btn_NextForReport));
      
      //Click on edit report button
      _click(_submit($btn_OMEditReport));
}


/*
Function Name 			:   verifyDACandeleteCR
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Domain admin should be able to delete  'Custom Reports' successfully.
Input					:	$sURL,$sDomainName1,$sDomainName1_Password,$sReportNameTodelete
*/ 
function verifyDACandeleteCR($sURL,$sDomainName1,$sDomainName1_Password,$sReportNameTodelete)
{
//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);
	
	//Click on Reports link
	_click(_link($lnk_Report));

	//Click on Custom Report
	_click(_link($lnk_CustomReport));

	if(_isVisible(_link($sReportNameTodelete)))
	{
      //Call method to delete report
     deleteCustomReport($sReportNameTodelete);
	}
	else
    {
      //Create custom report and verify same
	createCustomReport($lnk_CustomReport,$sReportNameTodelete,$chk_boxMessageId,
                       $chk_boxMessageStatus,$sToDate,$sToDate1);
      
      	//Scroll bottom
      _call(_div($txt_Scroll_Content).scrollTop=20000);   
      
     //Call method to delete report 
    deleteCustomReport($sReportNameTodelete);
    }
	//Log out from app
	logOut();

  }
 /*
Function Name 			:   deleteCustomReport
Author 	 	    		:	Divya
Created Date 	 	 	:   1st May 2016
Description		   	   	:   Method to delete custom report
Input					:	$sReportNameTodelete
*/ 
function deleteCustomReport($sReportNameTodelete)
{
   			//Click on report link
		_click(_link($sReportNameTodelete));
          
        //Click on delete button  
		_click(_italic($btn_ReportDeleteOption));
          
		  _wait(3000);
      	//Click on Yes button
         _click(_button($btn_YesForDeleteMBN));
		 
		 _wait(1000);
}
                  
 /*
Function Name 			:   verifyDACandeleteUsers
Author 	 	    		:	Divya
Created Date 	 	 	:   25th April 2016
Description		   	   	:   Domain admin should be able to delete an user successfully.
Input					:$sURL,$sDomainName1,$sDomainName1_Password,$sUMUserToDelete
*/
function verifyDACandeleteUsers($sURL,$sDomainName1,$sDomainName1_Password,$sUMUserToDelete)
{
	//Login to site with valid credentials
     loginToSite($sURL,$sDomainName1,$sDomainName1_Password);	

	//Click on user management link	
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));
	
	//Click on search button
	_click(_div($lnk_MSearchIcon));
	
	//Search via email
	_setValue(_textbox($txt_MEmailId), $sUMUserToDelete);
	
	//Click on search button
	_click(_submit($submit_Search));

    if(_isVisible(_div($sUMUserToDelete)))
    {
       var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);
      
      //Click on delete icon near by member name
      _click(_link("/Delete/", _near(_div($sUMUserToDelete))));

       //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
    }
    else
    {
     _log("User not available");  
      
    }

		//Log out of app
    logOut();
}
    

/****************************************************Organisation Admin********************************************************************************/

/*
Function Name 		:   loginToSite
Author 	 	    		:	Anantha N
Created Date 	 	 :   4/29/2016
Description		   	   :   This method is used to login to site with valid credentials
*/

function loginToSite($sStage_URL,$sUserName,$sPassword){
  
         	 //Sets readyStates of an XMLHttpRequest (XHR) Sahi should wait for
			_setXHRReadyStatesToWaitFor("2,3");
  
			//Navigate to url of the application
			_navigateTo($sStage_URL);
	  
	  		//Enter user name
	  		_setValue(_textbox($txt_Email), $sUserName);
	  
	  	    //Enter password
	 	    _setValue(_password($txt_Password), $sPassword);
	  
	  		//Click on signin button
			_click(_submit($btn_SignIn));
   
}

/*
Function Name 		:   logOut
Author 	 	    		:	Anantha N
Created Date 	 	 :   4/29/2016
Description		   	   :   This method is used to log out of the application
*/
function logOut()
{
         	 //Click on user
			_click(_button($btn_Usericon));

			//Click on Log out button
			_click(_link($lnk_LogOut));
}

/*
Function Name 		:   verifythatOrganizationAdminCanIncludePolicyMembersbySelectingaPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting a Policy Groups while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/
function verifythatOrganizationAdminCanIncludePolicyMembersbySelectingaPolicyGroups($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
        // Call method to login to site with valid credentials
         loginToSite($sStage_URL,$sDomainName1,$sDomainName4_OA_Password);
  
  		_wait(10000);

        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

  	// If Check is visible against the user name check it
      if(_isVisible(_strong($strng_GroupName)))
      {
         _click(_checkbox($chkbox_ON, _near(_strong($strng_GroupName))));
        // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
      }
      else
      {
         _log("Group are unavailable in the list to select")
      }

        // Select the desired policy group name
    //	_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
       
  		// Click on add policy
        _click(_button($btn_AddPolicy));
        
  		// Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

  		// Click on Delete
        _click(_link($lnk_Delete, _near(_link($lnk_Edit))));
  
  		// Click on Yes to delete the policy
        _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
       
  		// Logout from the application
          logOut();
}

/*
Function Name 		:   verifyOrganizationadminCanIncludePolicyeMembersBySelectingMembersIndividuallyFromMemberList
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting members individually from the member list while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifyOrganizationadminCanIncludePolicyeMembersBySelectingMembersIndividuallyFromMemberList($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
		//Call method to login to site with valid credentials
          loginToSite($sStage_URL,$sDomainName1,$sDomainName4_OA_Password);

  		_wait(10000);		
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // click on Pluse icon
        _click(_link($plusIcon_Policies));

        // Enter Policy name
        _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

        // Enter the description
        _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

        // Click on next button for 1
        _click(_submit($lnk_Next));

        // Click on next button for 2
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 3
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

        // Click on next button for 4
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  		 // Click on next button for 5
        _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  		// Select the desired policy group name
    	_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
       
  		// Click on add policy
        _click(_button($btn_AddPolicy));
  
  		// Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

  		// Click on Delete
        _click(_link($lnk_Delete, _near(_link($lnk_Edit))));
  
  		// Click on Yes to delete the policy
        _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));

	   // Logout from the application
		logOut();
}

/*
Function Name 		:   VerifyThatOrganizationAdminCanDeleteContacts
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Organization admin can delete  'Contacts'.
Input					:    
*/

function VerifyThatOrganizationAdminCanDeleteContacts()
{
	 			//Call method to login to site with valid credentials
		          loginToSite($sStage_URL,$sDomainName1,$sDomainName4_OA_Password);
			
  				_wait(10000);
  	
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
				// Click on 'Contacts'
				 _click(_link(2, $lnk_Contacts, _under(_link($lnk_Shortcuts))));
	
  				// Ckecking for the Contact
				_assertVisible(_cell($frst_ContactName));		
				
  				// Click on the Contact
  				_click(_cell($frst_ContactName));
	
  				// Storing the Contact name which going to be deleted
				var $del_ContactName = _getText(_heading2($contactName))
	
                // Click on Delete     
				_click(_link($lnk_DeleteIcon));
  
  			   // Click on Yes 
				_click(_button($btn_Yes, _in(_div($msg_RemoveContact))));
			
				// Checking for the Deleted Contact in the Contact list
  				if(_isVisible($contactName))
	            {
	               _log($msg_ContactPresent);
	            }
				else
	            {
					_log($msg_ContactNOTPresent);              
	            }
  
  			  // Log out from the application	
  				logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanAddaContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a ContactGroups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanAddaContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  			_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	// click on the Group name
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
				 // Select the check box
	       		 _click(_checkbox($chkbox_SelectedUser_1st));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
		  
		  		_wait(3000);
  				
  				// Click on Created contact group
  				_click(_link($sGroups_ContactGrpTitle));
		
		        // Click on Delete Icon
		        _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddaUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a UserGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAddaUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
  	   // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
          	_click(_link($sGroups_UserGrpTitle));
         
           // Click on Delete Icon
            _click(_italic($btn_icon_Trash));

           // Click on Yes
           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
         
        }
  
        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_1st));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));
  
  		_wait(3000);

        // Click on Delete Icon
        //_click(_link($lnk_Delete));
  		 _click(_italic($btn_icon_Trash));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddaPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a PolicyGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAddaPolicyGroups($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  			_wait(10000);		
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	        _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on Policy group
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
 			// Enter the name
  			 _setValue(_textbox($txt_Name), $strng_Name);
		
  	   		// CLick Apply
  		      _click(_button($btn_Apply));
			
  
  			// Select the check box
			_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
	  
	  		_wait(3000);
	
	        // Click on Delete Icon
	       _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with VoiceOnly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanAddMBNwithVoiceOnly($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	          _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
  			    _click(_div($sMBNnumber_VO_OrgAdmin, _near(_link($lnk_mnb_LocationHeading))));
//	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithMessagingOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with MessagingOnly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_MO_OrgAdmin, $sMBNType_MO_OrgAdmin,$sMBNProvider_OrgAdmin,$sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanAddMBNwithMessagingOnly($sMBNCountry_OrgAdmin, $sMBNnumber_MO_OrgAdmin, $sMBNType_MO_OrgAdmin,$sMBNProvider_OrgAdmin,$sMBNnotes_OrgAdmin)
{
	        //Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
			
  			_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on MBN Mgmt
	        _click(_link($lnk_MBNmgmt));
	
	        // Click on ALL MBNs
	      //  _click(_link($lnk_AllMBNs));
	_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	        //** Searching for the MBN Number **//
	        // Click on Search Icon
	        _click(_italic($icon_Search));
	        
  			// Enter the MBN number
	        _setValue(_textbox($txtbox_MBN), $sMBNnumber_MO_OrgAdmin);
	        
  			// Click on Search 
	        _click(_submit($submit_Search));
	
  			// Check for the MBN number with Messag
	        if(_isVisible(_div($sMBNnumber_MO_OrgAdmin)))
	        {
	          // click on Delete icon
	          _click(_link($lnk_DeleteMBN));
	
	          // click on Yes button
	          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	        }
	
	        // Click on Add icon 
	        _click(_link($splusicon_MBN_OrgAdmin));
	
	        // Select the country
	        _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	        // Enter the MBN Number
	        _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_MO_OrgAdmin);
	
	        // Select the MBN Type
	        _setSelected(_select($drpdwn_MBNtype), $sMBNType_MO_OrgAdmin);
	
	        // Select MBN provider
	        _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	        // Enter the MBN notes
	        _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
	        // Selecting a Assign and Storing the Assign name
	        _click(_radio($radiobtn_SelectMembr_M));
	        var $assignMBN_name = _getText(_div($sAssignName_MBN));
	        // Print the Assign Name	
	        _log($assignMBN_name);
	
	        // Click on Create
	        _click(_submit($submit_Create));
	
	        // Click on created MBN
	        _click(_div($sMBNnumber_MO_OrgAdmin));
	
	        // Click on AssignTo
	        _click(_link($lnk_assignTO));
	
	        // Verify the Assign Name
	        _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	        // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceAndMessaging
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add MBN with Voice And Messaging
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VandM_OrgAdmin, $sMBNType_VM_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/
function verifyThatOrgAdminCanAddMBNwithVoiceAndMessaging($sMBNCountry_OrgAdmin, $sMBNnumber_VandM_OrgAdmin, $sMBNType_VM_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	        //Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  				_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on MBN Mgmt
	        _click(_link($lnk_MBNmgmt));
	
	        // Click on ALL MBNs
	   //     _click(_link($lnk_AllMBNs));
  			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	        //** Searching for the MBN Number **//
	        // Click on Search Icon
	        _click(_italic($icon_Search));
	        // Enter the MBN number
	        _setValue(_textbox($txtbox_MBN), $sMBNnumber_VandM_OrgAdmin);
	        // Click on Search 
	        _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice and Message
	        if(_isVisible(_div($sMBNnumber_VandM_OrgAdmin)))
	        {
	          // click on Delete icon
	          _click(_link($lnk_DeleteMBN));
	
	          // click on Yes button
	          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	        }
	
	        // Click on Add icon 
	        _click(_link($splusicon_MBN_OrgAdmin));
	
	        // Select the country
	        _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	        // Enter the MBN Number
	        _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VandM_OrgAdmin);
	
	        // Select the MBN Type
	        _setSelected(_select($drpdwn_MBNtype), $sMBNType_VM_OrgAdmin);
	
	        // Select MBN provider
	        _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	        // Enter the MBN notes
	        _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
	        // Selecting a Assign and Storing the Assign name
	        _click(_radio($radiobtn_SelectMembr));
	        var $assignMBN_name = _getText(_div($sAssignName_MBN));
	        // Print the Assign Name	
	        _log($assignMBN_name);
	
	        // Click on Create
	        _click(_submit($submit_Create));
	
	        // Click on created MBN
	        _click(_div($sMBNnumber_VandM_OrgAdmin));
	
	        // Click on AssignTo
	        _click(_link($lnk_assignTO));
	
	        // Verify the Assign Name
	        _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	        // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatOrgAdminCanAddCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrgAdmin Can Add CustomReports
Input			          :  $sCustomReport_Title, $sCustomReport_Description, $sFromDate_CustmReport, $sTODate_CustmReport
*/

function verifyThatOrgAdminCanAddCustomReports($sCustomReport_Title, $sCustomReport_Description, $sFromDate_CustmReport, $sTODate_CustmReport)
{
          //Call method to login to site with valid credentials
  		     loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  			_wait(10000);
  
          // Click on User icon
           _click(_button($btn_Usericon));

          // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));

          //var $time=new Date().getTime();//gives the current time in milliseconds.
          //_log($time);

          // Click on '+' icon 
          _click(_link($plusicon_Report_OrgAdmin));

          // Enter the Title of Custom report
          _setValue(_textbox($txtbox_Title), $sCustomReport_Title);

          // Enter the Description
          _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

          // Click Next
          _click(_submit($submit_Next));

          // choosing the desired report columns.
          _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
          // _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));
  		//_click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));
          _click(_checkbox($chk_MessageStatus_3, _in(_div($chk_MessageStatus))));

          // Click on Next
          _click(_button($btn_Nxt));

          // Enter the from Date
          _setValue(_textbox($txtbox_TO), $sFromDate_CustmReport);
          // Enter the To Date
          _setValue(_textbox($txtbox_TO_1), $sTODate_CustmReport);
          // Click on Add Report
          _click(_submit($lnk_AddReport));

          // Verifying the created report
          _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));
  
  /*
  			// refresh the current page
  			_call(window.location.reload());
  	
  			// Click on User icon
           _click(_button($btn_Usericon));

          // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		  _click(_link($sCustomReport_Title));
		

          _click(_link("Delete"));
          _click(_button("Yes", _near(_heading4("Confirm Delete"))));
   */
           // Log out from app
               logOut();
}

/*
Function Name 		:  verifyThatOrganizationAdminCanEditAUserGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Organization Admin Can Edit A UserGroups
Input			          :  $sGroups_UserGroupEditTitle
*/

function verifyThatOrganizationAdminCanEditAUserGroups($sGroups_UserGroupEditTitle)
 {
            //Call method to login to site with valid credentials
            loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

   			_wait(10000);
   
            // Click on User icon
            _click(_button($btn_Usericon));

            // Click on Organization Admin
           _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

            // Click on Groups
            _click(_link($lnk_Groups));

            // Click on User Groups
            _click(_link($lnk_UserGroups));

            // Click on Edit
            _click(_italic($btn_pencil_EditIcon));

            // Storing the current title and printing
            var $currTitle_UserGroup = 	_getText(_textbox($txtbox_Title));
            _log($currTitle_UserGroup);

			// Editing the current Title 
            var $t_Title = $currTitle_UserGroup+$sGroups_UserGroupEditTitle;
            // Editing the Title    
            _setValue(_textbox($txtbox_Title), $t_Title);

            // Click on Save
            _click(_submit($submit_Save));

            //_assertEqual($expected, $actual[, $message])
            _assertEqual($t_Title, _getText(_link($t_Title)));

            // Log out from app
            logOut();
}

/*
Function Name 		:  verifyThatOrganizationAdminCanBlockOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Organization Admin Can Block Other OrgAdmin
Input			          :  $sDomainName5
*/

function verifyThatOrganizationAdminCanBlockOtherOrgAdmin($sDomainName5)
{
				//Call method to login to site with valid credentials
  			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	            
  					_wait(10000);
	                
  					// Click on User icon
	                _click(_button($btn_Usericon));
	
	                // Click on Organization Admin
	               _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));
		
				   // Click on Organization Admin
					_click(_link($lnk_MOrganizationAdmin));
  
  					_wait(4000);
	
					// Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
				//	_click(_italic("glyphicon glyphicon-search"));
  
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName5);
	                
					// Click Search
	                _click(_submit($submit_Search));
				
					// **** Searching and Verifying the Email ****// 
  					// Checking for User name
	                if(_exists(_div($sDomainName5)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_BlockMember, _near(_div($sDomainName5)))))
	                        {
	                              // Click on Lock icon
	                              _click(_link($lnk_BlockMember, _near(_div($sDomainName5))));
	                              // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                        // Print the Msg
	                        _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
				_wait(3000);
	
	   //**** Verifying  that Organization  member can login but can  not access sub domain(organization) since  the  link has been disabled. ****//
	            
  				//Call method to login to site with valid credentials
  			       loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	                _wait(5000);
	
	                // Click on User icon
	                _click(_button($btn_Usericon));
					
  					// Storing the Organistion Admin name
					var $el = _span($s_ADMIN, _near(_div($lnk_OrgAdmin_NorthwesternMutual1)));
	                var $cursorStyle = _style($el, $_cursorr);
					
  				// Checking for Element is blocked or not 
	                if ($cursorStyle == $c_cursorStyle)
	                {
	                  // Element is disabled
	                  _log($msg_EleDisabled);
	                }
	
	                // Log out from app
	                logOut();
	
}

/*
Function Name 		:  verifyThatOrganizationAdminCanBlockAnOrgAdminMemberWhoIsAssociatedToRespectiveOrg
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That OrganizationAdmin Can Block An OrgAdmin Member Who Is Associated To Respective Org
Input			          :  $sDomainName5
*/

function verifyThatOrganizationAdminCanBlockAnOrgAdminMemberWhoIsAssociatedToRespectiveOrg($sDomainName5)
{
	              //Call method to login to site with valid credentials
  			        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
  
	                _wait(10000);
  
	                // Click on User icon
	                _click(_button($btn_Usericon));
	
	                // Click on Organization Admin
	               _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));
	
	                // Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
	
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName5);
	                
					// Click Search
	                _click(_submit($submit_Search));
	
	          // **** Searching and Verifying the Email ****// 
	                // Checking for the Email
  					if(_exists(_div($sDomainName5)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_BlockMember, _near(_div($sDomainName5)))))
	                        {
	                              // Click on Lock icon
	                              _click(_link($lnk_BlockMember, _near(_div($sDomainName5))));
	                              
                              	 // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                  // Print the Msg
	                  _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
	
	   //**** Verifying  that Organization  member can login but can  not access sub domain(organization) since  the  link has been disabled. ****//
	             
	              //Call method to login to site with valid credentials
  			        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); // QA
	                
  					_wait(5000);
	
	                // Click on User icon
	                _click(_button($btn_Usericon));
	
  				// Storing the OrgAdmin 
	               // var $el = _link($lnk_OrgAdmin_NorthwesternMutual);		
	             var $el = _span($s_ADMIN, _near(_div($lnk_OrgAdmin_NorthwesternMutual1)));
  				// Storing cursor type    
  				var $cursorStyle = _style($el, $_cursorr);
				
  					// Checking the cursor type hovering on the element 	
	                if ($cursorStyle == $c_cursorStyle)
	                {
	                  // Element is disabled
	                  _log($msg_EleDisabled);
	                }
	
	                // Log out from app
	                logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditAnUserIntoTheDomain
Author 	 	    	     :  Anantha N
Created Date 	      :  13 May 2016
Description		        :  This method is used to Verify that Organization admin can edit an 'User ' into the domain
Input			          :  $sDomainName5, $sEdit_Titl
*/


function verifyThatOrgAdminCanEditAnUserIntoTheDomain($sDomainName5, $sEdit_Titl)
{
	      //Call method to login to site with valid credentials
  			 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
	      _wait(10000);
	
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click on Members	
	      _click(_link($lnk_Members));
	
	      // Click on ALL
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click on Seach Icon
	      _click(_italic($smembers_SearchIcon));
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sDomainName5);               
	
	      // Click Search
	      _click(_submit($submit_Search));
	
  		// Checking for Email is present 
	      if(_exists(_div($sDomainName5)))
	      {
	            // IF member is visible 
	            if(_isVisible(_link($lnk_EditUsr, _near(_div($sDomainName5)))))
	            	{
	                    // Click on Edit icon
	                    _click(_link($lnk_EditUsr, _near(_div($sDomainName5))));
	
	                    // Editing the Title
	                    _setValue(_textbox($txtbox_Title ), $sEdit_Titl);
	
	                    // click on Update
	                    _click(_submit($submit_Update));
	
	                    // Click on record
	                    _click(_div($sDomainName5));
	
	                    // Verifying the editing record 
	                    _assertEqual($sEdit_Titl, _getText(_span($sEdit_Titl, _near(_label($slbl_title)))));
	
	                    // Log out from app
	                    logOut();
	      			  }
	      }else
	      {
	            // Print the Msg
	            _log($msg_SearchMemberDontExist);
	          
	        	// Log out from app
	            logOut();
	      }	
}

/*
Function Name 		:  verifyThatOrgaAdminCanEditAPolicyGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgaAdmin Can Edit A PolicyGroups
Input					  :    $sGroups_PolicyGrpTitle, $sDescription, $sEdit_
*/

function verifyThatOrgaAdminCanEditAPolicyGroups($sGroups_PolicyGrpTitle, $sDescription, $sEdit_)
{
			  	//Call method to login to site with valid credentials
  			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
		
  				_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Policy Groups
				_click(_link($lnk_PolicyGroups));
		
  				// Checking for the  Policy is present 
				if(_isVisible(_link($sGroups_PolicyGrpTitle)))
		        {
                  
                  // Click on Policy group
		          	_click(_link($sGroups_PolicyGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));		
		
		 		// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
	        	_click(_submit($submit_AddGroup));    
  			
  				_click(_link($sGroups_PolicyGrpTitle));
		
				// Click on Edit
				_click(_italic($btn_pencil_EditIcon));     
	
				// Enter the edit value
				_setValue(_textarea($txtarea_Description),$sEdit_);
	
				// Click Save
				//_click(_submit($submit_Save ));
  				_click(_submit($submit_Save, _near(_button($btn_Close))));
	
				// Verify the edit value
				_assertEqual($sEdit_, _getText(_paragraph($sEdit_)));
		  
		  		_wait(3000);
		
		        // Click on Delete Icon
		       _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditAContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   13 May 2016
Description		   	   :   This method is used to Verify that Organization admin can edit a 'Contact Groups''
Input					  :   $sGroups_ContactGrpTitle, $sDescription, $sEdit_ 
*/

function verifyThatOrgAdminCanEditAContactGroups($sGroups_ContactGrpTitle, $sDescription, $sEdit_)
{
					//Call method to login to site with valid credentials
  			      	   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
			
  					_wait(10000);
  		
			        // Click on User icon
			        _click(_button($btn_Usericon));
			
			        // Click on Organization Admin
			       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
			
			        // Click on Groups
			         _click(_link($lnk_Groups));
			
					// Click on Contact Groups
					_click(_link($lnk_ContactGroups));
		
  					// Check for the Contact is present in the list
		     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
			        {
                      	// Click on the Contact Group
			          	_click(_link($sGroups_ContactGrpTitle));
			         
			           // Click on Delete Icon
			            _click(_italic($btn_icon_Trash));
			
			           // Click on Yes
			           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
			       }
			
					// Click on '+' icon
			        _click(_link($plusicon_Groups));
		
					// Enter the Tilte
			        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
			
			        // Enter the Description
			        _setValue(_textarea($txtarea_Description), $sDescription);
			
			        // Click on Next
			        _click(_submit($submit_Next));
		
					 // Select the check box
		       		 _click(_checkbox($chkbox_SelectedUser_1st));
			
					// Click on Add Group
			        _click(_submit($submit_AddGroup));
		
  					// Click on created Contact group
					_click(_link($sGroups_ContactGrpTitle));
	
		 			// Click on Edit
					_click(_italic($btn_pencil_EditIcon));	        
		
					// Enter the edit value
					_setValue(_textarea($txtarea_Description),$sEdit_);
		
					// Click Save
					_click(_submit($submit_Save ));
		
					// Verify the edit value
					_assertEqual($sEdit_, _getText(_paragraph($sEdit_)));
			  
			  		_wait(3000);
			 				
	  				// Click on Created contact group
	  				_click(_link($sGroups_ContactGrpTitle));
			
			        // Click on Delete Icon
			        _click(_italic($btn_icon_Trash));
			
			        // Click on Yes
			        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		
					// Log out from app
			          logOut();
}

/*
Function Name 		:  verifyThatMemberAssignedToTheNewMBNIsDisplayedProperly
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to verify That Member Assigned To The New MBN Is Displayed Properly
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatMemberAssignedToTheNewMBNIsDisplayedProperly($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
				//Call method to login to site with valid credentials
  			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	           _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	          //_click(_link($lnk_AllMBNs));
  			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number present in the list
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
				_wait(2000);
	          // Click on created MBN
	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatAppIsNotAllowedToCreateDuplicateMBNWithSameMBNNumberSameCountryAndSameMBNType
Author 	 	    	     :  Anantha N
Created Date 	      :  16 May 2016
Description		        :  This method is used to Verify that app is not allowed to create duplicate MBN with Same MBN number, same country and same MBN type.
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatAppIsNotAllowedToCreateDuplicateMBNWithSameMBNNumberSameCountryAndSameMBNType($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	         _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt)))); 
	
	          // Click on ALL MBNs
	          _click(_link($lnk_AllMBNs));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for the MBN number present in the list
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
	          //_click(_div($sMBNnumber_VO_OrgAdmin));
  				_click(_div($sMBNnumber_VO_OrgAdmin, _near(_link($lnk_mnb_LocationHeading))));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
  
 			 // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
  
			// Verifying the Error msg
  			_assertVisible(_div($err_MsgMBN));

		 	// click 'X' button
			_click(_button($btn_Close));
	
	          // Log out from app
	          logOut();
	
}

/*
Function Name 		:  verifyThatMembersIncludedForTheUsergroupsIsDisplayedUnderUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   19 May 2016
Description		   	   :   This method is used to Verify that members included for the User groups is displayed under User groups
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatMembersIncludedForTheUsergroupsIsDisplayedUnderUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
			//Call method to login to site with valid credentials
	  		  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  				_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	        _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
	        // Click on User Groups
	        _click(_link($lnk_UserGroups));
	  
  			// Check for the User Group present in the list
	  		if(_isVisible(_link($sGroups_UserGrpTitle)))
	        {
              // Click on the User Group
	          	_click(_link($sGroups_UserGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	         
	        }
	  
	        // Click on '+' icon
	        _click(_link($plusicon_Groups));
	
	        // Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sGroups_Description);
	
	        // Click on Next
	        _click(_submit($submit_Next));
		
  			// Check for user name present with check box
  			if(_isVisible(_checkbox($chkbox_SelectedUser_1st)))
            {
                // Select the check box
                _click(_checkbox($chkbox_SelectedUser_1st));
              //_click(_checkbox("on", _near(_strong("Aravinda Chundi"))));
              
              // Store the Contact name checked
               var $name1 = _getText(_link($selected_ContactedName));
              
              // Print the name  
              _log($name1);
              
               // Select the check box
              _click(_checkbox($chkbox_SelectedUser_2nd));
              //_click(_checkbox("on", _near(_strong("Balaji Ramachandran"))));
              
              // Store the Contact name checked
                var $name2 = _getText(_link($selected_ContactedName2));
              
              // Print the name  
               _log($name2);

                // Click on Add Group
                _click(_submit($submit_AddGroup));
              
              // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_UserGrpTitle));
	
			// Click on the Group name created
			_click(_link($sGroups_UserGrpTitle));
	
			// Verifying selected group memebers is present or not in frame
			_assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
			_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));
	
	        // Click on Delete Icon
	       _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            }
  			else
            {
                // Print the message
                _log($msg_NoMembersInGroupToSelect);

                // Click on Add Group
                _click(_submit($submit_AddGroup));

                // Verifying created Group is present or not in frame
                _assertVisible(_link($sGroups_UserGrpTitle)); 
              
              _log($msg_UserGpWithOutMemebers);
           	}
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanAddMBNwithVoiceOnly
Author 	 	    	     :  Anantha N
Created Date 	      :  19 May 2016
Description		        :  This method is used to Verify that members included for the Policy Groups is displayed under Policy Groups
Input			          :  $sGroups_PolicyGrpTitle, $sDescription
*/

function verifyThatMembersIncludedForThePolicyGroupsIsDisplayedUnderPolicyGroups($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
  			    loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	        _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for Policy Groups  in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on the policy groups
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	           _click(_italic($btn_icon_Trash));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
  
  			// Checking for user name with the Check box		
              if(_isVisible(_checkbox($chkbox_SelectedUser)))
                  {
                      // Select the check box against the name
                     _click(_checkbox($chkbox_SelectedUser_3rd));
                //    _click(_checkbox("on", _near(_strong("Divya Raju"))));
                    
                    // Storing the Selecte Contact name
                       var $name1 = _getText(_link($selected_ContactedName));
                    
                    // Print the name
                      _log($name1);
                    
                    // Select the check box against the name
                      _click(_checkbox($chkbox_SelectedUser_4th));  
                   // _click(_checkbox("on", _near(_strong("Nagaraj Shivpooje"))));
                    
                    // Storing the Selecte Contact name
                      var $name2 = _getText(_link($selected_ContactedName2));
                    
                    // Print the name
                      _log($name2);

                      // Click on Add Group
                      _click(_submit($submit_AddGroup));
                    
                    // Verifying created Group is present or not in frame
	              _assertVisible(_link($sGroups_PolicyGrpTitle));

    	          // Click on the Group name created
        	      _click(_link($sGroups_PolicyGrpTitle));

            	  // Verifying selected group memebers is present or not in frame
             	 _assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
              	_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));

              	// Click on Delete Icon
              	_click(_italic($btn_icon_Trash));

              	// Click on Yes
              	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
              }
              else
              {
                  // Print the message
                  _log($msg_NoMembersInGroupToSelect);

                  // Click on Add Group
                  _click(_submit($submit_AddGroup));
                
                // Print the message
                _log($msg_PolicyGpsWithOutMemebers);

                  // Verifying created Group is present or not in frame
                  _assertVisible(_link($sGroups_PolicyGrpTitle));
              }

              // Log out from app
                logOut();
}

/*
Function Name 		:  verifyThatMembersIncludedForTheContactGroupsIsDisplayedUnderContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a ContactGroups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatMembersIncludedForTheContactGroupsIsDisplayedUnderContactGroups($sGroups_ContactGrpTitle, $sDescription)
{
				//Call method to login to site with valid credentials
  			       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
		
  					_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// If the group name visible in the list delete it
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  // Click on the Group title
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		           _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
  			//  Checking for the members in the Group to select
				if(_isVisible(_checkbox($chkbox_SelectedUser)))
            	{
                    // Selecting the check box
                    _click(_checkbox($chkbox_SelectedUser_5th));
                  //_click(_checkbox("on", _near(_strong("Prakash Nagarajan"))));
                  
                   // Storing the selected name
                   var $name1 = _getText(_link($selected_ContactedName));
                 
                  // Print the name
                  _log($name1);
                  
                  // Selecting the check box
                    _click(_checkbox($chkbox_SelectedUser_6th));
                  //_click(_checkbox("on", _near(_strong("Rajath Chandrashekar"))));

                 // Storing the selected user name
                    var $name2 = _getText(_link($selected_ContactedName2));
                  
                 // Print the name
                   _log($name2);

                 // Click on Add Group
                    _click(_submit($submit_AddGroup));
                  
                  // Verifying created Group is present or not in frame
	      		  _assertVisible(_link($sGroups_ContactGrpTitle));
	  
	  			// Click on the Group name created
				_click(_link($sGroups_ContactGrpTitle));
	
			// Verifying selected group memebers is present or not in frame
		//	_assertEqual($name1, _getText(_span($name1, _near(_link($lnk_FullName)))));
			_assertEqual($name2, _getText(_span($name2, _near(_link($lnk_FullName)))));
	
	        // Click on Delete Icon
	        _click(_italic($btn_icon_Trash));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            }
  			else
            {
                // Print the message
                _log($msg_NoMembersInGroupToSelect);
              
              // Print the message
              _log($msg_ContactGpsWithOutMemebers);

                // Click on Add Group
                _click(_submit($submit_AddGroup));

                // Verifying created Group is present or not in frame
                _assertVisible(_link($sGroups_ContactGrpTitle));

           	 }
	
			// Log out from app
	          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanUnassignTheMemberWhoHasAssociatedWithMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can unassign the member who has associated with MBN.
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgAdminCanUnassignTheMemberWhoHasAssociatedWithMBN($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	           _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	            _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			// If the MBN number is visible in the search list delete it.
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	            // click on Delete icon
	            _click(_link($lnk_DeleteMBN));
	            
	            // click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	          }
	
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	          // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	          var $assignMBN_name = _getText(_div($sAssignName_MBN));
	          // Print the Assign Name	
	          _log($assignMBN_name);
	
	          // Click on Create
	          _click(_submit($submit_Create));
	
	          // Click on created MBN
	          _click(_div($sMBNnumber_VO_OrgAdmin));
	
	          // Click on AssignTo
	          _click(_link($lnk_assignTO));
	
	          // Verify the Assign Name
	          _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));
  
   			// Click on Unassign link next to the record
 				//_click(_link($lnk_Unassign, _near(_span($assignMBN_name))));
  			_click(_link("Unassign"));

			// Click on Yes button
				_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassig))));

  			// Verfiying that assigne name remove is not present.
			   _assertNotVisible(_span($assignMBN_name));
  
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanEditMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can edit  'MBN'
Input			          :  $sMBNEdit_notes_OrgAdmin 
*/ 

function verifyThatOrgAdminCanEditMBN($sMBNEdit_notes_OrgAdmin)
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	          //_click(_link($lnk_AllMBNs));
  			_click(_link("/All/", _near(_link("/MBN Management/"))));
	
  			 var $MBNnum;
  			// Checking for Edit of MBN
	          if(_isVisible(_link($lnk_EditMBN)))
              {
  					// Click on Edit icon
  			 		 _click(_link($lnk_EditMBN));
                
                	$MBNnum = _getText(_textbox($txtbox_MBNnumber));
                
                // Editing the Note of MBN
                 _setValue(_textarea($txtarea_MBNNotes),$sMBNEdit_notes_OrgAdmin);
                // Click on 
                _click(_submit($submit_Update));
              }
  				else
              	{
                  // Print the msg
                	_log($msg_MBN_recordsNotPresent);
                   
                  	// Log out from app
	          		logOut();	
              	}
  
  			//** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $MBNnum);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			// Click on Edited MBN number
  			 _click(_div($MBNnum));	
  
  			_assertEqual($sMBNEdit_notes_OrgAdmin, _getText(_span($sMBNEdit_notes_OrgAdmin, _near(_label($lbl_Notes)))));
   
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrgAdminCanDeleteMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can delete 'MBN'
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteMBN()
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
	       //   _click(_link($lnk_AllMBNs));
  				_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
  			
  			// MBN record storing 
  			 var $MBNnum = _getText(_div($record_MBN));
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_DeleteMBN)))
              {					
                	// Click on Delete icon
  			 		 _click(_link($lnk_DeleteMBN, _near(_div($record_MBN))));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($txt_MBNDeletd));
              }
  				else
              	{
                  // Print the msg
                	_log($msg_MBN_recordsNotPresent);
                   
                  	// Log out from app
	          		logOut();	
              	}
  
  			//** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	         
			  // Enter the MBN number
	          _setValue(_textbox($txtbox_MBN), $MBNnum);
	          
			  // Click on Search 
	          _click(_submit($submit_Search));
	
  			 // Verifying Search record should not be present
    		 _assertVisible(_heading1($heading_NoIteamsToDisplay, _near(_heading2($heading_MBNs0))));
   
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrgAdminCanDeleteUserGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  20 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'User groups'
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteUserGroups()
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on User Groups
			  _click(_link($lnk_UserGroups));
  			
  			// User Group record storing 
  			 var $userGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	$userGroup = _getText(_strong($record_Groups));
                
                	// Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
                	// Verifying Deleted group doesnot exists
  				   _assertNotVisible($userGroup)
              }
  				else
              	{
                  // Print the msg
                	_log($msg_UsersGroup_recordsNotPresent);
              	}
  	
  			
   
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanDeleteAPolicyGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'Policy Groups''
Input			          :  
*/ 

function  verifyThatOrgAdminCanDeleteAPolicyGroups()
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  			_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on Policy Groups
			  _click(_link($lnk_PolicyGroups));
  			
  			 var $policyGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	//  Policy group name
                	$policyGroup = _getText(_div($name_Groups));
            
                // Print the policy group
                	_log($policyGroup);
                	
                   // Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
               		 // Verifying Deleted Policy group is not present
					_assertNotVisible($policyGroup);
              }
  				else
              	{
                  // Print the msg
                	_log($msg_PolicyGroup_recordsNotPresent);  
               	}		
   
	          // Log out from app
	          logOut();	
}

/*
Function Name 		:  verifyThatOrgAdminCanDeleteAContactGroups
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can delete a 'Contact Groups''
Input			          :  
*/ 

function verifyThatOrgAdminCanDeleteAContactGroups()
{
			//Call method to login to site with valid credentials
  		       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	         // Click on Groups
			   _click(_link($lnk_Groups));
			
			// Click on Contact Groups
			  _click(_link($lnk_ContactGroups));
  			
  			 var $contactGroup;
  			
  			// Delete icon visible
	          if(_isVisible(_link($lnk_Delete)))
              {					
                	//  Contact group name
                	$contactGroup = _getText(_div($name_Groups));
            
                // Print the Contact group
                	_log($contactGroup);
                	
                   // Click on Delete icon
  			 		 _click(_link($lnk_Delete));
                  
                	// Click on Yes 
                	_click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
                	
                	_wait(5000);       
                
               		 // Delete msg displayed
                	_assertVisible(_div($grpDeleted));
                
            	    // Verifying Deleted Contact group is not present
					_assertNotVisible($contactGroup);
           	   }
  				else
              	{
                  // Print the msg
                	_log($msg_ContactGroup_recordsNotPresent );
              	}
  
	          // Log out from app
	          logOut();	
}


/*
Function Name 		:  verifyThatOrganizationAdminCanUnBlockOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  27 May 2016
Description		        :  This method is used to Verify that Organization admin can unblock other Organization admin
Input			          :  $sDomainName5
*/

function verifyThatOrganizationAdminCanUnBlockOtherOrgAdmin($sDomainName5)
{
	              //Call method to login to site with valid credentials
  			        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
  
	                _wait(10000);
  
	                // Click on User icon
	                _click(_button($btn_Usericon));
	
	                // Click on Organization Admin
	               _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	                // Click on Members	
	                _click(_link($lnk_Members));
	
	                // Click on Active
	                _click(_link($lnk_Active));

					// Click on Organization Admin
	               _click(_link($lnk_MOrganizationAdmin));
	
	                // Click on Seach Icon
	                _click(_italic($smembers_SearchIcon));
	
					// Enter the Email ID
	                _setValue(_textbox($txtbox_Email), $sDomainName5);
	                
					// Click Search
	                _click(_submit($submit_Search));
	
	          // **** Searching and Verifying the Email ****// 
	                // Checking for the Email
  					if(_exists(_div($sDomainName5)))
	                {
	                        // IF member is visible block him
	                        if(_isVisible(_link($lnk_UnblockMember, _near(_div($sDomainName5)))))
	                        {
	                              // Click on UnLock icon
	                              _click(_link($lnk_UnblockMember, _near(_div($sDomainName5))));
	                              
                              	 // Select Yes	
	                              _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));
	                        }
	                        else
	                        {
	                              // Print the Msg
	                              _log($msg_MembersBlocked);
	                        }
	
	                }else
	                {
	                  // Print the Msg
	                  _log($msg_SearchMemberDontExist);
	                    }
	
	                // Log out from app
	                logOut();
 }

/*
Function Name 		:  verifyThatOrgAdminCanUnassignMembersFromThepolicyGroup
Author 	 	    		:	Anantha N
Created Date 	 	 :   27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the policy  group
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanUnassignMembersFromThepolicyGroup($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  			_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        {
              // Click on Policy group
	          	_click(_link($sGroups_PolicyGrpTitle));
	         
	           // Click on Delete Icon
	            _click(_link($lnk_Delete));
	
	           // Click on Yes
	           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	       }
	
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Select the check box
			_click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
	  
	  		_wait(3000);
  
  			// Click on Group title
		_click(_link($sGroups_UserGrpTitle));

		$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

		// Click Unassign
		_click(_link($lnk_Unassign));

		//	Click Yes
		_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	   // Unassigned Name is not visible in the User group.
		_assertNotVisible($assignName);
	
	        // Click on Delete Icon
	        _click(_link($lnk_Delete));
	
	        // Click on Yes
	        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
			// Log out from app
	          logOut();
}


/*
Function Name 		:  verifyThatOrgAdminCanUnassignMembersFromTheUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :  27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the User groups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanUnassignMembersFromTheUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
          	_click(_link($sGroups_UserGrpTitle));
         
           // Click on Delete Icon
            _click(_italic($btn_icon_Trash));

           // Click on Yes
           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
         
        }
  
        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_1st));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));
  
  		_wait(3000);

		// Click on Group title
		_click(_link($sGroups_UserGrpTitle));

		$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

		// Click Unassign
		_click(_link($lnk_Unassign));

		//	Click Yes
		_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	   // Unassigned Name is not visible in the User group.
		_assertNotVisible($assignName);

        // Click on Delete Icon
        _click(_italic($btn_icon_Trash));

        // Click on Yes
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

		// Log out from app
          logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanUnassignMembersFromTheContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   27 May 2016
Description		   	   :   This method is used to Verify that Organization admin can unassign members from the Contact Groups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanUnassignMembersFromTheContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			       loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  				_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	// click on the Group name
		          	_click(_link($sGroups_ContactGrpTitle));
		         
		           // Click on Delete Icon
		            _click(_italic($btn_icon_Trash));
		
		           // Click on Yes
		           _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
		       }
		
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
	
				 // Select the check box
	       		 _click(_checkbox($chkbox_SelectedUser_1st));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
		  
		  		_wait(3000);
  				
  				// Click on Created contact group
  				_click(_link($sGroups_ContactGrpTitle));
		
				$assignName = _getText(_div($frst_RowEmail, _near(_link($lnk_Email))));

				// Click Unassign
				_click(_link($lnk_Unassign));

				//	Click Yes
				_click(_button($btn_Yes, _near(_heading4($heading_ConfirmUnassign))));

	  			 // Unassigned Name is not visible in the User group.
				_assertNotVisible($assignName);

		        // Click on Delete Icon
		        _click(_italic($btn_icon_Trash));
		
		        // Click on Yes
		        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
	
				// Log out from app
		          logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotAssignAMemberAsANewDomainAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   30 May 2016
Description		   	   :   This method is used to Verify that Organization admin cannot assign a member as a new domain admin
Input					:    
*/

function verifyThatOrgAdminCannotAssignAMemberAsANewDomainAdmin()
{
      //Call method to login to site with valid credentials
          loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
          _click(_button($btn_Usericon));

      // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on User Roles
          _click(_link($lnk_UserRoles));

      // Verifying Domain Admin link is not present
          _assertNotVisible( _link($lnk_DomainAdmin))

      // Log out from app
          logOut();
}


/*
Function Name 		: verifyThatOrgAdminCannotAssignAEmployeeOrUserToAnOrganization_subDomain
Author 	 	    		:	Anantha N
Created Date 	 	 :   30 May 2016
Description		   	   :   This method is used to Verify that Organization admin can not assign a Employee/user to an organization(sub domain)
Input					:    
*/

function verifyThatOrgAdminCannotAssignAEmployeeOrUserToAnOrganization_subDomain()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

         // Verifying Organizational Units link is not present
        _assertNotVisible( _link($lnk_OrgUnits));

        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotAssignAnOrgMemberAsAAdminOfTheRespectiveOrganization
Author 	 	    		:	Anantha N
Created Date 	 	 :   31 May 2016
Description		   	   :   This method is used to Verify that Organization admin can  not assign an organization member as a admin of the respective organization
Input					:    
*/

function verifyThatOrgAdminCannotAssignAnOrgMemberAsAAdminOfTheRespectiveOrganization()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Click on Organization Admin
		_click(_link($lnk_OrganizationAdmin));
		
		// Click on the Organization
		_click(_link($lnk_OrgAdmin_NorthwesternMutual1));

		// Click Admins tab
		_click(_link($lnk_Admins));

		// Asgin Memebers
	      _click(_link($lnk_AssignMemebrs));
  
  		// Enter the name
  		_setValue(_textbox($txt_Name), $memberName_OrgAdmin);
		
  	   // CLick Apply
  		_click(_button($btn_Apply));

		// Checking for the Member is present in the list
	    if(_isVisible(_checkbox($chkbox_ON, _near(_strong($memberName_OrgAdmin)))))
			{
              	// Click the check box
				_click(_checkbox($chkbox_ON, _near(_strong($memberName_OrgAdmin))));

              	// Click Add memebres
				//_click(_button($lnk_AddMembers));
              _click(_button($submit_Save));
              //_click(_submit($submit_Save, _near(_button($btn_Close))));	

              	// Verifyinig the appropriate message is displayed 
				_assertVisible(_div($msg_ReqIsAllowedOnlyForDomainAdmin));
            }
				else
           		 {
                   		// Print the message
              			_log($msg_MemberNotFoundToCheck);
            	 }
	
        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCanEditHisProfile
Author 	 	    		:	Anantha N
Created Date 	 	 :   31 May 2016
Description		   	   :   This method is used to Verify that organization admin can edit his profile
Input					 :    $sProfile_ProfileTitle
*/

function verifyThatOrgAdminCanEditHisProfile($sProfile_ProfileTitle)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  	_wait(10000);		
  
	// Click on User icon
	_click(_button($btn_Usericon));
	  
	// Click on Organization Admin
	_click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	// Click on My Profile
	_click(_link($lnk_MyProfile));
	
	// Click on ProfileloginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	_click(_link($lnk_Profile, _near(_link($lnk_MyProfile))));
	
	// Click on Edit Contact Information
	_click(_italic($btn_pencil_EditIcon));
	
	// Edit the title
	_setValue(_textbox($txtbox_Title), $sProfile_ProfileTitle);
	
	// Click on Update
	_click(_submit($submit_Update));
	
	// Verifying the valid message is displayed on updating
	_assertVisible(_div($msg_MemberUpdated));
	
	// Verifying title field has been updated 
	_assertEqual($sProfile_ProfileTitle, _getText(_span($sProfile_ProfileTitle)));
	
	// Log out from app
	    logOut();
}

/*
Function Name 	   : verifyThatOrgAdminCanDeleteContacts
Author 	 	    		: Anantha N
Created Date 	 	 : 1 June 2016
Description		   	   : This method is used to Verify that Organization admin can delete  'Contacts'
Input					 : 
*/

function verifyThatOrgAdminCanDeleteContacts()
{
	    //Call method to login to site with valid credentials
	    loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  		_wait(10000);
  
	    // Click on User icon
	    _click(_button($btn_Usericon));
	
	    // Click on Organization Admin
	   _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	    // Click on My Profile
	    _click(_link($lnk_MyProfile));
	
	    // Click Contacts 
	    _click(_link($lnk_Contacts, _near(_link($lnk_MyProfile))));
	
	    var $contactName;
	    var $status;
	
	      if(_isVisible(_link($icon_Profile_DeleteIcon)))
	      {
	            // Storing the Contact name
	            $contactName = _getText(_div($name_Contacts, _near(_div($lbl_Tools))));
	            _log($contactName);
	
	            // Click Delete icon
	            _click(_link($icon_Profile_DeleteIcon));
	
	            // Click on Yes button
	            _click(_button($btn_Yes, _near(_heading4($heading_ConfirmRemove))));
	
	            // Verifying the Contact name is present or not
	            $status = _isVisible(_link($contactName));
	            _log($status);
	
	            // Click on Add button
	            _click(_link($plusIcon_Contacts));
            
            _setValue(_textbox($txt_Name), $contactName);
			_click(_button($btn_Apply));
	
	            // Add the contact
	            _click(_checkbox($chkbox_SelectedUser, _near(_strong($contactName))));
	
	            // Click Add members
	           // _click(_button($lnk_AddMembers));
            _click(_button($submit_Save, _near(_button($btn_Cancel))));
	      }
	      	else
	          {
	            _log($msg_ContactsEmpty);
	          }
	
	   // Log out from app
	      logOut();
}

/*
Function Name 		:   verifyThatOrgAdminCanAssignMoreMembersToExistingContactGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   01 June 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the  existing  Contact Groups
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingContactGroups($sGroups_ContactGrpTitle, $sDescription )
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

      // Checking for the Group name in the list 
      if(_isVisible(_link($sGroups_ContactGrpTitle)))
      {
          // click on the Group name
          _click(_link($sGroups_ContactGrpTitle));

          // Click on Delete Icon
          _click(_italic($btn_icon_Trash));

          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
      }

      // Click on '+' icon
      _click(_link($plusicon_Groups));

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sDescription);

      // Click on Next
      _click(_submit($submit_Next));

       // Click on Add Group
      _click(_submit($submit_AddGroup));

      // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_ContactGrpTitle));

      _wait(3000);

      // Click on Created contact group
      _click(_link($sGroups_ContactGrpTitle));

  	// Click Update Members
      _click(_link($lnk_UpdateMembers));

     // Select the check box
      _click(_checkbox($chkbox_SelectedUser_1st));
      _click(_checkbox($chkbox_SelectedUser_2nd));

  	// Click Add memebers
   //   _click(_submit($submit_Save));
  _click(_button($submit_Save ));

  	// Verifying the Update Message
      _assertVisible(_heading3($msg_GrpUpadted));

      // Log out from app
      logOut();
  
}

/*
Function Name 		:  verifyThatOrgAdminCanAssignMoreMembersToExistingPolicygroup
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the existing  policy  group
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingPolicygroup($sGroups_PolicyGrpTitle, $sDescription)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  		
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Policy Groups
      _click(_link($lnk_PolicyGroups));

        // Checking for the Policy is visible in the list
        if(_isVisible(_link($sGroups_PolicyGrpTitle)))
        {
          // Click on Policy group
          _click(_link($sGroups_PolicyGrpTitle));

          // Click on Delete Icon
          _click(_link($lnk_Delete));

          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
        }

      // Click on '+' icon
      _click(_link($plusicon_Groups));		

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);

      // Enter the Description
      _setValue(_textarea($txtarea_Description), $sDescription);

      // Click on Next
      _click(_submit($submit_Next));

      // Click on Add Group
      _click(_submit($submit_AddGroup));

      // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_PolicyGrpTitle));

      _wait(3000);

      // Click on Policy group
      _click(_link($sGroups_PolicyGrpTitle));

      // Click Update Members
      _click(_link($lnk_UpdateMembers));

      // Select the check box
      _click(_checkbox($chkbox_SelectedUser_3rd));
      _click(_checkbox($chkbox_SelectedUser_4th));

      // Click Add memebers
      _click(_button($submit_Update));

      // Verifying the Update Message
      _assertVisible(_heading3($msg_GrpUpadted));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCanAssignMoreMembersToExistingUserGroups
Author 	 	    		:	Anantha N
Created Date 	 	 :   01 June 2016
Description		   	   :   This method is used to Verify that Organization admin can assign more members to the  existing  User groups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatOrgAdminCanAssignMoreMembersToExistingUserGroups($sGroups_UserGrpTitle, $sGroups_Description)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

            // Checking for the members in the Group to select
            if(_isVisible(_link($sGroups_UserGrpTitle)))
            {
              _click(_link($sGroups_UserGrpTitle));

              // Click on Delete Icon
              _click(_italic($btn_icon_Trash));

              // Click on Yes
              _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

            }

        // Click on '+' icon
        _click(_link($plusicon_Groups));

        // Enter the Tilte
        _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

        // Enter the Description
        _setValue(_textarea($txtarea_Description), $sGroups_Description);

        // Click on Next
        _click(_submit($submit_Next));

        // Click on Add Group
        _click(_submit($submit_AddGroup));

        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_UserGrpTitle));

        _wait(3000);

        // click UserGroup
        _click(_link($sGroups_UserGrpTitle));

        // Click Update Members
        _click(_link($lnk_UpdateMembers));

        // Select the check box
        _click(_checkbox($chkbox_SelectedUser_3rd));
        _click(_checkbox($chkbox_SelectedUser_4th));

        // Click Add memebers
        //_click(_button($lnk_AddMembers));
  	//	_click(_submit($submit_Save, _near(_button($btn_Close))));	
		_click(_button($submit_Save, _near(_button($btn_Cancel))));
        // Log out from app
        logOut();

}

/*
Function Name 		: verifyThatEmployeeORuserCreatedByOrgAdminIsvisibleToDomainAdmins
Author 	 	    		:  Anantha N
Created Date 	 	 :  01 June 2016
Description		   	   :  This method is used to Verify that Employee/user created by Organization admin  is  visible to domain admins
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatEmployeeORuserCreatedByOrgAdminIsvisibleToDomainAdmins($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  			_wait(10000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
	      // Click on User Mgmt
	      _click(_link($lnk_d_UserManagement));
	
	      // Click on ALL
	      _click(_link($lnk_d_All, _near(_link($lnk_d_UserManagement))));
	
	      // Click on All User
	      _click(_link($lnk_AllUsers));
	
	      // Click on Search icon
	      _click(_italic($icon_Search));
	
	      // Enter the Email
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on Search Button
	      _click(_submit($submit_Search));
	
	      // Verifying the result is visible or not
	      _assertVisible(_div($sMember_Email));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that Employee/User  created by Organization admin  is not  visible  to other organization's admin
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  		_wait(10000);
  		
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  		
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Verifying the result is visible or not
	      _assertNotVisible(_div($sMember_Email));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that Employee/User created by Organization admin  is not visible other Organization member
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatEmployeeOrUserCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  			_wait(10000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_Members));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatUserCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:  Anantha N
Created Date 	 	 :  02 June 2016
Description		   	   :  This method is used to Verify that user  created by Organization admin  is not  visible  to  other 'employee/user'
Input					  :  $sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/

function verifyThatUserCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sMember_Email,$sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  			_wait(10000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on All
	      _click(_link($lnk_ALL, _near(_link($lnk_Members))));
	
	      // Click All Users
	      _click(_link($lnk_AllUsers));
	      
	      // Click Search Icon
	      _click(_italic($smembers_SearchIcon));
	
	      _wait(4000);
	
	      // Enter the Email ID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	      // Click on search
	      _click(_submit($submit_Search));
	
	      // Checking for search member is visible or not
	      if(_isVisible(_div( $sMember_Email)))
	      { 
	        _log($msg_MemberPresent)
	
	          // Log out from app
	        logOut(); 
	      }
	      else
	      {
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);
	
	        // Enter EmailID
	      _setValue(_textbox($txtbox_Email), $sMember_Email);
	
	        // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      _isVisible(_heading3($heading_MemberCreated));
	
	       // Click on Close  
	      _click(_button($btn_Close));
	
	        // Log out from app
	        logOut();
	      }
	
	       //Call method to login to site with valid credentials
	        loginToSite($sURL,$sEmployee_account,$sDomainName5_Password); 

		    _wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_Members));
	
	      // Log out from app
	        logOut();
}

 /*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add a UserGroups
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sGroups_UserGrpTitle));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other organization's  'Organization  admins
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

			// Log out from app
          		logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  
  		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
		// Verifying that User group is not present 
  		_assertNotVisible(_div($sGroups_UserGrpTitle));

		// Log out from app
          	logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other Organization member
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present or not in frame
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);

		// Verifying the result is visible or not
	      _assertNotVisible(_div($lnk_UserGroups));
	
	      // Log out from app
	        logOut();
	
}

/*
Function Name 		:  verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 June 2016
Description		   	   :   This method is used to Verify that User groups created by  Organization admin is not  visible to other 'employee/user
Input					  :  $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatUserGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_UserGrpTitle, $sGroups_Description)
{
      //Call method to login to site with valid credentials
  		 loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));
  
      // Checking for the members in the Group to select
  		if(_isVisible(_link($sGroups_UserGrpTitle)))
        {
           // Print the message
         	_log($msg_RecordAllreadyCreated);
        }
		else
		{
  
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_UserGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sGroups_Description);

              // Click on Next
              _click(_submit($submit_Next));

              // Select the check box
            //  _click(_checkbox($chkbox_SelectedUser_1st));

              // Click on Add Group
              _click(_submit($submit_AddGroup));

              // Verifying created Group is present 
              _assertVisible(_link($sGroups_UserGrpTitle));

              _wait(3000);
			}    

		// Log out from app
          logOut();
  
  		//Call method to login to site with valid credentials
	       loginToSite($sURL,$sEmployee_account,$sDomainName5_Password); 

		 _wait(5000);
			
		// Click on Contact groups
		    _click(_link($lnk_Groups));
			
		// Verifying the result is visible or not
  		  _assertNotVisible(_link($sGroups_UserGrpTitle));

	      // Log out from app
	        logOut();
}

/*
Function Name 		:  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other organization's  'Organization  admins' 
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
              // Print the message
         	_log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));
  
  		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
       _click(_link($lnk_PolicyGroups));
  
		// Verifying that User group is not present 
  		_assertNotVisible(_div($sGroups_PolicyGrpTitle));

		// Log out from app
          	logOut();
}

/*
Function Name 		:  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other Organization member
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_PolicyGrpTitle, $sDescription)
{
			//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  				_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
            	  // Print the message
         		_log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_link($lnk_OrgMember_OrgBanIND));

		_wait(5000);
		
		// Click on Contact groups
		    _click(_link($lnk_Groups));

		// Verifying the result is visible or not
	      _assertNotVisible(_div($sGroups_PolicyGrpTitle));
	
	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to other 'employee/user'
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_PolicyGrpTitle, $sDescription)
{
		//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  			_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
                // Print the message
              _log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();		

			//Call method to login to site with valid credentials
	       loginToSite($sURL,$sEmployee_account,$sDomainName5_Password); 

		 _wait(5000);
			
		// Click on Contact groups
		    _click(_link($lnk_Groups));
			
		// Verifying the result is visible or not
  		  _assertNotVisible(_link($sGroups_PolicyGrpTitle));

	      // Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   03 June 2016
Description		   	   :   This method is used to Verify that Policy groups created by  Organization admin is not  visible to Domain Admin
Input					  :    $sGroups_UserGrpTitle, $sGroups_Description
*/

function  verifyThatPolicyGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_PolicyGrpTitle, $sDescription)
{
		//Call method to login to site with valid credentials
  			   loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 
	
  			_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	        // Click on Groups
	         _click(_link($lnk_Groups));
	
			// Click on Policy Groups
			_click(_link($lnk_PolicyGroups));
	
  			// Checking for the Policy is visible in the list
			if(_isVisible(_link($sGroups_PolicyGrpTitle)))
	        { 
                // Print the message
              _log($msg_RecordAllreadyCreated);
             }
  			else
  			{
  			
			// Click on '+' icon
	        _click(_link($plusicon_Groups));		
	
	 		// Enter the Tilte
	        _setValue(_textbox($txtbox_Title), $sGroups_PolicyGrpTitle);
	
	        // Enter the Description
	        _setValue(_textarea($txtarea_Description), $sDescription);
	
	        // Click on Next
	        _click(_submit($submit_Next));
	
			// Click on Add Group
	        _click(_submit($submit_AddGroup));
	
	        // Verifying created Group is present or not in frame
	        _assertVisible(_link($sGroups_PolicyGrpTitle));
              
            }	  
	  		_wait(3000);
	        
			// Log out from app
	          logOut();		

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		// Click on Groups
         _click(_link($lnk_Groups));

        // Click on User Groups
        _click(_link($lnk_UserGroups));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sGroups_UserGrpTitle));
  
  		// Log out from app
          logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Contact groups created by Organization admin is not visible other domain admins
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToAnyDomainAdmins($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  				_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
              // Click on User icon
              _click(_button($btn_Usericon));

              // Click on Domain Admin
              _click(_link($lnk_DomainAdmin));

            // Click on Groups
             _click(_link($lnk_Groups));

             // Click on Contact Groups
            _click(_link($lnk_ContactGroups));

            // Verifying that User group is not present 
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
              logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 May 2016
Description		   	   :   This method is used to Verify that Contact groups created by  Organization admin is not  visible to other 'Organization  admins'
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrganizationsOrgAdmins($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  					_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

                //Call method to login to site with valid credentials
                loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

                _wait(5000);

              // Click on User icon
              _click(_button($btn_Usericon));

              // Click on Organization Admin
              _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

            // Click on Groups
             _click(_link($lnk_Groups));

            // Click on Contact Groups
            _click(_link($lnk_ContactGroups));

            // Verifying that User group is not present 
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
                logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 June 2016
Description		   	   :   This method is used to Verify that contact   groups created by  Organization admin is not  visible to other Organization member
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  				_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();

             //Call method to login to site with valid credentials
              loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

              _wait(5000);

            // Click on User icon
            _click(_button($btn_Usericon));

            // Click on Organization Member
            _click(_link($lnk_OrgMember_OrgBanIND));

          _wait(5000);

          // Click on Contact groups
              _click(_link($lnk_Groups));

          // Verifying the result is visible or not
            _assertNotVisible(_div($sGroups_ContactGrpTitle));

            // Log out from app
              logOut();
}

/*
Function Name 		:  verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   06 June 2016
Description		   	   :   This method is used to Verify that contact  groups created by  Organization admin is not  visible to other 'employee/user'
Input					:    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactGroupsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_ContactGrpTitle, $sDescription )
{
				//Call method to login to site with valid credentials
			      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA
		
  				_wait(10000);
  
		        // Click on User icon
		        _click(_button($btn_Usericon));
		
		        // Click on Organization Admin
		       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
		
		        // Click on Groups
		         _click(_link($lnk_Groups));
		
				// Click on Contact Groups
				_click(_link($lnk_ContactGroups));
	
  				// Checking for the Group name in the list 
	     		if(_isVisible(_link($sGroups_ContactGrpTitle)))
		        {
                  	 // Print the message
         			_log($msg_RecordAllreadyCreated);
		       }
				else
                {
				// Click on '+' icon
		        _click(_link($plusicon_Groups));
	
				// Enter the Tilte
		        _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);
		
		        // Enter the Description
		        _setValue(_textarea($txtarea_Description), $sDescription);
		
		        // Click on Next
		        _click(_submit($submit_Next));
		
				// Click on Add Group
		        _click(_submit($submit_AddGroup));
	
	 			// Verifying created Group is present or not in frame
		        _assertVisible(_link($sGroups_ContactGrpTitle));
                
               }

		  		_wait(3000);
  				
				// Log out from app
		          logOut();
		
                //Call method to login to site with valid credentials
               loginToSite($sURL,$sEmployee_account,$sDomainName5_Password); 

             _wait(5000);

            // Click on Contact groups
                _click(_link($lnk_Groups));

            // Verifying the result is visible or not
              _assertNotVisible(_link($sGroups_UserGrpTitle));

              // Log out from app
                logOut();
            
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other domain admins
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
  		       loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
             // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	      _click(_link($lnk_DomainAdmin));

		 // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	    // Click on ALL MBNs
		_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Org admins
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function   verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
  		       loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);
	
  			_wait(10000);	
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
              // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

		 // Click on MBN Mgmt
	       _click(_link($lnk_MBNmgmt));
	
	    // Click on ALL MBNs
		_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
			 _wait(3000); 
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  06 June 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Organization member
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOrganizationMember($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
  		       loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
              
                // Selecting a Assign and Storing the Assign name
	          _click(_radio($radiobtn_SelectMembr_V));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
		
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
  
  		// Click on Organization Member
	      _click(_link($lnk_OrgMember_OrgBanIND));
	      
		 // Click on MBN Mgmt
	      _click(_link($lnk_OM_MBNs));
	
	    // Click on ALL MBNs
  		_click(_link($lnk_AllMBNs));
			
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

/*
Function Name 		:  verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    	     :  Anantha N
Created Date 	      :  06 May 2016
Description		        :  This method is used to Verify that MBN created by Organization admin is not visible to other Employee Or User
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifythatMBNCreatedByOrgAdminIsNotVisibleToOtherOtherEmployeeOrUser($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
	    	//Call method to login to site with valid credentials
  		       loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);
	
  				_wait(10000);
  
	          // Click on User icon
	          _click(_button($btn_Usericon));
	
	          // Click on Organization Admin
	         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	          // Click on MBN Mgmt
	          _click(_link($lnk_MBNmgmt));
	
	          // Click on ALL MBNs
			_click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));
	
	          //** Searching for the MBN Number **//
	          // Click on Search Icon
	          _click(_italic($icon_Search));
	          
  				// Enter the MBN number
	            _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  				// Click on Search 
	          _click(_submit($submit_Search));
	
  			// Check for MBN number with Voice
	          if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
	          {
	             // Print the message
         			_log($msg_RecordAllreadyCreated);
	          }
  			else
            {
	          // Click on Add icon 
	          _click(_link($splusicon_MBN_OrgAdmin));
	
	          // Select the country
	          _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);
	
	          // Enter the MBN Number
	          _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);
	
	          // Select the MBN Type
	          _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);
	
	          // Select MBN provider
	          _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);
	
	          // Enter the MBN notes
	          _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);
	
	          // Click on Next
	          _click(_submit($submit_Next));
	
	         // Click on Create
	          _click(_submit($submit_Create));
	
            }  
	
	          // Log out from app
	          logOut();
  
  			//Call method to login to site with valid credentials
	        loginToSite($sURL,$sEmployee_account,$sDomainName5_Password);
	
	        _wait(5000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Domain Admin
	     // _click(_link($lnk_DomainAdmin));

		 // Click on MBN Mgmt
	      _click(_link($lnk_OM_MBNs));
	
	    // Click on ALL MBNs
  		_click(_link($lnk_AllMBNs));
			
	    //** Searching for the MBN Number **//
	    // Click on Search Icon
	      _click(_italic($icon_Search));
	          
  		// Enter the MBN number
	      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);
	        
  		// Click on Search 
	      _click(_submit($submit_Search));

		// Verifying that User group is not present 
		_assertNotVisible(_div($sMBNnumber_VO_OrgAdmin));
  
  		// Log out from app
          logOut();
	
}

//****************************June 07 2016****************************

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other domain admins
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
  {
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

    	_wait(10000);
    
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

        _wait(5000);

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // Verifying that User group is not present 
            _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
  }

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other Organization admins
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgAdmins($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	    _wait(5000);
  
	    // Click on User icon
	     _click(_button($btn_Usericon));
	
	   // Click on Organization Admin
	      _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

        // click on Policies
        _click(_link($lnk_Policies));

        // click on Policy Sets
        _click(_link($lnk_PolicySets));

        // Verifying that User group is not present 
            _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
}

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgmember
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other Organization member
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherOrgmember($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 
	
	    _wait(5000);
  
	    // Click on User icon
	     _click(_button($btn_Usericon));
	
	   // Click on Organization Member
	      _click(_link($lnk_OrgMember_OrgBanIND));

        // click on Policies
        _click(_link($lnk_Policies));

       // Verifying that User group is not present 
         // _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));
		_assertNotVisible(_link($sPolicyName_OrgAdmin));
        // Logout from the application
            logOut();
}

/*
Function Name 		:   verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   07 June 2016
Description		   	   :   This method is used to Verify that Policy created by Organization admin is not visible to other employee/user
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifythatPolicyCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
        else
         {
              // click on Pluse icon
              _click(_link($plusIcon_Policies));

              // Enter Policy name
              _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

              // Enter the description
              _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

              // Click on next button for 1
              _click(_submit($lnk_Next));

              // Click on next button for 2
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 3
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 4
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on next button for 5
              _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

              // Click on add policy
              _click(_button($btn_AddPolicy));
        }        		

        // Verify added policy should be displayed in the mid frame
        _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

        // Logout from the application
        logOut();

       //Call method to login to site with valid credentials
	      loginToSite($sURL,$sEmployee_account,$sDomainName5_Password);
	
	    _wait(5000);
  
	    // click on Policies
        _click(_link($lnk_Policies));

       // Verifying that User group is not present 
         _assertNotVisible(_link($sPolicyName_OrgAdmin, _near(_span($heading_oa_AllPolicies))));

        // Logout from the application
            logOut();
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other domain admins
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

      _wait(5000);
  
       // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      // Verifying that Custom Report is not present 
         _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other Organization admin
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

      _wait(5000);
  
      // Click on User icon
        _click(_button($btn_Usericon));

     // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      // Verifying that Custom Report is not present 
         _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other Organization Member
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

      _wait(5000);
  
      // Click on User icon
        _click(_button($btn_Usericon));

     // Click on Organization Member
	   _click(_link($lnk_OrgMember_OrgBanIND));

      // Click 'Reports'
      _click(_link($lnk_Reports));

     // Verifying that Custom Report is not present 
       _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

/*
Function Name 		:  verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    	     :  Anantha N
Created Date 	      :  07 June 2016
Description		        :  This method is used to Verify that custom report created by Organization admin is not visible to other 'employee/user'
Input			          :  $sCustomReport_Title1, $sCustomReport_Description, 
*/

function verifyThatCustomReportCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sCustomReport_Title1, $sCustomReport_Description)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click 'Reports'
      _click(_link($lnk_Reports));

      // Click Custom Reports
      _click(_link($lnk_CustomReports));

      if(_isVisible(_link($sCustomReport_Title1)))
        {
          // Print the message
          _log($msg_RecordAllreadyCreated);
        }
  		else
  		{
            // Click on '+' icon 
            _click(_link($plusicon_Report_OrgAdmin));

            // Enter the Title of Custom report
            _setValue(_textbox($txtbox_Title), $sCustomReport_Title1);

            // Enter the Description
            _setValue(_textarea($txtarea_Description), $sCustomReport_Description);

            // Click Next
            _click(_submit($submit_Next));

            // choosing the desired report columns.
            _click(_checkbox($chk_Message_1, _in(_div($chk_Message))));
            _click(_checkbox($chk_MessageId_2, _in(_div($chk_MessageId))));

            // Click on Next
            _click(_button($btn_Nxt));

           // Click on Add Report
            _click(_submit($lnk_AddReport));
  		}
      // Verifying the created report
      _assertEqual($sCustomReport_Title, _getText(_link($sCustomReport_Title)));

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
        loginToSite($sURL,$sEmployee_account,$sDomainName5_Password);  

      _wait(5000);
  
      // Click 'Reports'
  	    _click(_link($lnk_Reports));

     // Verifying that Custom Report is not present 
       _assertNotVisible(_link($sCustomReport_Title1, _near(_heading2($heading_oa_CustReports))));

     // Logout from the application
         logOut();
  
}

//****************************June 08 2016****************************

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other domain admins
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherDomainAdmins($sGroups_ContactGrpTitle, $sDescription )
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Checking for the Group name in the list 
        if(_isVisible(_link($sGroups_ContactGrpTitle)))
        {
              // Print the message
              _log($msg_RecordAllreadyCreated);
        }
        else
          {
                // Click on '+' icon
                _click(_link($plusicon_Groups));

                // Enter the Tilte
                _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

                // Enter the Description
                _setValue(_textarea($txtarea_Description), $sDescription);

                // Click on Next
                _click(_submit($submit_Next));

                // Click on Add Group
                _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

        _wait(5000);

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other Organization admin
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgAdmin($sGroups_ContactGrpTitle, $sDescription )
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

          // Checking for the Group name in the list 
          if(_isVisible(_link($sGroups_ContactGrpTitle)))
          	{
                // Print the message
                _log($msg_RecordAllreadyCreated);
          	}
          else
          {
                // Click on '+' icon
                _click(_link($plusicon_Groups));

                // Enter the Tilte
                _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

                // Enter the Description
                _setValue(_textarea($txtarea_Description), $sDescription);

                // Click on Next
                _click(_submit($submit_Next));

                // Click on Add Group
                _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

        _wait(5000);

        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
        _click(_div($lnk_OrgAdmin_Org1IND, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgMember
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other Organization member
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherOrgMember($sGroups_ContactGrpTitle, $sDescription )
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click on Groups
        _click(_link($lnk_Groups));

        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

          // Checking for the Group name in the list 
          if(_isVisible(_link($sGroups_ContactGrpTitle)))
            {
                // Print the message
                _log($msg_RecordAllreadyCreated);
            }
        else
          {
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sDescription);

              // Click on Next
              _click(_submit($submit_Next));

              // Click on Add Group
              _click(_submit($submit_AddGroup));
          }
  
        // Verifying created Group is present or not in frame
        _assertVisible(_link($sGroups_ContactGrpTitle));

        _wait(3000);

        // Log out from app
        logOut();

        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName5,$sDomainName5_Password); 

        _wait(5000);

        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Member
        _click(_link($lnk_OrgMember_OrgBanIND));


        // Click on Contact Groups
        _click(_link($lnk_ContactGroups));

        // Verifying that Contact group is not present 
        _assertNotVisible(_link($sGroups_ContactGrpTitle));

        // Log out from app
        logOut();

}

/*
Function Name 		:   verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Contacts created by Organization admin  is not visible to other 'employee/user'
Input					 :    $sGroups_ContactGrpTitle, $sDescription
*/

function verifyThatContactsCreatedByOrgAdminIsNotVisibleToOtherEmployeeOrUser($sGroups_ContactGrpTitle, $sDescription )
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); // QA

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

        // Checking for the Group name in the list 
        if(_isVisible(_link($sGroups_ContactGrpTitle)))
       	 {
        	  // Print the message
          	_log($msg_RecordAllreadyCreated);
        }
           else
        	{
              // Click on '+' icon
              _click(_link($plusicon_Groups));

              // Enter the Tilte
              _setValue(_textbox($txtbox_Title), $sGroups_ContactGrpTitle);

              // Enter the Description
              _setValue(_textarea($txtarea_Description), $sDescription);

              // Click on Next
              _click(_submit($submit_Next));

              // Click on Add Group
              _click(_submit($submit_AddGroup));
           }
      
  	  // Verifying created Group is present or not in frame
      _assertVisible(_link($sGroups_ContactGrpTitle));

      _wait(3000);

      // Log out from app
      logOut();

      //Call method to login to site with valid credentials
     loginToSite($sURL,$sEmployee_account,$sDomainName5_Password); 

      _wait(5000);

       // Click on Contact Groups
      _click(_link($lnk_ContactGroups));

      // Verifying that Contact group is not present 
      _assertNotVisible(_link($sGroups_ContactGrpTitle));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgaAdminCanChangeOwnerOfTheMemberWhoHasAssociatedWithMBN
Author 	 	    	     :  Anantha N
Created Date 	      :  08 June 2016
Description		        :  This method is used to Verify that Organization admin can change owner of the member who has associated with MBN
Input			          :  $sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin
*/

function verifyThatOrgaAdminCanChangeOwnerOfTheMemberWhoHasAssociatedWithMBN($sMBNCountry_OrgAdmin, $sMBNnumber_VO_OrgAdmin, $sMBNType_VO_OrgAdmin, $sMBNProvider_OrgAdmin, $sMBNnotes_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on MBN Mgmt
      _click(_link($lnk_MBNmgmt));

      // Click on ALL MBNs
       _click(_link($lnk_AllMBNs, _near(_link($lnk_MBNmgmt))));

      //** Searching for the MBN Number **//
      // Click on Search Icon
      _click(_italic($icon_Search));

      // Enter the MBN number
      _setValue(_textbox($txtbox_MBN), $sMBNnumber_VO_OrgAdmin);

      // Click on Search 
      _click(_submit($submit_Search));

      // Check for MBN number present in the list
      if(_isVisible(_div($sMBNnumber_VO_OrgAdmin)))
      	{
        	// click on Delete icon
        		_click(_link($lnk_DeleteMBN));

          // click on Yes button
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
      }

      // Click on Add icon 
      _click(_link($splusicon_MBN_OrgAdmin));

      // Select the country
      _setSelected(_select($drpdwn_MBNcountry), $sMBNCountry_OrgAdmin);

      // Enter the MBN Number
      _setValue(_textbox($txtbox_MBNnumber), $sMBNnumber_VO_OrgAdmin);

      // Select the MBN Type
      _setSelected(_select($drpdwn_MBNtype), $sMBNType_VO_OrgAdmin);

      // Select MBN provider
      _setSelected(_select($drpdwn_MBNprovider), $sMBNProvider_OrgAdmin);

      // Enter the MBN notes
      _setValue(_textarea($txtarea_MBNNotes), $sMBNnotes_OrgAdmin);

      // Click on Next
      _click(_submit($submit_Next));

     // Click on Create
      _click(_submit($submit_Create));

      // Click on created MBN
      _click(_div($sMBNnumber_VO_OrgAdmin));

      // Click on AssignTo
      _click(_link($lnk_assignTO));

      // Click on Change Owner
      _click(_link($link_ChangeOwner, _near(_heading2($heading_MBNOwner))));

      // Selecting a Assign and Storing the Assign name
      _click(_radio($radiobtn_SelectMembr_V));

      var $assignMBN_name = _getText(_div($sAssignName_MBN));
      // Print the Assign Name	
     _log($assignMBN_name);

      // Click on Create
      _click(_button($btn_Change));

      if(_isVisible(_div($msg_MBN_successOwner)))
      	{
      		// Click on created MBN
      		_click(_div($sMBNnumber_VO_OrgAdmin));

          // Click on AssignTo
          _click(_link($lnk_assignTO));
      }

      // Verify the Assign Name
      _assertEqual($assignMBN_name, _getText(_span($assignMBN_name)));

      // Log out from app
      logOut();
}

/*
Function Name 		:  verifyThatOrgaAdminCanIncludePolicyMembersBySelectingMembersIndividuallyFromTheMemberListWhileCreatingAPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting members individually from the member list while creating a policy.
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

  function verifyThatOrgaAdminCanIncludePolicyMembersBySelectingMembersIndividuallyFromTheMemberListWhileCreatingAPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
    _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
            _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1 - Details
      _click(_submit($lnk_Next));

      // Click on next button for 2 - Cofiguration
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3 - Security setting
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4 - Application setting
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 5 - Assign Groups
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
      // Select the member - Assign Members
  		
  
    //  _click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
  		
	   _setValue(_textbox($txtbox_Policy_AssignMemebers), $strng_Name);
  
  	   // CLick Apply
  		_click(_button($btn_Apply_AssignMembers, _near(_heading4($heading_AssignMembers_Policy))));

  	  _click(_checkbox($chkbox_ON, _near(_strong($strng_Name))));
  
     // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Logout from the application
      logOut();
}

/*
Function Name 		: verifyThatOrgaAdminCanIncludePolicyMembersBySelectingAPolicyGroupsWhileCreatingAPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   08 June 2016
Description		   	   :   This method is used to Verify that Organization admin can include policy members by selecting a Policy Groups while creating a policy
Input					:    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

  function verifyThatOrgaAdminCanIncludePolicyMembersBySelectingAPolicyGroupsWhileCreatingAPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

  //***** Adding Policy Groups *****//
      // Click on Groups
      _click(_link($lnk_Groups));

      // Click on Policy Groups
      _click(_link($lnk_PolicyGroups));

      // Click on '+' icon
      _click(_link($plusicon_Groups));		

      // Enter the Tilte
      _setValue(_textbox($txtbox_Title), $nw_policy);

      // Click on Next
      _click(_submit($submit_Next));

      // Click on Add Group
      _click(_submit($submit_AddGroup));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

      if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
            	_click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon))));
           
          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1 - Details
      _click(_submit($lnk_Next));

      // Click on next button for 2 - Configuration
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3 - Configuration2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4 - Configuration3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	  // Select the Group	
  //    _click(_checkbox($chkbox_ON, _near(_strong($s_grp_Policy))));
		_click(_checkbox("on", _near(_strong($nw_policy))));	
  
      // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Logout from the application
      logOut();
}

//************************* June 09 2016 *********************************

/*
Function Name 		: verifyThatOrgAdminCanEditPolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   09 June 2016
Description		   	   :   This method is used to Verify that Organization admin can edit  'Policy'
Input					 :    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin
*/

function verifyThatOrgAdminCanEditPolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin, $sPolicyDescription_edit_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  	
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

	// Checking for the Policy name in the list 	
  	  if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
            // Click on Policy
            _click(_link($sPolicyName_OrgAdmin));

            // Click on Delete
          _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

          // Click on Yes to delete the policy
          _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));
        }

      // click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1
      _click(_submit($lnk_Next));

      // Click on next button for 2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	 // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));

      // Verify added policy should be displayed in the mid frame
      _assertEqual($sPolicyName_OrgAdmin, _getText(_link($sPolicyName_OrgAdmin)));

      // Click on Policy
        _click(_link($sPolicyName_OrgAdmin));   

    // Click Edit
     _click(_italic($btn_pencil_EditIcon, _near(_italic($btn_icon_Trash))));

      // Enter the description
          _setValue(_textarea($txtarea_Description), $sPolicyDescription_edit_OrgAdmin);

      // Click on next button for 1 Edit policy
          _click(_submit($lnk_Next));

      // Click on next button for 2 Edit policy
        _click(_button($btn_Nxt, _near(_button($btn_Back))));

      // Click on next button for 3 Edit policy
        _click(_button($btn_Nxt, _near(_button($btn_Back))));

      // Click on Save Changes
      _click(_button($btn_SaveChanges));

      // Verifying the Description
	  _assertEqual($sPolicyDescription_edit_OrgAdmin, _getText(_div($sPolicyDescription_edit_OrgAdmin, _near(_label($lbl_Description)))));

      // Logout from the application
          logOut();
}

/*
Function Name 		: verifyThatOrgAdminCanDeletePolicy
Author 	 	    		:	Anantha N
Created Date 	 	 :   09 June 2016
Description		   	   :   This method is used to Verify that Organization admin can edit  'Policy'
Input					 :    $sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin
*/

function verifyThatOrgAdminCanDeletePolicy($sPolicyName_OrgAdmin, $sPolicyDescription_OrgAdmin)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL, $sDomainName4_OA, $sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // click on Policies
      _click(_link($lnk_Policies));

      // click on Policy Sets
      _click(_link($lnk_PolicySets));

	// Checking for the Policy name in the list 	
  	  if(_isVisible(_link($sPolicyName_OrgAdmin)))
         {
             // Print the message
          	_log($msg_RecordAllreadyCreated);     
        }
  else{
  			// click on Pluse icon
      _click(_link($plusIcon_Policies));

      // Enter Policy name
      _setValue(_textbox($txt_Name), $sPolicyName_OrgAdmin);

      // Enter the description
      _setValue(_textarea($txtarea_Description), $sPolicyDescription_OrgAdmin);

      // Click on next button for 1
      _click(_submit($lnk_Next));

      // Click on next button for 2
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 3
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click on next button for 4
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));
  
  	 // Click on next button for 5
      _click(_button($lnk_Next, _near(_button($btn_SaveasDraft))));

      // Click Add policy
      _click(_button($btn_AddPolicy));
  }
      // Click on Policy
      _click(_link($sPolicyName_OrgAdmin));

      // Click on Delete
      _click(_italic($btn_icon_Trash, _near(_italic($btn_pencil_EditIcon)))); 

      // Click on Yes to delete the policy
      _click(_button($btn_Yes, _near(_div($msg_DeletePolicyOrWantToContinue))));

      _wait(5000);

  	// Verify the Appropriate message is displayed
      _assertVisible(_div($msg_PolicyRemoved));

      // Logout from the application
      logOut();
}

/*
Function Name 		:   VerifyOrganizationAdminCanAddContacts
Author 	 	    		:	Anantha N
Created Date 	 	 :   02 May 2016
Description		   	   :   This method is used to verify That OrgAdmin Can Add Contacts
Input					:    
*/

function VerifyOrganizationAdminCanAddContacts()
{

  			//Call method to login to site with valid credentials
	          loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  			_wait(10000);
  
	        // Click on User icon
	        _click(_button($btn_Usericon));
	
	        // Click on Organization Admin
	        _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
  
  			// Click on My Profile
			_click(_link($lnk_MyProfile));
	
			// Click on 'Contacts'
			 _click(_link($lnk_Contacts, _near(_link($lnk_MyProfile))));
	
			// Click on + icon
			_click(_link($plusIcon_Contacts));
	
			// Select the contact
			_click(_checkbox($chkbox_SelectedUser, _near(_strong($strng_ContactName_OA))));
			
  			// Click on Save
			_click(_button($submit_Save));	

			_wait(2000);			
  
  			// Verifying the Added contact 
			_assertVisible(_strong($strng_ContactName_OA));

			// Click on Contact name
			_click(_link($strng_ContactName_OA));

			// Click on Delete Icon
			_click(_link($icon_Profile_DeleteIcon));

			// Click Yes
			_click(_button($btn_Yes, _near(_heading4($heading_ConfirmRemove))));
		
  			// Logout from the application
			logOut();
}

/*
Function Name 		:  verifyThatOrgAdminCannotPromoteSameOrganizationsMemberAsAnOrgAdminForTheSameOrganization
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that one Organization admin cannot promote same organization's  member as an org admin for the same organization
Input			          :  
*/

function  verifyThatOrgAdminCannotPromoteSameOrganizationsMemberAsAnOrgAdminForTheSameOrganization()
{
  //Call method to login to site with valid credentials
  loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  _wait(10000);

  // Click on User icon
  _click(_button($btn_Usericon));

  // Click on Organization Admin
 _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

  // Click on Members	
  _click(_link($lnk_Members));

  // Click on Active
  _click(_link($lnk_Active));

  // Click on Organization Admin
  _click(_link($lnk_MOrganizationAdmin));

  _wait(4000);

  // Verifying Update Members link not visible
	_assertNotVisible(_link($lnk_UpdateMembers));
  
  // Log out from app
  logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCannotHideOtherOrganizationAdmin
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that Organization admin cannot hide other  organization admin
Input			          :  
*/

function  verifyThatOrgAdminCannotHideOtherOrganizationAdmin()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on Members	
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Organization Admin
      _click(_link($lnk_MOrganizationAdmin));

      _wait(4000);

      // Verifying Update Members link not visible
      _assertNotVisible(_link($lnk_HideUser, _near(_tableHeader($Tableheading_Action))));

      // Log out from app
      logOut();

}

/*
Function Name 		:  verifyThatOrgAdminCanBlockHimself
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that organization admin can block himself
Input			          :  
*/

function  verifyThatOrgAdminCanBlockHimself()
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

      _wait(10000);

      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click on Members	
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Organization Admin
      _click(_link($lnk_MOrganizationAdmin));

      _wait(4000);

      // Verifying Update Members link not visible
      _assertVisible(_link($lnk_BlockMember, _near(_tableHeader($Tableheading_Action))));

      // Log out from app
      logOut();

}

/*
Function Name 		: verifyThatOrgAdminCanAddANewOrgMemberWithinTheSameOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  01 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add a new organization member within the same organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOrgAdminCanAddANewOrgMemberWithinTheSameOrganization($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
	      //Call method to login to site with valid credentials
	      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);
	
  		_wait(10000);
  
	      // Click on User icon
	      _click(_button($btn_Usericon));
	
	      // Click on Organization Admin
	     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));
	
	      // Click Members
	      _click(_link($lnk_Members));
	
	      // Click on Pending
	      _click(_link($lnk_Pending));
    
	        // Click ADD
	          _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));
	
	        // Click on Member
	          _click(_link($lnk_Add_Member));
	
	        // Enter First name
	      _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);
	
	        // Enter Last Name
	      _setValue(_textbox($txtbox_LastName), $sMember_LastName);
	
	        // Enter Title
	      _setValue(_textbox($txtbox_Title), $sMember_Title);
	
	        // Select Location
	      _setSelected(_select($drpdown_Location), $sMember_Location);
	
	        // Enter ZipCode
	      _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	
  			
	        // Enter EmailID
	     _setValue(_textbox($txtbox_s_Email), $email_qa_);

	       // Click Create
	      _click(_submit($submit_Create));
	
	      // Verifying the Messgae 
	      //_assertVisible(_heading3($heading_MemberCreated));
			
		_wait(5000);
		var	$newMemeber	 = _getText(_div($s_EmailNewMember));
	    
		// Click on Close  
	      _click(_button($btn_Close));
	       
		// Verifying the new member is displayed in the list
		_assertVisible(_div($newMemeber));
	      	
			// Log out from app
	        logOut();
}

/*
Function Name 		: verifyThatOrgAdminCanDeleteCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  09 June 2016
Description		        :  This method is used to Verify that Organization admin can delete  'Custom Reports'
Input			          :  
*/

function verifyThatOrgAdminCanDeleteCustomReports()
{
          //Call method to login to site with valid credentials
  		     loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  			_wait(10000);
  
          // Click on User icon
           _click(_button($btn_Usericon));

          // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		// Checking for 
  		if(_isVisible(_link($lnk_Delete )))
        {
          // Click on Delete icon
          	_click(_italic($btn_icon_Trash));
          
          // Click on Yes
          _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));
            
        }
		else
        {
          	_log($msg_report_RecordNotPresent);
        }
           // Log out from app
               logOut();
}

//********************************* June 10 2016  *********************

/*
Function Name 		: verifyThatOrgAdminCanEditCustomReports
Author 	 	    	     :  Anantha N
Created Date 	      :  10 June 2016
Description		        :  This method is used to Verify that Organization admin can edit  'Custom Reports'
Input			          :   $sCustomReport_edit_Title
*/

function verifyThatOrgAdminCanEditCustomReports($sCustomReport_edit_Title)
{
          //Call method to login to site with valid credentials
  		     loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password); 

  			_wait(10000);
  
          // Click on User icon
           _click(_button($btn_Usericon));

          // Click on Organization Admin
         _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

          // Click 'Reports'
          _click(_link($lnk_Reports));

          // Click Custom Reports
          _click(_link($lnk_CustomReports));
  
  		// Checking for Edit link
  		if(_isVisible(_link($lnk_Edit)))
        {
          // Click on edit icon
          	_click(_link($lnk_Edit));
          
           // Enter the Title of Custom report
          _setValue(_textbox($txtbox_Title), $sCustomReport_edit_Title);
          
          // Click Next
          _click(_submit($submit_Next));
          
          // Click Next
          _click(_button($btn_Nxt, _near(_button($btn_Back))));
          
          // Click on Edit report
          _click(_submit($submit_EditReport));
          
          // verifying the report edited or not
          _assertVisible(_link($sCustomReport_edit_Title))
            
        }
		else
        {
          	_log($msg_report_RecordNotPresent);
        }
           // Log out from app
               logOut();
}

/*
Function Name 		:  verifyThatOneOrgAdminCannotDepromoteAnotherOrgAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   10 June 2016
Description		   	   :   This method is used to Verify that Organization admin can  not assign an organization member as a admin of the respective organization
Input					:    
*/

function verifyThatOneOrgAdminCannotDepromoteAnotherOrgAdmin()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Click on Organization Admin
		_click(_link($lnk_OrganizationAdmin));
		
  		// Click on Admins
  		_click(_link($lnk_Admins));
		
  		_assertNotVisible(_link($lnk_Unassign));

        // Log out from app
        logOut();
}

/*
Function Name 		:  verifyThatOneOrgAdminCannotIncludeAEmployeeOrUserAddedByDomainAdmin
Author 	 	    		:	Anantha N
Created Date 	 	 :   10 June 2016
Description		   	   :   This method is used to Verify that Organization admin cannot include a employee/user added by domain admin
Input					:    
*/

function verifyThatOneOrgAdminCannotIncludeAEmployeeOrUserAddedByDomainAdmin()
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

         // Click on User Roles
          _click(_link($lnk_UserRoles));
		
		// Verifying Domain	link is not present
  		_assertNotVisible(_link($lnk_DomainAdmin));

        // Log out from app
        logOut();
}
//***************************************** 13 June 2016 *******************

/*
Function Name 		: verifyThatOneOrgAdminCanAddAnUserIntoTheRespectiveOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add an 'User ' into the respective organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOneOrgAdminCanAddAnUserIntoTheRespectiveOrganization($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
          _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click Members
        _click(_link($lnk_Members));

        // Click ADD
        _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));

        // Click on Member
        _click(_link($lnk_Add_Member));

        // Enter First name
        _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);

        // Enter Last Name
        _setValue(_textbox($txtbox_LastName), $sMember_LastName);

        // Enter Title
        _setValue(_textbox($txtbox_Title), $sMember_Title);

        // Select Location
        _setSelected(_select($drpdown_Location), $sMember_Location);

        // Enter ZipCode
        _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	

        // Enter EmailID
        _setValue(_textbox($txtbox_s_Email), $email_qa_);

        // Click Create
        _click(_submit($submit_Create));

        _wait(5000);
        var	$newMemeber	 = _getText(_div($s_EmailNewMember));

        // Click on Close  
        _click(_button($btn_Close));

      // Click on Pending
         _click(_link($lnk_Pending));

      // Click on Search button
        _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
        _setValue(_textbox($txtbox_Email), $newMemeber);

      // Click on Search
        _click(_submit($submit_Search));

        // Verifying the new member is displayed in the list
        _assertVisible(_div($newMemeber));

        // Log out from app
        logOut();
}

/*
Function Name 		: verifyThatOrgAdminCandeleteAnUserIntoTheDomain
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Organization admin can add an 'User ' into the respective organization
Input					  :  $sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode
*/


function verifyThatOrgAdminCandeleteAnUserIntoTheDomain($sMember_FirstName,$sMember_LastName,$sMember_Title,$sMember_Location,$sMember_ZipCode)
{
        //Call method to login to site with valid credentials
        loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
        // Click on User icon
        _click(_button($btn_Usericon));

        // Click on Organization Admin
       _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

        // Click Members
        _click(_link($lnk_Members));

        // Click on ALL
          _click(_link($lnk_ALL, _near(_link($lnk_Members))));

        // Click ADD
        _click(_button($lnk_Add, _near(_link($lnk_StrtConversation))));

        // Click on Member
        _click(_link($lnk_Add_Member));

        // Enter First name
        _setValue(_textbox($txtbox_FirstName), $sMember_FirstName);

        // Enter Last Name
        _setValue(_textbox($txtbox_LastName), $sMember_LastName);

        // Enter Title
        _setValue(_textbox($txtbox_Title), $sMember_Title);

        // Select Location
        _setSelected(_select($drpdown_Location), $sMember_Location);

        // Enter ZipCode
        _setValue(_textbox($txtbox_zipCode), $sMember_ZipCode);	

        // Enter EmailID
        _setValue(_textbox($txtbox_s_Email), $email_qa_);

        // Click Create
        _click(_submit($submit_Create));

        _wait(5000);
        var	$newMemeber	 = _getText(_div($s_EmailNewMember));

        // Click on Close  
        _click(_button($btn_Close));

      // Click on Search button
        _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
        _setValue(_textbox($txtbox_Email), $newMemeber);

      // Click on Search
        _click(_submit($submit_Search));

        // Click Delete icon
        _click(_link($lnk_deleteUser));

        // Click Yes button
        _click(_button($btn_Yes, _near(_heading4($heading_ConfirmDelete))));

        // Verifying Member deleted message is displayed
        _assertVisible(_div($msg_MemberDeleted));

        // Log out from app
        logOut();
}

/*
Function Name 		: verifyThatOneOrgAdminCanUnblockOrgMemberWhoIsAssociatedToTheRespectiveOrganization
Author 	 	    		:  Anantha N
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that organization admin can unblock  organization member who is associated to the respective organization
Input					  :  $sDomainName5
*/

function verifyThatOneOrgAdminCanUnblockOrgMemberWhoIsAssociatedToTheRespectiveOrganization($sDomainName5)
{
      //Call method to login to site with valid credentials
      loginToSite($sURL,$sDomainName4_OA,$sDomainName4_OA_Password);

  		_wait(10000);
  
      // Click on User icon
      _click(_button($btn_Usericon));

      // Click on Organization Admin
     _click(_div($lnk_OrgAdmin_NorthwesternMutual1, _near(_span($s_ADMIN))));

      // Click Members
      _click(_link($lnk_Members));

      // Click on Active
      _click(_link($lnk_Active));

      // Click on Search button
      _click(_div($div_oa_Search, _near(_div($div_oa_Tools))));

      // Enter the Email  
      _setValue(_textbox($txtbox_Email), $sDomainName5);

      // Click on Search
      _click(_submit($submit_Search));
      _wait(6000);
      var $status;

      // Checking for the Unblock icon for the record
      if(_isVisible(_link($lnk_UnblockMember, _near(_div($sDomainName5)))))
        {
            // Click Unblock Member
            _click(_link($lnk_UnblockMember));

            // Click on UnBlock Member
            _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));

        }
        else
        {
            // Click on Block Member
            _click(_link($lnk_BlockMember));

            // Click on 'Yes' button
            _click(_button($btn_Yes, _near(_heading4($titl_BlockMember))));

            // Click on Unblock Member
            _click(_link($lnk_UnblockMember));

            // Click On Yes button
            _click(_button($btn_Yes, _near(_heading4($titl_UnBlockMember))));
        }

      // Verifying the Unblocked Msg
      _assertVisible(_div($msg_MemberUnBlocked));

      // Log out from app
      logOut();
}
/*********************************************************************************************************************************************************/
/*
Function Name 		: createUser_Under_AllUserSection
Author 	 	    		:  Divya
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that DA can create users
Input					  :  $sMemberFirstName,$sMemberLastName,$sMemberEmail
*/
function createUser_Under_AllUserSection($sMemberFirstName,$sMemberLastName,$sMemberEmail)
{
	//Call method to login to site with valid credentials
	loginToSite($sURL,$sDomainName1,$sDomainName1_Password);

	//Click on User Management link
	_wait(10000,_isVisible(_link($lnk_UserManagement)));
	
	_click(_link($lnk_UserManagement));

	//Click on All link under User management
	_click(_link($lnk_UMAll, _under(_link($lnk_UserManagement))));

	//Click on All users link
	_click(_link($lnk_UMAllUsers));
	
	_wait(2000);
	$sMemberEmail=$dEmail;
	$sMemberLastName=$dName;
	//Click on search icon
	_click(_div($btn_SearchMembers));
	
	//Enter last name to search member name
	_setValue(_textbox($txt_MEmailId), $sMemberEmail);
	
	//Click on search button
	_click(_submit($btn_Search));
	
	//Check existance of member 
    if(_exists(_div($sMemberEmail)))
    {	
       var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);
      
      //Click on delete icon near by member name
      _click(_link("/Delete/", _near(_div($sMemberEmail))));

       //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
    }
	else
	{
	_log("Member do not exist");
	}
	//Click on + icon
	_wait(6000,_isVisible(_link($icon_plus, _near(_heading2($txt_All)))));
	_click(_link($icon_plus, _near(_heading2($txt_All))));

	//Enter Member first name
	_setValue(_textbox($txt_FirstName),$sMemberFirstName);

	//Enter Member last name
    _setValue(_textbox($txt_LastName), $sMemberLastName);

	//Enter member title
    _setValue(_textbox($txt_Title),$sMemberTitle);

	//select location
    _setSelected(_select($txt_MemberLocation),$sMemberLocation);

	//Enter zip code
    _setValue(_textbox($txt_MemberZipCode),$sMemberZipCode);

	//Enter member email
    _setValue(_textbox($txt_MemberEmail), $sMemberEmail);

	//Click on create button
    _click(_submit($btn_MemberCreate));
	_wait(2000);
	//Validation 1: Domain admin should be able to add an user successfully.
	
    _assertVisible(_heading2("Congratulations! Member has been created."));   

	_log("Congratulations! Member has been created."+" "+$sMemberEmail);
	//Click on close button
	_wait(10000,_isVisible(_button($btn_MemberClose)));
    _click(_button($btn_MemberClose));
	
	// Log out from app
    //  logOut();
}












/*
Function Name 		: verifyDACanpromoteUserASOAUnderUR
Author 	 	    		:  Divya
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Domain admin can promot any user as org admin displayed under domain admin list.
*/
function verifyDACanpromoteUserASOAUnderUR($sMemberFirstName,$dName)
{
  
  //Scroll downwards
	_call(_div("sub-sidebar-content-inner").scrollTop=5000); 

	if(_isVisible(_link($sMemberFirstName+" "+$dName)))
    {
      //Click on created organisation
      _click(_link($sMemberFirstName+" "+$dName));
      
      //Click on Admins
    _click(_link($lnk_Admins));
      
      //Click on + to assign members
	_click(_link($lnk_AssignMemebrs));

	//Set created user in text box
	_setValue(_textbox($txt_GName), $sMemberFirstName+" "+$dName);

    //Click on Apply button
    _click(_button($btn_Apply));

    //Click on check box
    _click(_checkbox($chk_Box_ON, _near(_strong($sMemberFirstName+" "+$dName))));

    //Click on save button
    _click(_button($btn_GSave));
    }
    else
    {
      _log("Created organisation is not found");
    }
}
/*
Function Name 		: verifyDACanDepromoteOrgMember
Author 	 	    		:  Divya
Created Date 	 	 :  13 June 2016
Description		   	   :  This method is used to Verify that Domain admin can depromot any user from org admin role displayed under domain admin list.
*/
function verifyDACanDepromoteOrgMember($sMemberFirstName,$dName)
{
  
  if(_isVisible(_link($sMemberFirstName+" "+$dName)))
    {
      //Click on created organisation
      _click(_link($sMemberFirstName+" "+$dName));
      
      //Click on Admins
    _click(_link($lnk_Admins));
      
      var $el=_div("list-view-table-main table-responsive-full clearfix");        
	   _call($el.scrollLeft=300);
      
      //Clik on Unassign near created org member
      _click(_link($lnk_GUnassign, _near(_div($sMemberFirstName+" "+$dName))));
      
      //Click on Yes on Block Confirmation Pop up
        _click(_button($btn_YesToBlockAdmin));   
      
    }
else
    {
      _log("Created organisation is not found");
    }

}

